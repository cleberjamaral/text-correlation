b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nFrom Goals to Organisations: automated\\norganisation generator for MAS\\xe2\\x8b\\x86\\n\\nCleber Jorge Amaral1,2[0000\\xe2\\x88\\x920003\\xe2\\x88\\x923877\\xe2\\x88\\x926114] and\\nJomi Fred Hu\\xcc\\x88bner2[0000\\xe2\\x88\\x920001\\xe2\\x88\\x929355\\xe2\\x88\\x92822X]\\n\\n1 Federal Institute of Santa Catarina (IFSC), Sa\\xcc\\x83o Jose\\xcc\\x81, SC, Brazil\\ncleber.amaral@ifsc.edu.br\\n\\nhttp://www.ifsc.edu.br/\\n2 Federal University of Santa Catarina (UFSC), Floriano\\xcc\\x81polis, SC, Brazil\\n\\njomi.hubner@ufsc.br\\n\\nhttp://pgeas.ufsc.br/en/\\n\\nAbstract. An explicit organisational structure helps entrants in open\\nmulti-agent systems (MAS) to reason about their positions in the organi-\\nsation for cooperating to achieve mutual goals. In spite of its importance,\\nthere are few studies on automatic organisation generators that create\\nexplicit organisational structures. This paper introduces GoOrg, a pro-\\nposal for automatic design of organisations. Our approach considers as\\ninputs a goal decomposition tree (gdt) and user preferences. From the\\ngdt with annotations such as necessary skills to achieve organisational\\ngoals, predicted workload and throughput, GoOrg creates roles in the\\nform of an organisational chart. The main challenge is to define strate-\\ngies to search the space of all organisational structures for those that\\ncan achieve the goals respecting constraints and taking into account user\\npreferences. We can, for instance, prefer a flatter or a taller structure,\\nmore specialist or more generalist roles, and we can accept matrix con-\\nnections or not.\\n\\nKeywords: Automated organisation design \\xc2\\xb7 Organisational chart \\xc2\\xb7 Or-\\nganisational structure \\xc2\\xb7 Open Multi-Agent Systems\\n\\n1 Introduction\\n\\nThe organisational structure is an instrument used to split, organise and coordi-\\nnate activities of Multi-Agent System (MAS) organisations. It reflects authority\\nrelations and responsibility for goals, providing a typical way to assign tasks to\\nagents [15]. An explicit organisational structure helps agents to know where they\\nfit relatively to others and which are their responsibilities [9, 13, 21, 30].\\n\\nCurrently, there are a few studies on the automatic design of organisations\\nthat generates explicit organisational structures [23, 10, 26, 17]. Although sem-\\ninal, there is still space for improvements, for instance, automating the roles\\ncreation process. This paper presents an ongoing work in the context of a PhD\\n\\n\\xe2\\x8b\\x86 Supported by Petrobras project AG-BR, IFSC and UFSC.\\n\\n\\n\\n2 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\nthesis that proposes GoOrg, an automated organisation generator which takes a\\ngoal decomposition tree (gdt) and produces as output an organisational chart,\\ni.e., an explicit organisational structure, according to user preferences. The main\\nnovelty of our method is its capability of creating roles from the inputs. In this\\nsense, our method may produce a larger range of possible organisational charts.\\n\\nTo discuss the problem and to describe the proposed generator, Section 2\\npresents the concept of automatic organisation design and the state of art of\\nthis research area. Section 3 describes the problem, i.e., the challenge we want\\nto overcome. Section 4 presents our organisation generator GoOrg. Section 5\\ndescribes the research method we are applying in, the status of this research\\nand planned evaluation. Finally, Section 6 presents related works and Section 7\\npresents our conclusions.\\n\\n2 Organisation design\\n\\nPattinson et al [22] define organisation design as \\xe2\\x80\\x9cthe problem of choosing the\\nbest organisation class - from a set of class descriptions - given knowledge about\\nthe organisation\\xe2\\x80\\x99s purpose (goal, task, and constraints on the goal) and the en-\\nvironment in which the organisation is to operate\\xe2\\x80\\x9d. Given necessary input, an\\norganisation generator can give as output organisational aspects, such as, struc-\\nture, goals definitions, strategy, how leadership will work, which reward system\\nwill be used, among others [2]. We have identified three classes of organisation\\ngenerators in the MAS domain [1].\\n\\nThe first class is the automated organisation design by task planning. These\\ngenerators usually create problem-driven organisations, for specific and generally\\nshort term purposes [8]. The organisational structure is typically not explicit\\nbeing an unintended result of a task allocation process. Such generators are\\nfocused on solving a given problem by decomposing tasks, allocating them on\\nthe available agents [4]. Agents are previously known, and usually, roles are not\\nnecessary. The agents generally cooperate by fulfilling their tasks which, when\\ncombined, implies in the achievement of global goals.\\n\\nThe second class uses self-organisation approaches. In this class, the organisa-\\ntions usually emerge by agents common interest and interactions [13]. Resulting\\norganisations are dynamic, may operate continuously, have overlapping tasks,\\nhave no external or central control, and hierarchy and information flow in many\\ndirections [32]. The organisational structure is an informal implicit outcome of\\nthis bottom-up process. The target of this method is to solve some problem and\\nnot precisely to carefully design an organisation [26, 28].\\n\\nFinally, the third class is the automated explicit organisation generators. It\\nis focused \\xe2\\x80\\x9con a specification of desired outcomes and the course of actions\\nfor achieving them, analysis of the organisational environment and available\\nresources, allocation of those resources and development of organisational struc-\\ntures and control system\\xe2\\x80\\x9d [15]. It considers inputs such as organisational goals,\\navailable agents, resources and performance targets, producing explicit organi-\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 3\\n\\nsation definitions, which may include roles, constraints, assignments of respon-\\nsibilities, hierarchy and other relations.\\n\\nThe first class can provide a very efficient way to allocate tasks among agents\\nwhen the MAS is solving a previously known problem, usually in deterministic\\nenvironments. However, it may lack the ability to deal with entrants in case of\\nopen systems, because it is supposed to know at planning time the available\\nagents. In this sense, a new agent would not know what to do and how to\\ncooperate unless a replanning is triggered, which can be computationally heavy.\\n\\nWhether dealing with uncertainty and dynamic environments, the second\\nclass has advantages over other classes, which cannot deal with unpredictable\\nsituations [13]. However, in some cases, an entrant of an open system would need\\nto negotiate with other agents his participation what may be slow to accommo-\\ndate due to message exchanging.\\n\\nAlternatively, the latter class cares on designing explicit structures which\\nfoster entrances and exits [11]. When adopting a role, an entrant receives its re-\\nsponsibilities, starting to cooperate with other organisational members. In many\\ncases, an entrance does not require any extra designing effort since the roles\\nalready have assigned tasks. An exit works in the same way. A role, as an ab-\\nstract description of a position in the system, is a fundamental concept in this\\nclass [23].\\n\\n3 Organisation Design Problem\\n\\nThis research proposes to develop an automated explicit organisational generator.\\nWe hypothesise that it is possible to create roles from a gdt automatically. A\\ngdt is a plan to achieve the main goal of the system, which includes operators\\nthat ensure that the decomposition satisfaction is equivalent to the main goal\\nsatisfaction [24].\\n\\nIn short, our proposal assigns goals to roles in a structured organisational\\nchart taking into consideration some characteristics of the goals such as the ones\\nthat have the same parent goal, require the same skills to be performed, have a\\nlow predicted workload, etc. Additionally, design preferences can also determine\\nwhether to gather goals into a role or not, e.g., whether it is preferred a flat-\\nter or taller organisation; more specialist or generalist roles, if matrix relations\\nare allowed or not, maximum workload per agent, etc. Moreover, the predicted\\nthroughput associated with a goal may indicate the need for the creation of new\\nhierarchy levels and a performer index may imply that the same agent must, or\\nmust not, perform some goals.\\n\\nFor example, in a gdt for Printed Circuit Board (PCB) production, shown in\\nFig. 1a, the main goal is decomposed into two sub-goals: Buy Supplies and PCB\\nAssembly. Buy Supplies also has two sub-goals: Buy Components and Buy Other\\nSupplies. For these sub-goals, the skill Purchase is associated, which means that\\nthe agent(s) that will perform both buy sub-goals must be able to purchase items.\\nThe goal PCB Assembly has three sub-goals: Apply Paste, Place Components\\n\\n\\n\\n4 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\nFig. 1. Automated design for PCB Production. a) Inputs: goals tree and necessary\\nskills. b) Output: organisational chart with the more generalist roles considering inputs.\\n\\nand Soldering Components. The first is associated with the skill Print, the second\\nwith the skill Pick and Place and the latter with the skill Heat.\\n\\nFig. 1b shows a possible organisational chart based on the given gdt config-\\nured to be more generalist. In this example, the sub-goals Buy Components and\\nBuy Other Supplies are assigned to the same role. In this sense, the same agent\\nwill perform both Components and Other Supplies purchases. This created role\\nwas placed below the Purchasing Coordinator role, as a subordinate.\\n\\nHowever, one may ask: \\xe2\\x80\\x9cis that solution the best one to choose?\\xe2\\x80\\x9d. Still, there\\nis no sufficient information to tell whether that structure is suitable or not. For\\ninstance, how many PCB\\xe2\\x80\\x99s are being produced per hour? How many different\\nmodels are being produced? Are there other available resources? Any privacy\\nrequirement? These questions regard to varying situations in which the chosen\\nstructure depends on.\\n\\nFig. 2. Which organisational structure should be chosen?\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 5\\n\\nFig. 2 illustrates how diverse can the results be for the same given gdt. There\\nis a solution in which only three roles were created in a very generalist and flat\\norganisational structure. Another solution goes in the opposite direction, being\\nvery tall (hierarchical) and specialised. In fact, many aspects can influence or-\\nganisational structures outcomes such as the chained sub-goals, agents\\xe2\\x80\\x99 limited\\nskills and goals fulfilment capacity, agents\\xe2\\x80\\x99 communication capabilities and pri-\\nvacy needs, and so on [20]. Our proposal intends to address this problem by\\nadding annotations to the goals to generate and choose a suitable organisational\\nstructure.\\n\\n4 Proposed Method\\n\\nWe investigate the use of search algorithms to address the problem of creating\\nand choosing an organisational structure. In this sense, the search space O is\\ncomposed of all possible organisational charts o \\xe2\\x88\\x88 O. Each state o is composed\\nof: (i) a set of role identifiers used in the organisational chart; (ii) the function\\ngr for addressing the set of goals assigned to each role; (iii) the function pr for\\naddressing the parent of each role which represent its immediate superior in the\\norganisational chart where \\xef\\xbf\\xbd represents \\xe2\\x80\\x9cno parent\\xe2\\x80\\x9d, so that the root role r has\\npr(r) = \\xef\\xbf\\xbd; and (iv) the function sr for mapping the set of skills in S which are\\nassociated with each role3.\\n\\no = \\xe2\\x9f\\xa8R,gr, pr, sr\\xe2\\x9f\\xa9\\ngr \\xe2\\x88\\xb6 R \\xe2\\x86\\x92 2G\\n\\npr \\xe2\\x88\\xb6 R \\xe2\\x86\\x92 R \\xe2\\x88\\xaa {\\xef\\xbf\\xbd}\\nsr \\xe2\\x88\\xb6 R \\xe2\\x86\\x92 2S\\n\\nWe can thus state that GoOrg searches for an organisational chart o \\xe2\\x88\\x88 O that\\nis suitable for a particular gdt. A gdt is composed of: (i) a set of goal identifiers\\nG; (ii) the function pg that returns the parent of each goal of the tree where\\n\\xef\\xbf\\xbd represents \\xe2\\x80\\x9cno parent\\xe2\\x80\\x9d, so that the root goal g has pg(g) = \\xef\\xbf\\xbd; and (iii) the\\nfunction sg that addresses the set of necessary skills to achieve a given goal.\\n\\ngdt = \\xe2\\x9f\\xa8G,pg, sg\\xe2\\x9f\\xa9\\npg \\xe2\\x88\\xb6 G\\xe2\\x86\\x92 G \\xe2\\x88\\xaa {\\xef\\xbf\\xbd}\\n\\nsg \\xe2\\x88\\xb6 G\\xe2\\x86\\x92 2S\\n\\nThe difference of G and the set of goals assigned to roles is the set of not\\nallocated goals nag, where:\\n\\nnag(gdt, o) = gdt.G \\xe2\\x88\\x96 \\xe2\\x8b\\x83\\nr\\xe2\\x88\\x88o.R\\n\\ngr(r)\\n\\n3 In a future work we will add other properties of goals and inputs for GoOrg.\\n\\n\\n\\n6 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\n4.1 State Transformations\\n\\nAll possible organisations populate the search space. To help the search for\\norganisational charts, we define a transformation relation between two states.\\nFig. 3 represents each of the currently supported transformations in a respective\\narea. Top and bottom of each area show respectively previous and final states.\\nOn each area, the graph on the left side is a gdt with three goals. Grey goals are\\nthe ones that were already assigned, and the black one is the goal that is being\\nassigned. The graph on the right represents the roles of the organisational chart\\nthat is being created. The information between brackets describes the assigned\\ngoals, and eventually below it has the necessary skills to perform the respective\\nrole. Grey roles already exist, and the black one represents the role which is\\nbeing explored for applying transformations.\\n\\nb2 c2 d2\\n\\nc1b1 d1\\n\\na2\\n\\na1\\n\\nEmpty\\nOrganisational\\n\\nChart\\n\\ng0\\n\\ng1 g2\\n\\ng0\\n\\ng1 g2\\n\\ng0\\n\\ng1 g2\\n\\ng0\\n\\ng1 g2\\n\\ng0\\n\\ng1 g2\\n\\ng0\\n\\ng1 g2\\n\\ng0\\n\\ng1 g2\\n\\ng0\\n\\ng1 g2\\n\\n[g0]\\nr0\\n\\n[g0]\\nr0\\n\\n[g1]\\nr1\\n\\n[g0]\\nr0\\n\\n[g0]\\nr0\\n\\n[g0,g1]\\nr0\\n\\n[g0]\\nr0\\n\\n[g1,g2]\\nr1\\n\\n[g0]\\nr0\\n\\n[g1]\\nr1\\n\\nFig. 3. Supported transformations.\\n\\nIn this illustration, we have: (a) the root goal generates the root role; (b)\\na sub-goal is assigned to a role to be subordinate of the role that contains its\\nparent goal; (c) a sub-goal is vertically brought joining to the role that includes\\nits parent goal; and (d) the sub-goal is horizontally carried joining to the role that\\ncontains its sibling sub-goal. For instance, the first transformation is illustrated\\non the area a, i.e., Fig. 3a shows the transformation of a1 into a2. In this\\ncase, the root goal g0 is going to be assigned and the organisational chart is\\nempty as represented on part a1. After this transformation the chart has the\\nrole r0 as represented by part a2. Considering the given input as pg(g) = \\xef\\xbf\\xbd, the\\ntransformation for adding the root role is as follows:\\n\\no = \\xe2\\x9f\\xa8{},{},{},{}\\xe2\\x9f\\xa9\\naddRootRole(g)\\n\\no\\xe2\\x80\\xb2 = \\xe2\\x9f\\xa8{r},{r\\xe2\\x86\\xa6 {g}},{r\\xe2\\x86\\xa6 \\xef\\xbf\\xbd},{r\\xe2\\x86\\xa6 sg(g)}\\xe2\\x9f\\xa9\\nOn the area b of Fig. 3 the goal g1 was assigned to a new role r1 added as a\\n\\nsubordinate of r0. This transformation is a possible process after the transfor-\\nmation displayed on area a. For this case, to add the role r as subordinate of r\\xe2\\x80\\xb2\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 7\\n\\nand allocate goal g to r, we require that g is a sub-goal of g\\xe2\\x80\\xb2 (pg(g) = g\\xe2\\x80\\xb2) and g\\xe2\\x80\\xb2\\nis already allocated to r\\xe2\\x80\\xb2 (g\\xe2\\x80\\xb2 \\xe2\\x88\\x88 gr(r\\xe2\\x80\\xb2)) and have the following transformation:\\n\\no = \\xe2\\x9f\\xa8R,gr, pr, sr\\xe2\\x9f\\xa9\\naddSubordinate(g, r\\xe2\\x80\\xb2)\\n\\no\\xe2\\x80\\xb2 = \\xe2\\x9f\\xa8R \\xe2\\x88\\xaa {r}, gr \\xe2\\x88\\xaa {r\\xe2\\x86\\xa6 {g}}, pr \\xe2\\x88\\xaa {r\\xe2\\x86\\xa6 r\\xe2\\x80\\x99}, sr \\xe2\\x88\\xaa {r\\xe2\\x86\\xa6 sg(g)}\\xe2\\x9f\\xa9\\n\\nOn area c the goal g1 was assigned to the existing role r0 joining with the\\npreviously assigned goal g0. Again it can be illustrated from the state displayed\\non area a. In this case, there is no new role, the goal to be assigned is joined\\nwith a previously assigned goal g0. Formally, let the input be pg(g) = g\\xe2\\x80\\xb2, and\\nconsidering that {r\\xe2\\x80\\xb2 \\xe2\\x86\\xa6 g\\xe2\\x80\\xb2} \\xe2\\x88\\x88 gr, the transformation for joining a subordinate is\\nas follows:\\n\\no = \\xe2\\x9f\\xa8R,gr, pr, sr\\xe2\\x9f\\xa9\\njoinASubordinate(g, r\\xe2\\x80\\xb2)\\n\\no\\xe2\\x80\\xb2 = \\xe2\\x9f\\xa8R,gr \\xe2\\x88\\xaa {r\\xe2\\x80\\x99\\xe2\\x86\\xa6 {g}}, pr, sr \\xe2\\x88\\xaa {r\\xe2\\x80\\x99\\xe2\\x86\\xa6 sg(g)\\xe2\\x9f\\xa9\\n\\nFinally, on area d the goal g2 was assigned to the existing role r1 joining\\nwith the previously assigned goal g1. This transformation can be applied from the\\nstate illustrated on area b. In this case, let the input be pg(g) = g\\xe2\\x80\\xb2\\xe2\\x80\\xb2, there is a goal\\ng\\xe2\\x80\\xb2 which parent is same, i.e., pg(g\\xe2\\x80\\xb2) = g\\xe2\\x80\\xb2\\xe2\\x80\\xb2, and considering that {r\\xe2\\x80\\xb2\\xe2\\x80\\xb2 \\xe2\\x86\\xa6 g\\xe2\\x80\\xb2\\xe2\\x80\\xb2} \\xe2\\x88\\x88 gr\\nand {r\\xe2\\x80\\xb2 \\xe2\\x86\\xa6 g\\xe2\\x80\\xb2} \\xe2\\x88\\x88 gr. In this sense, the transformation for joining a pair is as\\nfollows:\\n\\no = \\xe2\\x9f\\xa8R,gr, pr, sr\\xe2\\x9f\\xa9\\njoinAPair(g, r\\xe2\\x80\\xb2)\\n\\no\\xe2\\x80\\xb2 = \\xe2\\x9f\\xa8R,gr \\xe2\\x88\\xaa {r\\xe2\\x80\\x99\\xe2\\x86\\xa6 {g}, pr, sr \\xe2\\x88\\xaa {r\\xe2\\x80\\x99\\xe2\\x86\\xa6 sg(g)}\\xe2\\x9f\\xa9\\n\\nIn fact, a goal can be assigned into a role in many ways. Currently, besides\\nthe parent relation of assigned goal(s), the associated necessary skills are also\\nbeing taking into account. The parent is the way the algorithm use to assume\\nrelations among goals. A goal that is parent or a sibling of another potentially\\ncan be joined in the same role or it can be created as a close role, being a\\nsubordinate, according to the relation. The decision to join or not depends on\\nthe skills. The role skills must be compatible to be joined, which means, the role\\nmust already have the necessary skills of a goal candidate to be joined.\\n\\n4.2 The Search Tree\\n\\nTo illustrate how the algorithm performs the search, Fig. 4 shows a gdt with\\nthree goals. There is a parent goal (g0 ) and two sub-goals (g1 and g2 ). To be\\nfulfilled, g1 requires the skill s1. In the given gdt, two goals have no annotation.\\nIn case of g1, since it requires the skill s1, a role able to perform s1 can be\\n\\n\\n\\n8 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\nFig. 4. Example of a simple goal decomposition tree (gdt).\\n\\nassigned to other goals that also requires s1 or does not require anything. Of\\ncourse, a role that has no skills associated cannot perform the goal g1.\\n\\nThe algorithm creates and visits states, as illustrated in Fig. 5. The trans-\\nformation of making the root goal be the root role of the organisational chart\\ngenerates the first state. As expected, the first transformation has removed the\\nelement g0 from the list of to assign goals, assigning it to the just created role\\ncalled r0. The three possible successors of this state, is to add a role to assign g1\\nas a subordinate of r0, add a role for g2 as a subordinate of r0 or even, bring up\\ng2 assigning it to r0, joining with other assigned goal(s) since their skills match.\\n\\nroot role\\n\\naddSubordinate addSubordinate\\n\\njoinAPairaddSubordinate joinASubordinate addSubordinate\\n\\n[g0]\\nr0\\n\\nEmpty\\nOrganisational\\n\\nChart\\n\\n[g0]\\nr0\\n\\n[g1]\\ns1\\n\\nr1\\n[g2]\\nr2\\n\\n[g0]\\nr0\\n\\n[g2]\\nr1\\n\\ng0\\n\\ng1\\ns1\\n\\ng2 [g0,g2]\\nr0\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\nDuplicated! Solution #2 Solution #3\\n[g1]\\ns1\\n\\nr1\\n\\naddSubordinate\\n\\njoinASubordinate\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n[g1,g2]\\n\\ns1\\n\\nr1\\n\\n[g1]\\ns1\\n\\nr1\\n\\n[g0]\\nr0\\n\\n[g0]\\nr0\\n\\n[g0,g2]\\nr0\\n\\n[g0]\\nr0\\n\\n[g1]\\ns1\\n\\nr2\\n[g2]\\nr1\\n\\ng0\\n\\ng1\\ns1\\n\\ng2\\n\\nSolution #1\\n\\nFig. 5. Step by step of state search with all possible solutions for the given gdt.\\n\\nApplying the transformations in the just created state on the left, where the\\ngoal g2 was assigned to the role r1, it creates a role r2 to assign g1 putting it as a\\nsubordinate of r0. This is a target state since all goals were assigned successfully.\\nThis state is represented by the area with the label \\xe2\\x80\\x9cSolution #1\\xe2\\x80\\x9d. The next area\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 9\\n\\non the right is a duplicated solution. Indeed, our method ignores the role name,\\nusing only assigned goals and parent relation to check redundancy, which is the\\ncase of solutions #1 and #2. Still, there are other solutions, as indicated by the\\nother two areas.\\n\\nTable 1 shows the referred solutions, or target states, generated by this\\nmethod. The \\xe2\\x80\\x9cSolution #1\\xe2\\x80\\x9d is the most obvious chart, which is the generation\\nof a role for each goal. The \\xe2\\x80\\x9cSolution #2\\xe2\\x80\\x9d is the result of joining horizontally the\\ngoals g1 and g2. It is possible because these goals are siblings and also the skills\\nare compatible. The \\xe2\\x80\\x9cSolution #3\\xe2\\x80\\x9d is the result of joining vertically the goals g0\\nand g2. It was possible because the skills are compatible; in this case, both goals\\nhave no necessary skills. The arrows represent parent relations among goals.\\n\\nTable 1. Organisational charts for a simple goals tree having a goal with an annotation\\n\\nSolution Chart Description\\n\\n#1\\n[g0]\\nr0\\n\\n[g1]\\ns1\\n\\nr1\\n[g2]\\nr2\\n\\n[g0]\\nr0\\n\\n[g1,g2]\\ns1\\n\\nr1\\n\\n[g0,g2]\\nr0\\n\\n[g1]\\ns1\\n\\nr1\\n\\nOrganisational chart from adding two subordinates (r1 and r2) to the\\nrole r0. The same result would be achieved adding either r1 or r2 as\\nsubordinate of r0 and later add the other as a pair. This is the most\\nspecialised solution for the given goals tree.\\n\\n#2\\n\\n[g0]\\nr0\\n\\n[g1,g2]\\ns1\\n\\nr1\\n\\nOrganisational chart from adding r1 as subordinate of r0 and then\\njoining the goals g1 and g2 into the role r1. It is possible because\\nbefore assigning g2 the role r1 already had the skills needed by g2,\\nwhich is actually nothing. The other way round would not be possible\\n(g2 has not s1 ). It is one of the more generalist solutions for the given\\ngoals tree.\\n\\n#3\\n[g0,g2]\\nr0\\n\\n[g1]\\ns1\\n\\nr1\\n\\nOrganisational chart from joining g0 and g2, since g0 has all the\\nnecessary skills needed by g2. Later r1 was added as a subordinate of\\nr0. This solution is the more generalised and one of the more generalist\\nsolutions for the given goals tree.\\n\\nIn terms of hierarchy, i.e., the number of levels, all three solutions have the\\nsame height. In this case, it is not applicable any preference to choose a flatter\\nor taller hierarchy. In terms of specialisation, \\xe2\\x80\\x9cSolution #1\\xe2\\x80\\x9d has more specialist\\nroles, and the other solutions have more generalist roles for the given gdt.\\n\\nRegarding the \\xe2\\x80\\x9cSolution #2\\xe2\\x80\\x9d, one may ask: why g2 joined with g1 and not\\nthe other way round? The reason is that a role created to perform g2 does not\\nhave any skills associated, and g1 needs the skill s1 to be performed. Since there\\nis a sub-goal which has a skill associated, it was not possible to assign all the\\ngoals into a unique role. It would be the chart with more generalist roles and also\\nthe flattest solution since it would have assigned g0, g1 and g2 into an unique\\nrole.\\n\\n\\n\\n10 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\n4.3 The Search Algorithm\\n\\nThe proposed method for creating and choosing an organisational structure uses\\nuninformed search also called blind search. We are using the well-known depth\\nstate-space search algorithm to illustrate how GoOrg is being implemented. As\\npresented in Algorithm 1, it starts adding to a stack the given first state o0 \\xe2\\x88\\x88 O.\\n\\nAlgorithm 1: Depth-limited Search\\n\\nData: Organisation o0\\nResult: Organisation\\nStack n\\nbegin\\n\\nn.push(o0)\\nwhile n \\xe2\\x89\\xa0 \\xe2\\x88\\x85 do\\n\\no\\xe2\\x86\\x90 n.pop()\\nif nag(gdt, o) = \\xe2\\x88\\x85 then\\n\\nreturn o\\nend\\nn.push(successors(gdt, o))\\n\\nend\\nreturn null // failed on finding a goal state!\\n\\nend\\n\\nIt represents the organisation that only has the root role created in the or-\\nganisational chart R. The procedure, over and over, checks if the visiting state\\nis a target state. When the tested state is not a target, the algorithm opens its\\nsuccessors to visit them later. The search ended when all the goals were assigned,\\ni.e., nag(gdt, o) is empty. The limit of this search, regarding the maximum depth\\nof the tree, is G size, in this example it has three levels.\\n\\nThe function to get successors is illustrated in Algorithm 2. It is responsible\\nfor generating all possibilities for assigning a goal to roles. Indeed, as illustrated,\\nthe algorithm tries to place the goal to be assigned on each existing role applying\\nthe supported transformations. The gr(r) function refers to the assigned goals\\nfor the specific role r, the same for the functions pr and sr.\\n\\nThe algorithms for transformations are roughly similar. The parent is even-\\ntually unknown because joining process may assign multiple goals into a unique\\nrole. For this reason, the algorithm tries to find the parent goal of the sub-goal\\nto be allocated into the existing roles. Then nag(gdt, o) is almost a copy, just\\nskipping the current goal. Later the R is copied and also is updated with the just\\ncreated role. Finally, this new or modified role is considered a possible successor\\nstate for further searches.\\n\\nIn the previous example, as illustrated in Fig. 5, all the possible solutions\\nare being shown. However, the algorithm stops after finding the first solution,\\nwhich remarks on the importance of ordering. The solutions are sorted by cost\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 11\\n\\nAlgorithm 2: successors\\n\\nData: List \\xe2\\x9f\\xa8G,pg, sg\\xe2\\x9f\\xa9 gdt, Organisation o\\nResult: List \\xe2\\x9f\\xa8 Organisation \\xe2\\x9f\\xa9\\nbegin\\n\\nList suc\\nforeach Goal g of nag(gdt, o) do\\n\\nforeach Role r of o.R do\\nif gr(r) contains pg(g) then\\n\\naddSubordinate(r, suc, g) // Add as a child role\\nif sg(g) \\xe2\\x88\\x88 sr(r) then\\n\\njoinASubordinate(r, suc, g) // Join g into *this* role\\nend\\n\\nelse if pg(g) \\xe2\\x88\\x88 gr(pr(r)) and sg(g) \\xe2\\x88\\x88 sr(r) then\\njoinAPair(r, suc, g) // Join goal g into *this* role\\n\\nend\\n\\nend\\n\\nend\\nreturn suc\\n\\nend\\n\\nfunctions which are related to the user preferences. For instance, if a more gen-\\neralist structure is preferred so \\xe2\\x80\\x9cpair roles\\xe2\\x80\\x9d creation is costly, and joining pairs\\nis cheaper. It makes preferable a chart with fewer pairs as possible.\\n\\n5 Future work\\n\\nFor the next step of our research, the designing process is being split into two\\nphases: the organisation design and the resource allocation process. With this\\nseparation, it is expected that GoOrg becomes more suitable to deal with asyn-\\nchronous changes on the system\\xe2\\x80\\x99s resources availability and redesign requests.\\n\\nOn the next step, still on designing process, we will add new inputs such as\\npredicted workload, necessary resources, performer index, communication topics,\\nand predicted throughput. The predicted workload can be used to know how many\\nagents should take the same role or if the same agent can perform more than\\none role. The performer index indicates that the same agent must perform some\\ngoals and, contrarily, can tell that two goals cannot be performed by the same\\nagent, for instance in a process in which something is made and must be verified\\nby another agent. With communication topics and predicted throughput, the\\nhierarchy levels and departmentalisation can be set. These data may also allow\\nenhancing the algorithm to decide when a coordination role can be subtracted,\\nmaintained or even new ones created. Other state-space search algorithm and\\ncost functions will be experienced for optimisation purpose and to give more\\npossibilities in terms of structures.\\n\\nIn the sequence, we plan to develop the second process, i.e., resources al-\\nlocation. This process will bind resources and roles. The inputs are available\\n\\n\\n\\n12 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\nagents and skills, available artefacts and organisation design preferences. This\\nallocation process aims to guarantee that the created structure is viable, i.e., can\\nbe well-formed when it runs with the given resources. Finally, the output is an\\norganisational chart with artefacts allocated and agents assigned to roles.\\n\\nThe allocation process can solve some challenges that do not require a re-\\ndesign. To illustrate it, back to PCB Production example, consider that Buy\\nComponents sub-goal also needs Electronics Knowledge skill and the chart has\\ncreated different roles for purchasing, they can be called Components Purchaser\\nand Other Inputs Purchaser. Consider that agent A and agent B play, respec-\\ntively, the referred roles having all the necessary skills to play both. Consider\\nnow that agent A left the system and agent C has joined it, but this agent has\\nno Electronics Knowledge skill. The resource allocation process can move agent\\nB to Components Purchaser role, assigning agent C to Other Inputs Purchaser\\nrole.\\n\\nIt is also expected to make GoOrg suitable to deal with asynchronous changes\\non the system\\xe2\\x80\\x99s resources availability and redesign requests. For instance, with\\nsimple changes in the availability of resources, the process can be lighter. How-\\never, with more significant changes, for example, on the gdt, a complete redesign\\nprocess may be necessary, a function that can be triggered by the allocation\\nphase. In this solution, as illustrated in Fig. 6b1, the goals were centralised in\\na unique role which is more generalist to achieve more goals with sometimes\\ndifferent associated skills.\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\nProduction\\nManagerPurchasingCoordinator\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator ComponentsPlacer\\n\\nComponents\\nWelder \\n\\nPurchaser\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n?\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nPurchaser\\n\\n \\nPurchaser\\n\\nProduction\\ncell supervisor\\n\\nProduction\\ncell supervisor\\n\\nProduction\\ncell supervisor\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n? ?\\n\\n Production\\nManager\\n\\nPurchaser Full Assembler \\nalice\\n\\n \\ntom\\n\\n \\npaul\\n\\nAssembling department\\n\\nPurchases department\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\nProduction\\nManagerPurchasingCoordinator\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator ComponentsPlacer\\n\\nComponents\\nWelder \\n\\nPurchaser\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\nProduction\\nManagerPurchasingCoordinator\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator ComponentsPlacer\\n\\nComponents\\nWelder \\n\\nPurchaser\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\nProduction\\nManagerPurchasingCoordinator\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator ComponentsPlacer\\n\\nComponents\\nWelder \\n\\nPurchaser\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n?\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nPurchaser\\n\\n \\nPurchaser\\n\\nProduction\\ncell supervisor\\n\\nProduction\\ncell supervisor\\n\\nProduction\\ncell supervisor\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n? ?\\n\\n Production\\nManager\\n\\nPurchaser Full Assembler \\nalice\\n\\n \\ntom\\n\\n \\npaul\\n\\nAssembling department\\n\\nPurchases department\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Supplies\\n\\nBuy\\nComponents\\n\\nBuy Other\\nSupplies\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n?\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nPurchaser\\n\\n \\nPurchaser\\n\\nProduction\\ncell supervisor\\n\\nProduction\\ncell supervisor\\n\\nProduction\\ncell supervisor\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n? ?\\n\\n Production\\nManager\\n\\nPurchaser Full Assembler \\nalice\\n\\n \\ntom\\n\\n \\npaul\\n\\nAssembling department\\n\\nPurchases department\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Supplies\\n\\nBuy\\nComponents\\n\\nBuy Other\\nSupplies\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\nb)a)\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaster\\nApplicator\\n\\nComponents\\nPlacer\\n\\nComponents\\nWelder\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\ntom\\n\\n \\nfred\\n\\n \\npaul\\n\\nb1)\\n\\n Production\\nManager\\n\\n \\nPurchaser\\n\\n \\nPurchaser\\n\\nComponents\\nWelder\\n\\nComponents\\nPlacer\\n\\nPaster\\nApplicator\\n\\n \\ntom\\n\\n \\nmary\\n\\n \\nfred\\n\\n \\npaul\\n\\n \\nalice\\n\\n \\nbob\\n\\n \\nPurchaser\\n\\n \\nPurchaser\\n\\nComponents\\nWelder\\n\\nComponents\\nPlacer\\n\\nPaster\\nApplicator\\n\\n \\ntom\\n\\n \\nmary\\n\\n \\nfred\\n\\n \\npaul\\n\\n \\nalice\\n\\n \\nbob\\n\\nComponents\\nPlacer\\n\\nb2) b3)\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Inputs\\n\\nBuy\\nComponents\\n\\nBuy Other\\nInputs\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n?\\n\\n? ?\\n\\na)\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nAssembler\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\n???\\n\\n \\npaul\\n\\nPCB \\nAssembly\\n\\nApply\\nPaste\\n\\nPlace\\ncomponents\\n\\nSoldering\\nComponents\\n\\nHeatPick andPlace\\nPrint\\n\\nBuy Supplies\\n\\nBuy\\nComponents\\n\\nBuy Other\\nSupplies\\n\\nPurchasePurchase\\n\\nPCB \\nProduction\\n\\n Production\\nManager\\n\\nPurchasing\\nCoordinator\\n\\n \\nPurchaser\\n\\nAssembling\\nCoordinator\\n\\nPaste\\nApplicator\\n\\n \\nbob\\n\\n \\nalice\\n\\n \\nalice\\n\\n \\nmary\\n\\n \\npaul\\n\\nPlacer &\\nWelder  tom\\n\\na)\\n\\nb1) b2)\\n\\nPurchase PrintPick and Place\\nHeat\\n\\nPurchase Print\\n\\nPick and Place\\nHeat\\n\\nFig. 6. More generalist organisation chart for the given goals and available agents.\\n\\nHowever, the illustration also exemplifies a situation where there is no avail-\\nable agent with all necessary skills to perform the role Assembler since it is\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 13\\n\\ngathering the skills Print, Pick and Place and Heat. Fig. 6b2 shows a possible\\nsolution assuming that an agent mary is able to perform Print and an agent\\ntom can perform Pick and Place and Heat. In this case, the more generalist\\nwell-formed organisation is represented by this last chart.\\n\\nWe also expect to create other organisational aspects as outputs, i.e., Organ-\\nisational Scheme and Organisational Norms. The former refers to sets of goals\\nallocated to different roles that should be performed by the same agent in a\\nspecific sequence. The latter regards especially to general obligations, such as,\\nwhen adopting a role created by the method GoOrg the agent is obligated to\\nperform the missions associated with the referred role.\\n\\nFinally, we will evaluate our solution using existing domains [3, 17, 26]. We\\nwill first assess the number of input parameters needed by GoOrg. With these\\ninputs, we will evaluate the ability of GoOrg to design organisations properly.\\nWe will vary aspects of the simulated domains presenting them as more static or\\ndynamic, with shorter or longer goals, with more chained or independent goals,\\netc. These domains will be used to experiment with different user preference\\nparameters.\\n\\nFrom a literature perspective, we can select an organisational structure by\\nits features as the potentially better solution for the given problem and scenario.\\nBesides testing this candidate, other organisational structures will be created for\\ncomparison purposes. It is expected to fulfil all the goals in less time with the best\\ncandidate. The results of the simulations should give us insights to discuss lit-\\nerature perspectives, the adhesion of our method and simulation with literature\\nand potentially GoOrg application as a testbed for organisational structures.\\n\\nAmong the assumptions we want to evaluate, we have: how the span of\\ncontrol affects the effectiveness of the organisation [13] varying the height of the\\nhierarchy to check the impact on agents communication and coordination [14,\\n30]. In this sense, we can check whether a few number of levels really can lead\\nto faster decisions and lower overhead costs [14, 30] and if highly structured\\norganisations are best for repetitive operations [13].\\n\\n6 Related Work\\n\\nIn the administration area, there are many studies about organisation design,\\nincluding some frameworks that may help companies and other organisations\\nto design their structures [2, 7]. In multi-agent systems, we usually have man-\\nual organisational generators, i.e., approaches that allow a human to design\\norganisations in a wide variety of structures and other aspects as norms, roles,\\nrelations, organisational goals and ontologies, e.g., Moise+ [18], THOMAS [5],\\nSTEAM [31] and AALADIN [12].\\n\\nIn spite of having many studies about organisation design, there are still many\\ngaps regarding the full range of disciplines and high complexity of organisations.\\nConsidering only automatic organisation generators, the focus of this research,\\nthere are few studies.\\n\\n\\n\\n14 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\nAutomated planning is a research area that has produced many contributions\\nto MAS design. When developing planners for multiple agents, the organisation\\ndesign is an intrinsic outcome. Some examples of planners able to generate organ-\\nisations are T\\xc3\\x86MS [8] which provides a way to quantitatively describe individual\\ntasks which are performed in shared environments, DOMAP [3] which is a de-\\ncentralised MAS task planning and Sleight\\xe2\\x80\\x99s agent-driven planner [27] using a\\ndecentralised Markov Decision Process Model.\\n\\nConsidering bottom-up approaches So [29] did one of the earlier researches\\non Multi-Agent Systems organisation design. This study over the characteri-\\nsation of different organisation designs, including self-organised ones and the\\nreconfiguration process for stable organisations. There are several studies over\\nself-organised swarms which use very computationally limited agents [19], and\\nthere is no complex coordination mechanism among agents [32].\\n\\nIn the class we have positioned our research, we found only a few works:\\nSADDE [23] and ODML [17], which are algorithms that use as input mathemat-\\nical models to predict efforts and create an organisational structure; MaSE-e [10]\\nwhich is a method for creating organisation structures extending the engineering\\nmethod MaSE; and KB-ORG [25, 26] that takes goals and roles to bind agents\\nand create coordination levels. Although seminal, we think the methods have\\nchallenges to overcome, especially regarding inputs in which we are proposing a\\nmethod to produce roles in a way to make inputs easier to handle.\\n\\nTable 2 gives an overview of explicit organisation generators we have found4.\\nWe are comparing a few features related to inputs, intrinsic features and outputs.\\nThe first columns refer to inputs. We start checking whether goals are inputs\\nsince it gives an idea of the start point of each approach. The no need roles as\\ninputs indicates if the generator needs this input. The column Bound Agents are\\ninputs represents the capability of the generator to receive as inputs a structure\\nearlier created with bound resources.\\n\\nThe next columns represent features of the generators. The column has quan-\\ntitative analysis describes the capability of the generator the assess the goals\\ncreating structures that take into account quantitative parameters such as goal\\nexpected needed effort to be performed. Organisations are explicit refers to meth-\\nods that use explicit organisation representations. Is domain-independent relates\\nto methods that are suitable for any problem domain.\\n\\nThe next columns are related to the main outputs of the generators. Cre-\\nates roles refers to the ability to automatically create roles, combined with roles\\nare inputs says whether the approach uses or not the concept of roles. The cre-\\nates coordination levels column represents the ability of the method to create\\ncoordination roles according to coordination needs automatically. Create viable\\norganisations represents the ability of the generator to check available resources\\nto create organisations that can be fulfilled when running. synthesise organi-\\nsational norms inform whether generators are automatically creating organisa-\\n\\n4 Legend: (Y)es, (-)No, On (R)oadmap and (*) comments. Table comments: *1 The\\noutput is a nodes tree, not exactly an organisational chart. *2 There is no hierarchy.\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 15\\n\\nOrganisation\\nGenerator\\n\\nG\\no\\na\\nls\\n\\na\\nre\\n\\nin\\np\\nu\\nts\\n\\nN\\no\\n\\nn\\ne\\ne\\nd\\n\\nro\\nle\\n\\ns\\na\\ns\\n\\nin\\np\\nu\\nts\\n\\nB\\no\\nu\\nn\\nd\\n\\nA\\ng\\n.\\n\\na\\nre\\n\\nin\\np\\nu\\nts\\n\\nH\\na\\ns\\n\\nq\\nu\\na\\nn\\nti\\n\\nta\\nti\\n\\nv\\ne\\n\\na\\nn\\na\\nly\\n\\nsi\\ns\\n\\nO\\nrg\\n\\na\\nn\\nis\\n\\na\\nti\\n\\no\\nn\\ns\\n\\na\\nre\\n\\ne\\nx\\np\\nli\\nc\\nit\\n\\nIs\\nd\\no\\nm\\n\\na\\nin\\n\\n-i\\nn\\nd\\ne\\np\\n\\ne\\nn\\nd\\ne\\nn\\nt\\n\\nC\\nre\\n\\na\\nte\\n\\ns\\nR\\n\\no\\nle\\n\\ns\\n\\nC\\nre\\n\\na\\nte\\n\\ns\\nC\\n\\no\\no\\nrd\\n\\n.\\nL\\n\\ne\\nv\\ne\\nls\\n\\nC\\nre\\n\\na\\nte\\n\\ns\\nv\\nia\\n\\nb\\nle\\n\\no\\nrg\\n\\n.\\n\\nS\\ny\\nn\\nth\\n\\ne\\nsi\\n\\nse\\nO\\n\\nrg\\n.\\n\\nN\\no\\nrm\\n\\ns\\n\\nB\\nin\\n\\nd\\na\\ng\\ne\\nn\\nts\\n\\na\\nn\\nd\\n\\nro\\nle\\n\\ns\\n\\nC\\nre\\n\\na\\nte\\n\\ns\\nd\\ne\\np\\na\\nrt\\n\\nm\\ne\\nn\\nts\\n\\nR\\ne\\np\\nre\\n\\nse\\nn\\nts\\n\\nro\\nle\\n\\ns\\nin\\n\\na\\nch\\n\\na\\nrt\\n\\nD\\no\\ne\\ns\\n\\nst\\na\\nte\\n\\nre\\no\\nrg\\n\\na\\nn\\nis\\n\\na\\nti\\n\\no\\nn\\n\\nD\\no\\ne\\ns\\n\\nst\\nru\\n\\nc\\ntu\\n\\nre\\nre\\n\\no\\nrg\\n\\n.\\n\\nGoOrg Y Y Y Y Y Y Y Y Y R Y R Y R R\\n\\nSADDE Y - - Y Y Y - - Y - Y - - - -\\n\\nMaSE-e Y - Y Y Y Y - - Y - Y - *2 Y R\\n\\nKB-ORG Y - - Y Y Y - Y Y - Y - Y - -\\n\\nODML Y - - Y Y Y - - Y - Y - *1 - -\\nTable 2. Comparison among organisation generation methods.\\n\\ntional norms. Bind agents and roles tells whether the method is doing agents\\nallocation job or not.\\n\\nThe next columns regard to byproducts of the generators. Creates depart-\\nments refers to the specific ability of the generator to create organisational de-\\npartments automatically. Represents roles in a chart relates to methods that\\nrepresent organisations as usual organisational charts.\\n\\nThe following columns are related to the capability of the generators to deal\\nwith reorganisations. Does state reorganisation refers to the ability to move\\nagents from some responsibility to another without needing to trigger a restruc-\\nturing process. Does structure reorganisation refers to the ability to create new\\nstructures based on an old one.\\n\\nFinally, as we agree with many authors that there is no single type of organi-\\nsation suitable for all situations [16], we also recognise that there is no individual\\napproach ideal for creating all organisations [6]. In both cases, each offers some\\nadvantages that the others may lack, especially regarding different organisation\\ngenerator classes. In the presented comparison, we tried to show an overview of\\nthose organisation generators based on the assumption that explicit organisa-\\ntional structures can provide advantages on designing open systems.\\n\\n7 Conclusion\\n\\nThis paper has presented a proposal for an automated generator of explicit or-\\nganisations based on goals and annotations as inputs. The current status of\\nthis research shows that it is feasible to draw an organisational chart using as\\ninput organisational goals with some annotations such as necessary skills to per-\\nform each goal. It is intended to enhance the current version of our method\\nadding new inputs to bring necessary information to produce useful organisa-\\n\\n\\n\\n16 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\ntional charts, taking advantage of opportunities to join goals on the same roles,\\nadding or removing coordination levels. According to performance issues, we can\\nadd heuristics to improve the search algorithm.\\n\\nWe have also presented our classification regarding related research of auto-\\nmated organisation generators: (i) automated organisation design by task plan-\\nning ; (ii) self-organisation approaches; and (iii) automated explicit organisation\\ngenerators. It shows that different strategies address the challenge of organisa-\\ntion design. The approaches have advantages and drawbacks being more suitable\\naccording to the system\\xe2\\x80\\x99s purpose and environment conditions. Besides, we think\\nthat each class gives some contribution and a combination of them can lead to\\na comprehensive MAS design.\\n\\nBesides the organisational chart creation itself, an extra outcome of GoOrg is\\na proposition of a model that identifies different designing phases done by various\\nmethods which potentially can be used together to design a whole MAS. Indeed,\\nwhen splitting GoOrg to fit this model, we could identify that our method is\\nactuating on two processes: organisation design and resources allocation. The\\nallocation of resources done before the execution is a guarantee that when run-\\nning the created organisational chart can be filled by the available resources, i.e.,\\ncan be a well-formed organisation.\\n\\nAbout evaluation criteria, it is intended to apply the model in known domains\\ntesting if it can build suitable structures. These organisations will be simulated in\\na variety of conditions and checked if goals were fulfilled. By tuning preferences,\\nit is expected to create better arrangements for our testing domains. We also\\nintend to compare the results in terms of time to accomplish the goals between\\nthe best candidate and other organisational structures.\\n\\nReferences\\n\\n1. Amaral, C.J., Hu\\xcc\\x88bner, J.F.: Goorg: Automated organisational chart design for\\nopen multi-agent systems. In: De La Prieta, F., Gonza\\xcc\\x81lez-Briones, A., Pawleski,\\nP., Calvaresi, D., Del Val, E., Lopes, F., Julian, V., Osaba, E., Sa\\xcc\\x81nchez-Iborra, R.\\n(eds.) PAAMS. pp. 318\\xe2\\x80\\x93321. Springer International Publishing, Cham (2019)\\n\\n2. Burton, R.M., Obel, B., Desanctis, G.: Organizational design: a step-by-step ap-\\nproach. Cambridge University Press (2011)\\n\\n3. Cardoso, R.C., Bordini, R.H.: A modular framework for decentralised multi-agent\\nplanning. In: Proceedings of the 16th Conference on Autonomous Agents and Mul-\\ntiAgent Systems. pp. 1487\\xe2\\x80\\x931489. Sa\\xcc\\x83o Paulo, Brazil (2017)\\n\\n4. Cardoso, R.C., Bordini, R.H.: Decentralised Planning for Multi-Agent Program-\\nming Platforms (Aamas), 799\\xe2\\x80\\x93807 (2019)\\n\\n5. Criado, N., Argente, E., Botti, V.: THOMAS: An agent platform for supporting\\nnormative multi-agent systems. Journal of Logic and Computation 23(2), 309\\xe2\\x80\\x93333\\n(2013)\\n\\n6. Daft, R.L.: Organization Theory and Design. South-Western College Pub, Centage\\nLearning, 10th edn. (2009)\\n\\n7. De Pinho Rebouc\\xcc\\xa7as De Oliveira, D.: Estrutura Organizacional: Uma Abordagem\\nPara Resultados e Competitividade. ATLAS EDITORA (2006)\\n\\n\\n\\nFrom Goals to Organisations: automated organisation generator for MAS 17\\n\\n8. Decker, K.S.: Environment Centered Analysis and Design of Coordination Mecha-\\nnisms. PhD Thesis, University of Massashusets (May 1995)\\n\\n9. DeLoach, S.A.: Modeling organizational rules in the multi-agent systems engineer-\\ning methodology. In: Cohen, R., Spencer, B. (eds.) Advances in Artificial Intelli-\\ngence. pp. 1\\xe2\\x80\\x9315. Springer Berlin Heidelberg, Berlin, Heidelberg (2002)\\n\\n10. DeLoach, S.A., Matson, E.: An Organizational Model for Designing Adaptive Mul-\\ntiagent Systems. The AAAI-04 Workshop on Agent Organizations: Theory and\\nPractice (AOTP 2004). pp. 66\\xe2\\x80\\x9373 (2004)\\n\\n11. Deloach, S.A., Oyenan, W.H., Matson, E.T.: A capabilities-based model for adap-\\ntive organizations. In: Autonomous Agents and Multi-Agent Systems. vol. 16, pp.\\n13\\xe2\\x80\\x9356 (2008)\\n\\n12. Ferber, J., Gutknecht, O.: A meta-model for the analysis and design of organi-\\nzations in multi-agent systems. Proceedings - International Conference on Multi\\nAgent Systems, ICMAS 1998 pp. 128\\xe2\\x80\\x93135 (1998)\\n\\n13. Fink, S., Jenks, R., Willits, R.: Designing and Managing Organizations. Irwin Series\\nin Financial Planning and Insurance, R.D. Irwin (1983)\\n\\n14. Galbraith, J.R.: Designing organizations: an executive briefing on strategy, struc-\\nture, and process. Jossey-Bass Publishers - San Francisco (1995)\\n\\n15. Hatch, M.: Organization Theory: Modern, Symbolic, and Postmodern Perspectives.\\nOxford University Press (1997)\\n\\n16. Horling, B., Lesser, V.: A survey of multi-agent organizational paradigms. Knowl-\\nedge Engineering Review 19(4), 281\\xe2\\x80\\x93316 (2004)\\n\\n17. Horling, B., Lesser, V.: Using quantitative models to search for appropriate orga-\\nnizational designs. Autonomous Agents and Multi-Agent Systems 16(2), 95\\xe2\\x80\\x93149\\n(2008)\\n\\n18. Hu\\xcc\\x88bner, J.F., Sichman, J.S.: Organizac\\xcc\\xa7a\\xcc\\x83o de sistemas multiagentes. III Jornada de\\nMiniCursos de Intelige\\xcc\\x82ncia Artificial JAIA03 8, 247\\xe2\\x80\\x93296 (2003)\\n\\n19. Labella, T.H., Dorigo, M., Deneubourg, J.L.: Division of labor in a group of robots\\ninspired by ants\\xe2\\x80\\x99 foraging behavior. ACM Transactions on Autonomous and Adap-\\ntive Systems 1(1), 4\\xe2\\x80\\x9325 (2007)\\n\\n20. Leita\\xcc\\x83o, P., Karnouskos, S., Ribeiro, L., Lee, J., Strasser, T., Colombo, A.W.: Smart\\nagents in industrial cyber physical systems. Proceedings of the IEEE (2016)\\n\\n21. Mintzberg, H.: The design school: Reconsidering the basic premisses of strategic\\nmanagement. Strategic Management Journal 11(May 1989), 171\\xe2\\x80\\x93195 (1990)\\n\\n22. Pattison, H.E., Corkill, D.D., Lesser, V.R.: Chapter 3 - instantiating descriptions of\\norganizational structures. In: Huhns, M.N. (ed.) Distributed Artificial Intelligence,\\npp. 59 \\xe2\\x80\\x93 96 (1987)\\n\\n23. Sierra, C., Sabater, J., Augusti, J., Garcia, P.: SADDE: Social agents design driven\\nby equations. Methodologies and software engineering for agent systems. Kluwer\\nAcademic Publishers pp. 1\\xe2\\x80\\x9324 (2004)\\n\\n24. Simon, G., Mermet, B., Fournier, D.: Goal decomposition tree: An agent model to\\ngenerate a validated agent behaviour. In: Baldoni, M., Endriss, U., Omicini, A.,\\nTorroni, P. (eds.) Declarative Agent Languages and Technologies III. pp. 124\\xe2\\x80\\x93140.\\nSpringer Berlin Heidelberg, Berlin, Heidelberg (2006)\\n\\n25. Sims, M., Corkill, D., Lesser, V.: Knowledgeable Automated Organization Design\\nfor Multi-Agent Systems. Challenge pp. 1\\xe2\\x80\\x9342 (2007)\\n\\n26. Sims, M., Corkill, D., Lesser, V.: Automated organization design for multi-agent\\nsystems. Autonomous Agents and Multi-Agent Systems 16(2) (2008)\\n\\n27. Sleight, J., Durfee, E.H.: Organizational design principles and techniques for\\ndecision-theoretic agents. In: Proceedings of the 2013 International Conference on\\n\\n\\n\\n18 Amaral, C.J. and Hu\\xcc\\x88bner, J.F.\\n\\nAutonomous Agents and Multi-agent Systems. pp. 463\\xe2\\x80\\x93470. AAMAS \\xe2\\x80\\x9913, Interna-\\ntional Foundation for Autonomous Agents and Multiagent Systems, Richland, SC\\n(2013)\\n\\n28. Sleight, J.L., Durfee, E.H., Baveja, S.S., Cohn, A.A.E.M., Lesser, E.V.R.: Agent-\\nDriven Representations, Algorithms, and Metrics for Automated Organizational\\nDesign (2015)\\n\\n29. So, Y.P., Durfee, E.H.: Chapter X. Designing Organizations for Computational\\nAgents (1996)\\n\\n30. Stoner, J., Freeman, R.: Management. Prentice-Hall (1992)\\n31. Tambe, M.: Towards Flexible Teamwork. Journal of Artificial Intelligence Research\\n\\n7, 83\\xe2\\x80\\x93124 (1997)\\n32. Ye, D., Zhang, M., Vasilakos, A.V.: A Survey of Self-organisation Mechanisms in\\n\\nMulti-Agent Systems. IEEE Transactions On SMC: Systems 47(3) (2016)\\n\\n\\n'