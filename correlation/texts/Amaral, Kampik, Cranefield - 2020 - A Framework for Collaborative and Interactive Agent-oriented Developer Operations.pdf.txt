b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA Framework for Collaborative and Interactive Agent-oriented Developer Operations\\n\\n\\nA Framework for Collaborative and Interactive Agent-oriented\\nDeveloper Operations\\xe2\\x88\\x97\\n\\nDemonstration\\n\\nCleber Jorge Amaral\\nFederal Institute of Santa Catarina\\n\\nS\\xc3\\xa3o Jos\\xc3\\xa9, SC, Brazil\\ncleber.amaral@ifsc.edu.br\\n\\nTimotheus Kampik\\nUme\\xc3\\xa5 University\\nUme\\xc3\\xa5, Sweden\\n\\ntkampik@cs.umu.se\\n\\nStephen Cranefield\\nUniversity of Otago\\n\\nDunedin, New Zealand\\nstephen.cranefield@otago.ac.nz\\n\\nABSTRACT\\nConsidering the increasing prevalence of autonomous systems in\\ntoday\\xe2\\x80\\x99s society, one could expect that agent-oriented program-\\nming (AOP) is gaining traction among mainstream software en-\\ngineering practitioners. However, the tools and frameworks that\\nare used and developed in the academic multi-agent systems engi-\\nneering community struggle to keep up with recent developments\\nin the software industry in regards to how complex information\\nsystems are developed and maintained. An important aspect of\\nrecent changes in software engineering practices is the application\\nof technologies that support the increasingly fast iteration of a\\nprogramming-testing-deployment cycle. Such approaches require\\nintense collaboration that crosses boundaries between traditionally\\nseparated roles like software development, quality assurance, and\\noperations; these approaches are often referred to as DevOps. In\\nthis paper, we work towards the integration of DevOps and AOP\\nby introducing an extension of jacamo-web, an Integrated Develop-\\nment Environment (IDE) that supports the collaborative, web-based\\ndevelopment and real-time continuous integration of autonomous\\nagents and Multi-Agent Systems (MAS).\\n\\nKEYWORDS\\nAgent-oriented programming; IDE; Iterative software development;\\nEngineering multi-agent systems\\nACM Reference Format:\\nCleber Jorge Amaral, Timotheus Kampik, and Stephen Cranefield. 2020.\\nA Framework for Collaborative and Interactive Agent-oriented Developer\\nOperations. In Proc. of the 19th International Conference on Autonomous\\nAgents and Multiagent Systems (AAMAS 2020), Auckland, New Zealand, May\\n9\\xe2\\x80\\x9313, 2020, IFAAMAS, 3 pages.\\n\\n1 INTRODUCTION\\nIn many organizations, the software development process from\\nspecification to deployment is executed at an increasingly rapid\\npace; often, software teams aim at improving their processes to sup-\\nport continuous deployments, i.e. the ability to deploy small updates\\nto the code base without system downtime in a fully automated\\nmanner and at any point in time [9, 11]. Consequently, hand-overs\\n\\n\\xe2\\x88\\x97Work partially supported by CAPES, project PrInt CAPES-UFSC \\xe2\\x80\\x9cAutomation 4.0\\xe2\\x80\\x9d\\nand by the Wallenberg AI, Autonomous Systems and Software Program (WASP).\\n\\nProc. of the 19th International Conference on Autonomous Agents and Multiagent Systems\\n(AAMAS 2020), B. An, N. Yorke-Smith, A. El Fallah Seghrouchni, G. Sukthankar (eds.), May\\n9\\xe2\\x80\\x9313, 2020, Auckland, New Zealand. \\xc2\\xa9 2020 International Foundation for Autonomous\\nAgents and Multiagent Systems (www.ifaamas.org). All rights reserved.\\n\\nbetween distinct technology ecosystems and teams become increas-\\ningly impractical [10]. To address this challenge, the concept of\\nDeveloper Operations (DevOps) has emerged as a widely employed\\nbest practice for engineering and maintaining complex informa-\\ntion systems [7]. DevOps comes with its own set of tools, which\\nrange from business process execution engines that bridge the\\ngap between business and IT [6] to container orchestration tools\\nthat allow for the automation of deployments and operations of\\nsystem instances across a heterogeneous and scalable device and\\ninfrastructure landscape [4].\\n\\nInteractive programming refers to the programming of a running\\nsystem in real time [14]. Because changes to the program code\\nare applied to the running system instance(s) on-the-fly as soon\\nas they are made or committed, interactive programming speeds\\nup development time [12]. Consequently, interactive programming\\nfacilitates prototyping and debugging, as well as iterative develop-\\nment, especially in scenarios, in which no precise design documents\\nexist [5, 12].\\n\\nAmong software engineering practitioners, it is largely acknowl-\\nedged that programming is an inherently collaborative activity.\\nOn the technology side, frameworks and tool-chains emerged in\\nwhich collaboration features are treated as first-class citizens. Most\\nnotably, version control systems and abstractions on top of them\\n(for example: GitHub and GitLab) [2] are facilitating collaborative\\nwork in large teams, integration of specification documents (issues)\\nand source code, and continuous integration. To take collaboration\\nsupport to a new level, IDEs with (near) real-time collaboration\\nfeatures have been developed during the last decade [8, 13]; yet, in\\ncontrast to collaborative version control systems, such IDEs have\\nso far not been widely adopted in practice. To the best of our knowl-\\nedge, no collaborative programming approaches and technology\\nframeworks exist specifically for AOP.\\n\\n2 REAL TIME COLLABORATIVE AOP\\nWe extended jacamo-web [1], a JaCaMo-based [3] IDE for develop-\\ning Multi-Agent Systems under the perspective of the dimensions\\nof the agents, environment and organizations1. Jacamo-web makes\\nuse of Read-Eval-Print Loop (REPL) [15] functions, allowing the\\nengineer to interactively insert blocks of code into running agents.\\nThese on-the-fly updates keep the agent\\xe2\\x80\\x99s context and current in-\\ntentions when changes to its plans library are made. Jacamo-web\\nsupports on-the-fly development of organizations and artifacts\\nthanks to a built-in Java compiler. Our extension adds integrative\\nand real-time collaborative features for AOP to jacamo-web.\\n\\n1A demo instance runs at http://jacamo-web.herokuapp.com/.\\n\\nhttp://jacamo-web.herokuapp.com/\\n\\n\\nLet us introduce a running example to demonstrate the features.\\nWe implement an online business-to-business marketplace for au-\\ntonomous supply chain integration. The marketplace is modeled as\\nan MAS, composed of three organizations: i) a factory that needs\\nto buy items; ii) a supplier that wants to sell items; and iii) the mar-\\nketplace, representing the institution in which agents can adopt\\nbuyer and seller roles and trade in compliance with its norms.\\n\\nWe have two engineers developing this system; one is responsible\\nfor the factory side and the other for the supplier. The engineers\\nhave to develop their agents according to the marketplace protocol,\\nwhich specifies three steps to be performed in order to fully process\\na trade transaction: (i) an item must be ordered; (ii) the payment\\nmust be made; and (iii) the item must be delivered.\\n\\nIn our example, both factory and supplier organizations have the\\ncommon objective of trading with each other. The engineers are free\\nto decide the details of how the objective can be achieved, which\\nillustrates a common challenge that modern software engineering\\nteams face.\\n\\nOur extension provides new interactive facilities. The IDE auto-\\nmatically updates its content keeping the engineer informed about\\nchanges done by others. For instance, when the engineer creates\\nand updates the seller agent, the engineer that is programming the\\nbuyer may perceive and interact with the new state of the seller. The\\ninteractive development approach is often adopted when specifica-\\ntions are unclear. For effective, rapid small upgrades, it is essential\\nto have a hot-swap facility providing an immediate response from\\nthe system. It helps engineers to understand the system\\xe2\\x80\\x99s behavior\\nand effects of each change made in MAS models.\\n\\nFurthermore, continuous deployment requires fast quality assur-\\nance functionalities. Jacamo-web provides facilities such as code\\nhighlighting and code completion that increase efficiency and help\\nprevent mistakes, but comprehensive test measures are needed for\\nupdates. Our extension performs tests on temporary running in-\\nstances. This allows the framework to check compatibility using\\nthe real scenario.\\n\\nFigure 1: Understandability warning.\\n\\nOur extension introduces two functionalities to test agents\\xe2\\x80\\x99 inte-\\ngration: understandability and usefulness checks. In our market-\\nplace, let us say the buyer\\xe2\\x80\\x99s engineer adds a request to send to the\\nseller agent to achieve the goal sendInvoice. In case the recipient\\ndoes not have any plan to be triggered to achieve such goal, the\\nengineer of the buyer agent is notified by an understandability\\nwarning (Fig. 1). Using the same idea, consider that the buyer agent\\nintends to send a belief to the agent seller informing that the pay-\\nment was made. Beliefs can trigger events and can also be used in\\ndecision-making processes. Let us say, due to a typo, the agent is\\n\\nwrongly sending paidd instead of paid. As the usefulness checking\\nfunction does not find any mention of paidd in the recipient\\xe2\\x80\\x99s plans\\nlibrary, it reports a warning helping the engineer to prevent that\\nerror. In both checking functions, tests are performed while the\\nengineer types without affecting running instances.\\n\\nFigure 2: Notification of concurrent use to prevent data loss.\\n\\nIn addition, our extension provides integrative facilities for pre-\\nventing conflicts when developers attempt to edit a resource si-\\nmultaneously, as shown in Fig. 2, and for managing versions using\\nthe version control system git [2], as illustrated in Fig. 3. This fa-\\ncilitates collaboration, as well as the integration of different MAS\\ninstances, for example to provide separation between a sand-boxed\\ndevelopment instance and the production environment.\\n\\nFigure 3: The commit dialog highlights potential issues.\\n\\nDuring the development of our marketplace, we can see the im-\\nportance of monitoring tools on several levels and from different\\nperspectives. Jacamo-web provides facilities for observing the sys-\\ntem using fragmented views, i.e., from the perspective of each agent.\\nIt is also possible to inspect the current state of an agent\\xe2\\x80\\x99s mind\\nand the current value of an observable property of an artifact or\\nthe state of an organization. Our extension adds live observability,\\ni.e., the interface instantly updates the observable state of agents,\\nartifacts and organizations.\\n\\n3 CONCLUSION\\nWe have presented an extension of jacamo-web that combines its\\noriginal interactive programming approach with collaborative and\\nintegrative tools to promote fast and continuous deployment. Our\\nmarketplace scenario highlights the importance of such facilities in\\nthe development of MAS. To further advance the integration of AOP\\nand collaborative software engineering and DevOps approaches, we\\nsuggest to i) transfer ideas of AOP into existing, production-scale\\nDevOps tooling, ii) further develop Agent DevOps as a software\\nengineering paradigm, and iii) continue with the implementation\\nof collaborative DevOps features in AOP frameworks.\\n\\n\\n\\nREFERENCES\\n[1] Cleber Jorge Amaral and Jomi Fred H\\xc3\\xbcbner. 2019. Jacamo-web is on the fly: an\\n\\ninteractive Multi-Agent System IDE. In 7th International Workshop on Engineer-\\ning Multi-Agent Systems (EMAS 2019). https://cgi.csc.liv.ac.uk/~lad/emas2019/\\naccepted/EMAS2019_paper_8.pdf\\n\\n[2] John D. Blischak, Emily R. Davenport, and Greg Wilson. 2016. A Quick Introduc-\\ntion to Version Control with Git and GitHub. PLOS Computational Biology 12, 1\\n(2016), 1\\xe2\\x80\\x9318. https://doi.org/10.1371/journal.pcbi.1004668\\n\\n[3] Olivier Boissier, Rafael H. Bordini, Jomi F. H\\xc3\\xbcbner, and Alessandro Ricci. 2019.\\nDimensions in programming multi-agent systems. The Knowledge Engineering\\nReview 34 (2019), e2. https://doi.org/10.1017/S026988891800005X\\n\\n[4] Eric A. Brewer. 2015. Kubernetes and the Path to Cloud Native. In Proceedings\\nof the Sixth ACM Symposium on Cloud Computing (SoCC \\xe2\\x80\\x9915). Association for\\nComputing Machinery, New York, NY, USA, 1. https://doi.org/10.1145/2806777.\\n2809955\\n\\n[5] William Choi. 2008. Rehearse: Coding Interactively while Prototyping, In Pro-\\nceedings of the 21th Annual ACM Symposium on User Interface Software and\\nTechnology. Extended Abstracts of UIST \\xe2\\x80\\x9908 8, 1\\xe2\\x80\\x933.\\n\\n[6] Matt Cumberlidge. 2007. Business process management with JBoss jBPM. Packt\\nPublishing Ltd.\\n\\n[7] C. Ebert, G. Gallardo, J. Hernantes, and N. Serrano. 2016. DevOps. IEEE Software\\n33, 3 (2016), 94\\xe2\\x80\\x93100. https://doi.org/10.1109/MS.2016.68\\n\\n[8] Max Goldman, Greg Little, and Robert C. Miller. 2011. Real-Time Collaborative\\nCoding in a Web IDE. In Proceedings of the 24th Annual ACM Symposium on User\\nInterface Software and Technology (UIST \\xe2\\x80\\x9911). Association for Computing Machin-\\nery, New York, NY, USA, 155\\xe2\\x80\\x93164. https://doi.org/10.1145/2047196.2047215\\n\\n[9] Koen V. Hindriks. 2014. The Shaping of the Agent-Oriented Mindset. In Engineer-\\ning Multi-Agent Systems, LNCS, volume 8758, Fabiano Dalpiaz, J\\xc3\\xbcrgen Dix, and\\n\\nM. Birna van Riemsdijk (Eds.). Springer International Publishing, Cham, 1\\xe2\\x80\\x9314.\\n[10] Viviana Mascardi, Danny Weyns, Alessandro Ricci, Clara Benac Earle, Arthur\\n\\nCasals, Moharram Challenger, Amit Chopra, Andrei Ciortea, Louise A. Dennis,\\n\\xc3\\x81lvaro Fern\\xc3\\xa1ndez D\\xc3\\xadaz, Amal El Fallah-Seghrouchni, Angelo Ferrando, Lars-\\n\\xc3\\x85ke Fredlund, Eleonora Giunchiglia, Zahia Guessoum, Akin G\\xc3\\xbcnay, Koen Hin-\\ndriks, Carlos A. Iglesias, Brian Logan, Timotheus Kampik, Geylani Kardas, Vin-\\ncent J. Koeman, John Bruntse Larsen, Simon Mayer, Tasio M\\xc3\\xa9ndez, Tasio M\\xc3\\xa9ndez,\\nJuan Carlos Nieves, Valeria Seidita, Baris Tekin Tezel, L\\xc3\\xa1szl\\xc3\\xb3 Z. Varga, andMichael\\nWinikoff. 2019. Engineering Multi-Agent Systems: State of Affairs and the Road\\nAhead. SIGSOFT Engineering Notes (SEN) (January 2019).\\n\\n[11] T. Savor, M. Douglas, M. Gentili, L. Williams, K. Beck, and M. Stumm. 2016.\\nContinuous Deployment at Facebook and OANDA. In 2016 IEEE/ACM 38th Inter-\\nnational Conference on Software Engineering Companion (ICSE-C). Association\\nfor Computing Machinery, 21\\xe2\\x80\\x9330.\\n\\n[12] Sho-Huan Simon Tung. 1992. Interactive modular programming in Scheme. ACM\\nSIGPLAN Lisp Pointers V, 1 (1992), 86\\xe2\\x80\\x9395. https://doi.org/10.1145/141478.141512\\n\\n[13] Jason Vandeventer and Benjamin Barbour. 2012. CodeWave: A Real-Time,\\nCollaborative IDE for Enhanced Learning in Computer Science. In Proceed-\\nings of the 43rd ACM Technical Symposium on Computer Science Education\\n(SIGCSE \\xe2\\x80\\x9912). Association for Computing Machinery, New York, NY, USA, 75\\xe2\\x80\\x9380.\\nhttps://doi.org/10.1145/2157136.2157160\\n\\n[14] Ge Wang and Perry R Cook. 2004. On-the-fly Programming: Using Code as\\nan Expressive Musical Instrument. NIME \\xe2\\x80\\x9904 Proceedings of the 2004 confer-\\nence on New interfaces for musical Expression (2004). https://doi.org/10.1017/\\nS1092852916000900\\n\\n[15] Makarius Wenzel. 2013. READ-EVAL-PRINT in Parallel and Asynchronous Proof-\\nchecking. Electronic Proceedings in Theoretical Computer Science 118 (2013), 57\\xe2\\x80\\x9371.\\nhttps://doi.org/10.4204/EPTCS.118.4\\n\\nhttps://cgi.csc.liv.ac.uk/~lad/emas2019/accepted/EMAS2019_paper_8.pdf\\nhttps://cgi.csc.liv.ac.uk/~lad/emas2019/accepted/EMAS2019_paper_8.pdf\\nhttps://doi.org/10.1371/journal.pcbi.1004668\\nhttps://doi.org/10.1017/S026988891800005X\\nhttps://doi.org/10.1145/2806777.2809955\\nhttps://doi.org/10.1145/2806777.2809955\\nhttps://doi.org/10.1109/MS.2016.68\\nhttps://doi.org/10.1145/2047196.2047215\\nhttps://doi.org/10.1145/141478.141512\\nhttps://doi.org/10.1145/2157136.2157160\\nhttps://doi.org/10.1017/S1092852916000900\\nhttps://doi.org/10.1017/S1092852916000900\\nhttps://doi.org/10.4204/EPTCS.118.4\\n\\n\\tAbstract\\n\\t1 Introduction\\n\\t2 Real Time Collaborative AOP\\n\\t3 Conclusion\\n\\tReferences\\n\\n'