b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nMulti-agent oriented programming with JaCaMo\\n\\n\\nScience of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nContents lists available at SciVerse ScienceDirect\\n\\nScience of Computer Programming\\n\\njournal homepage: www.elsevier.com/locate/scico\\n\\nMulti-agent oriented programming with JaCaMo\\nOlivier Boissier a,\\xe2\\x88\\x97, Rafael H. Bordini b, Jomi F. H\\xc3\\xbcbner c, Alessandro Ricci d, Andrea Santi d\\na ISCOD/LSTI, Ecole Des Mines 158 Cours Fauriel, 42024 Saint-Etienne Cedex, France\\nb INF-UFRGS, Federal University of Rio Grande do Sul, CP 15064, 91501-970 Porto Alegre RS, Brazil\\nc DAS-UFSC, Federal University of Santa Catarina, CP 476, 88040-900 Florian\\xc3\\xb3polis SC, Brazil\\nd DEIS, Alma Mater Studiorum\\xe2\\x80\\x93Universit\\xc3\\xa0 di Bologna, Via Venezia 52, 47521 Cesena (FC), Italy\\n\\na r t i c l e i n f o\\n\\nArticle history:\\nReceived 7 March 2011\\nReceived in revised form 19 August 2011\\nAccepted 6 October 2011\\nAvailable online 29 October 2011\\n\\nKeywords:\\nMulti-agent oriented programming\\nAutonomous agents\\nShared environments\\nAgent organisations\\n\\na b s t r a c t\\n\\nThis paper brings together agent oriented programming, organisation oriented program-\\nming and environment oriented programming, all of which are programming paradigms\\nthat emerged out of research in the area of multi-agent systems. In putting together a\\nprogramming model and concrete platform called JaCaMo which integrates important\\nresults and technologies in all those research directions, we show in this paper, with the\\ncombined paradigm, that we prefer to call \\xe2\\x80\\x98\\xe2\\x80\\x98multi-agent oriented programming\\xe2\\x80\\x99\\xe2\\x80\\x99, the full\\npotential of multi-agent systems as a programming paradigm. JaCaMo builds upon three\\nexisting platforms: Jason for programming autonomous agents, Moise for programming\\nagent organisations, and CArtAgO for programming shared environments. This paper also\\nincludes a simple example that illustrates the approach and discusses some real-world\\napplications that have been or are being developed with JaCaMo.\\n\\n\\xc2\\xa9 2011 Elsevier B.V. All rights reserved.\\n\\n1. Introduction\\n\\nCurrent trends in computer science are facing up the challenges of building distributed and open software systems\\noperating in dynamic and complex environments, interactingwith and acting on the behalf of humans. In this context,multi-\\nagent technologies can provide concepts and tools that give possible answers to the challenges of practical development of\\nsuch systems by taking into consideration issues such as decentralisation and distribution of control, flexibility, adaptation,\\ntrust, security, and openness.\\n\\nAt least four separate communities within the multi-agent research community have been dealing with specific\\ndimensions of such practical software development, namely the research communities interested in agent oriented\\nprogramming languages [1\\xe2\\x80\\x933], interaction languages and protocols [4], environment architectures, frameworks and\\ninfrastructures [5], and multi-agent organisation management systems [6\\xe2\\x80\\x939]. The results produced by these communities\\nhave clearly demonstrated the importance of each dimension for the development of complex and distributed applications.\\n\\nNevertheless, perhaps a bit surprisingly, currently the engineering of such systems is still hampered by the usage of\\nprogramming approaches and related development platforms that are mainly focused on just one specific dimension, at\\nbest connected in an ad hoc way with the other ones. This means that developers currently have ad hoc programming\\nsolutions for the development of complex multi-agent systems, typically based on low-level implementation mechanisms,\\nwithout suitable high-level abstraction and tools. However the benefits of adopting a comprehensive approach \\xe2\\x80\\x93 integrating\\ndifferent dimensions \\xe2\\x80\\x93 were recognised in the context of AOSE (agent oriented software engineering) and MAS modelling\\ncommunities quite a long time ago [10\\xe2\\x80\\x9312].\\n\\n\\xe2\\x88\\x97 Corresponding author.\\nE-mail addresses: Olivier.Boissier@emse.fr (O. Boissier), r.bordini@inf.ufrgs.br (R.H. Bordini), jomi@das.ufsc.br (J.F. H\\xc3\\xbcbner), a.ricci@unibo.it (A. Ricci),\\n\\na.santi@unibo.it (A. Santi).\\n\\n0167-6423/$ \\xe2\\x80\\x93 see front matter\\xc2\\xa9 2011 Elsevier B.V. All rights reserved.\\ndoi:10.1016/j.scico.2011.10.004\\n\\nhttp://dx.doi.org/10.1016/j.scico.2011.10.004\\nhttp://www.elsevier.com/locate/scico\\nhttp://www.elsevier.com/locate/scico\\nmailto:Olivier.Boissier@emse.fr\\nmailto:r.bordini@inf.ufrgs.br\\nmailto:jomi@das.ufsc.br\\nmailto:a.ricci@unibo.it\\nmailto:a.santi@unibo.it\\nhttp://dx.doi.org/10.1016/j.scico.2011.10.004\\n\\n\\n748 O. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nIn this paper, we aim at bringing such a perspective down to the programming level, investigating a concrete\\nprogramming model and platform that allows a comprehensive integration of three multi-agent programming dimensions,\\nnamely the agent, environment, and organisation levels, preserving a strong separation of concerns but, at the same time,\\nexploiting such dimensions in a synergistic way. To this end, we took as a starting point three existing platforms that have\\nbeendeveloped for yearswithin the context of the research in the separate communitiesmentioned above, namely Jason [13]\\nfor programming agents, CArtAgO [14] for programming environments, and Moise [15] for programming organisations.1\\nThen, beyond a simple technological integration, we analyse how to integrate the related programming (meta-)models so\\nas to come up with an approach that allows programmers to take advantage of such connections in order to simplify the\\ndevelopment of complex systems. The result and main contribution of this paper is the JaCaMo conceptual framework and\\nplatform, which provides high-level first-class support for developing agents, environments, and organisations in synergy.\\n\\nThe remainder of the paper is structured as follows. In Section 2, we provide an account of the basic ideas on agent\\noriented programming and multi-agent oriented programming, including a discussion of related work. Then, in Sections 3\\nand 4, we describe the JaCaMo approach, first presenting the programming (meta-)model on which the framework is based\\n\\xe2\\x80\\x93 highlighting how the agent, environment, and organisation dimensions relate to each other \\xe2\\x80\\x93 and then describing the\\nplatform architecture, along with the support for JaCaMo applications at runtime. To clarify the use of JaCaMo in practice\\nand illustrate some of its features, we present in Section 5 some applications that were developed using our approach.\\nFinally, in Section 6, we provide concluding remarks and some perspectives for future work.\\n\\n2. Agent oriented and multi-agent programming: the state of the art and challenges\\n\\nThe idea of agent oriented programmingwas initiated by Shoham [1] as a newprogramming paradigm combining the use\\nof mentalistic notions (such as belief) for programming (individual) autonomous agents and a societal view of computation.\\nIn the 90\\xe2\\x80\\x99s, most of the work centred on a few languages that had seen significant theoretical work but had limited use in\\npractice, and mostly centred on developing individual agents whether for a multi-agent system context or not. The work in\\nthis area in the 00\\xe2\\x80\\x99s changed this picture substantially by producing many different agent programming languages based on\\nvaried underlying formalisms and inspired by various other programming paradigms. Furthermore, many such languages\\nwere developed into serious programming approaches, with working platforms and development tools. This led to some of\\nthese languages having now growing user bases and being used in many AI and multi-agent systems courses. Rather than\\nreferring to all those languages individually, we point the interested reader to [2,3,16] where many such languages have\\nbeen presented in detail or comprehensive references given.\\n\\nThe important contribution of agent oriented programming as a new paradigm was to provide ways to help\\nprogrammers to develop autonomous systems. For example, agent programming languages typically have high-level\\nprogramming constructs which facilitate (compared to traditional programming languages) the development of systems\\nthat are continuously running and reacting to events that characterise changes in the dynamic environments where such\\nautonomous systems usually operate. It is not only the case that agents need to take on new opportunities or revise planned\\ncourses of action because of changes in the environment; also agent programming facilitates programming agent behaviour\\nthat is not only reactive but also proactive in attempting to achieve long-term goals. The features of agent programming\\nalso make it easier, again compared to other paradigms, for programmers to ensure that the agents behave in a way that\\nin the agent literature is referred to as \\xe2\\x80\\x98\\xe2\\x80\\x98rational\\xe2\\x80\\x99\\xe2\\x80\\x99. For example, if a course of action is taken in order to achieve a particular\\ngoal (typically explicitly represented in the agent state), if the agent realises that the goal has not been achieved we would\\nnot expect the agent not to take further action to achieve that goal on behalf of its human designer unless there is sufficient\\nevidence that the goal can no longer be achieved or is no longer needed.\\n\\nWhile agent oriented programming in some two decades made impressive progress in supporting the programming of\\nthat kind of autonomous behaviour, it still was not able to achieve all that was expected of it in the context of multi-agent\\nsystems. The point is that multi-agent systems are normally used to develop very complex systems, where not only are\\nmany autonomous entities present, but also they need to interact in complex ways and need to have social structures and\\nnorms to regulate the overall social behaviour that is expected of them and, equally important, a shared environment can\\nbe an important and efficient source of coordination means for autonomous agents. Fortunately, while all the technicalities\\nof language constructs that would facilitate the programming of (possibly intelligent) autonomous agents were being dealt\\nwith by some researchers in the autonomous agents andmulti-agent systems research community, other researchers in that\\narea were focusing precisely on the social/interaction and environment aspects of the development of multi-agent systems.\\nInterestingly, as with agent oriented programming (AOP), the other researchers also coined what could appear to be other\\n(separate) programming paradigms: organisation oriented programming (OOP) [17,18], interaction oriented programming\\n(IOP) [19], and environment oriented programming (EOP) [20].\\n\\nWhile they could indeed be independent programming paradigms, it has turned out \\xe2\\x80\\x93 as we show in this paper \\xe2\\x80\\x93 that\\nthe combination of all these dimensions of a multi-agent system into a single programming paradigm with a concrete\\n\\n1 Although we recognise that agent interaction (e.g., communication protocols) is also an important dimension of first-class abstractions, this is not yet\\nincorporated into our platform, but we discuss how this dimension is currently handled and how we plan to address this in future work at the end of this\\npaper.\\n\\n\\n\\nO. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761 749\\n\\nworking platform has had a major impact on the ability to program complex distributed systems for areas of application\\nin highly dynamic contexts where significant autonomy and coordination is required. Of course these are very early days\\nfor a full multi-agent oriented programming (MAOP) paradigm, but even the first small demonstrators that we developed\\nwith this approach, now confirmed with more ambitious applications also discussed in this paper, showed that this has the\\npotential to change completely the way complex (social) autonomous systems will be developed for the future generations\\nof computational systems as envisaged through many of the current trends in computer science. It is in exploiting in clever\\ndesigns and implementations \\xe2\\x80\\x93 with appropriate abstractions and concrete language constructs \\xe2\\x80\\x93 autonomous behaviours,\\nsocial structure, and social and environment interaction, as well as a normative structure that complex systems can be\\ndeveloped and maintained in, in a much more natural way.\\n\\nThis paper discusses the first successful combination of the AOP, OOP, and EOP in a specific programming platform\\ncalled JaCaMo. Clearly, there are many open problems in each of these dimensions, but it is important news that each\\nhas independently developed sufficiently to allow us to put together the JaCaMo platform, as discussed in this paper. For\\nexample, in AOP, modularity [21] and debugging [22] are two examples of aspects that still require significant research to\\nensurewe have the best techniques that we can get. Similarly, in OOP there aremany complex theories regarding both agent\\norganisations and normative systems [23] that are discussed in the literature which it has not yet been possible to address\\nin practical platforms. We expect that advances in those separate areas of research will be integrated into JaCaMo as soon\\nas they are made sufficiently practical in computational terms.\\n\\nRelated work\\n\\nAs mentioned previously, many agent programming languages and platforms have been developed in the last two\\ndecades. Our work is related in particular to those BDI-based platforms that are explicitly oriented towards practical\\ndevelopment and in particular to including explicit support not only for the agent level, but also for the other dimensions\\xe2\\x80\\x94\\nenvironment and organisation in particular. In fact, to the best of our knowledge, JaCaMo is the first approach aimed at\\nexplicitly investigating the integration of all these dimensions from a design and programming point of view: existing\\napproaches consider either only the agent\\xe2\\x80\\x93organisation dimensions or the agent\\xe2\\x80\\x93environment dimensions.\\n\\nA main related work is that on the \\xe2\\x80\\x98\\xe2\\x80\\x98Organization Oriented Programming Language\\xe2\\x80\\x99\\xe2\\x80\\x99 (2OPL) [24], a rule-based language\\nthat allows the programming of multi-agent organisations in terms of norms and which is meant to be exploited in synergy\\nwith agent programming languages \\xe2\\x80\\x94 2APL in particular. So far, the work has been given solid theoretical foundations but\\nlacks a clear description of how the approach integrates with the agent level from a practical programming point of view.\\nBesides, a main difference with respect to JaCaMo concerns the role of the environment. 2APL provides an explicit support\\nfor agents to interact with computational environments realised as Java objects, getting some benefits from the agent\\xe2\\x80\\x93\\nenvironment integration. However, in 2OPL the environment is considered as a mere producer of \\xe2\\x80\\x98\\xe2\\x80\\x98brute facts\\xe2\\x80\\x99\\xe2\\x80\\x99 without any\\nsignificant role in designing/programming the MAS, so no effective integration between the organisation and environment\\ndimensions is considered.\\n\\nAnother important relatedwork is theGolemagent platform [25]which allows the programming of both cognitive agents\\nand computational environments, structured as non-cognitive objects which are organised into \\xe2\\x80\\x98\\xe2\\x80\\x98containers\\xe2\\x80\\x99\\xe2\\x80\\x99. Recent work\\non that approach presented the initial steps for extending the platform with norms to realise norm-governed multi-agent\\nsystems [26]. Other agent programming languages also provide some support for environments and some organisational\\nnotions such as roles, but without including a fully fledged organisational model or first-class environment abstractions.We\\ndo not aim to cover all of that work in this section.\\n\\nThen, our work is clearly related to existing work in the AOSE literature that considers the use of organisation and/or\\nenvironment as dimensions for engineering multi-agent systems. Many contributions have been made in those directions;\\ninterested readers can find comprehensive accounts in [27,28,5,12]. These include in particular work that aims at defining a\\nunifying meta-model for developing MAS, integrating concepts belonging to different dimensions, for example the FAML\\nmeta-model [29]. Generally speaking, work in the AOSE area focuses on modelling aspects, so agent, organisation, and\\nenvironment concepts are used as concepts to drive the analysis and high-level design of multi-agent systems without,\\nhowever, exploring their value from a programming perspective. So in this work, while recognising the importance of having\\nconceptual frameworks and methodologies that make it possible to exploit agent, organisation and environment concepts\\nin order to model MAS, we argue that such concepts can have a key role also at the programming level, in particular in being\\nthen exploited as first-class abstractions in agent oriented programming languages and frameworks.\\n\\nIn this way, we aim at contributing to filling an evident gap that exists between the modelling level and the\\nimplementation level. Typically, MAS meta-models like FAML or the one described in Sterling and Taveter\\xe2\\x80\\x99s book [28] are\\nrather comprehensive, including concepts that are similar or analogous to the ones that will be described in the JaCaMo\\nmeta-model. For instance, the concept of service that appears in [28] and the concept of facet in FAML are strongly related\\nto the notion of artefact which is part of the JaCaMo meta-model. The same applies for the notion of role. However, in\\nSterling and Taveter\\xe2\\x80\\x99s book, for instance, when agent programming platforms and languages are considered for building\\nconcretely a multi-agent system, there is an apparent gap, since the platforms considered (Jason, 2APL, GOAL, Jack, JADE)\\nare able to deal only (or almost only) with the agent level, so high-level organisation and environment concepts cannot\\nbe directly mapped. Also, typically low-level workarounds are used (such as modelling everything as an agent, even\\nenvironment or organisational abstractions). So, we argue that the investigation of platforms like JaCaMo \\xe2\\x80\\x93 providing an\\n\\n\\n\\n750 O. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nFig. 1. Overview of a JaCaMo multi-agent system, highlighting its three dimensions.\\n\\nexplicit programming support for the basic, orthogonal dimensions of MAS, as proposed in the literature \\xe2\\x80\\x93 is important\\nalso from a model-driven engineering perspective, so as to have platform specific models that are rich enough to allow a\\nconsistent mapping of high-level concepts defined at a platform independent level.\\n\\nFinally, this work integrates and extends our previous contributions exploring a unifying perspective in programming\\nagents, organisations, and environments \\xe2\\x80\\x94 namely [9], which introduces the idea of designing an organisational\\nmanagement infrastructure in terms of artefact-based environments, and [30], which focuses particularly on the\\nenvironment\\xe2\\x80\\x93organisation integration introducing the notion of the embodied organisation.\\n\\n3. The JaCaMo approach\\n\\nA JaCaMo multi-agent system (i.e., a software system programmed in JaCaMo) is given by an agent organisation\\nprogrammed in Moise, organising autonomous agents programmed in Jason, working in shared distributed artefact-based\\nenvironments programmed in CArtAgO (see Fig. 1).\\n\\nJason is a platform for the development of multi-agent systems that incorporates an agent oriented programming\\nlanguage. The logic-based BDI-inspired language AgentSpeak, initially conceived by Rao [31], was later much extended\\nin a series of publications by Bordini, H\\xc3\\xbcbner, and colleagues, so as to make it suitable as a practical agent programming\\nlanguage. These extensions led to the variant of AgentSpeak that was made available in Jason [13].\\n\\nCArtAgO [14] is a framework and infrastructure for environment programming [20] and execution in multi-agent\\nsystems. The underlying idea is that the environment can be used as a first-class abstraction for designing MAS, as a\\ncomputational layer encapsulating functionalities and services that agents can explore at runtime [32]. As they are based\\non the A&A meta-model [33], in CArtAgO such software environments can be designed and programmed as a dynamic set\\nof computational entities called artefacts, collected into workspaces, possibly distributed among various nodes of a network.\\n\\nFinally, the Moise framework [15] implements a programming model for the organisational dimension. This approach\\nincludes an organisationmodelling language, an organisationmanagement infrastructure [9], and support for organisation-\\nbased reasoning mechanisms at the agent level [15].\\n\\nSo JaCaMo integrates these three platforms by defining in particular a semantic link among concepts of the different\\nprogramming dimensions \\xe2\\x80\\x93 agent, environment and organisation \\xe2\\x80\\x93 at the meta-model and programming levels, in order\\nto obtain a uniform and consistent programming model aimed at simplifying the combination of those dimensions when\\nprogramming multi-agent systems.\\n\\n3.1. An overview of the JaCaMo programming meta-model\\n\\nFig. 2 shows the integrated programming meta-model of JaCaMo. The abstractions strictly related to each specific\\ndimension are grouped by dashed lines. Being an integrated programming meta-model \\xe2\\x80\\x93 that is, a meta-model focused\\n\\n\\n\\nO. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761 751\\n\\nFig. 2. JaCaMo programming meta-model; for readability, cardinalities are not reported.\\n\\non programming abstractions and constructs \\xe2\\x80\\x93 it does not include concepts or abstractions which are not part of the\\nprogramming languages or frameworks \\xe2\\x80\\x93 for instance, the concept of intentionwhich is part of Jason runtime but not of Jason\\nprogramming language is not included. Besides presenting the main concept of JaCaMo programming, the main objective\\nof this meta-model is to show explicitly the dependences, connections and conceptual mappings between the abstractions\\nbelonging to the different programming dimensions.\\n\\nThe abstractions belonging to the agent dimension, related to the Jason meta-model, are mainly inspired by the BDI\\narchitecture uponwhich Jason is rooted. So an agent is an entity composed of a set of beliefs, representing the agent\\xe2\\x80\\x99s current\\nstate and knowledge about the environment in which it is situated, a set of goals, which correspond to tasks that the agent\\nhas to perform/achieve, and a set of plans which are courses of action, either internal or external, triggered by events, and\\nthat agents can dynamically compose, instantiate and execute to achieve goals. Events can be related to changes either to\\nthe agent\\xe2\\x80\\x99s belief base or to its goals.\\n\\nOn the environment side, on the basis of CArtAgO and the A&A meta-model, each environment instance \\xe2\\x80\\x93 the work\\nenvironment entity in the picture \\xe2\\x80\\x93 is composed of one or moreworkspaces, used to define the topology of the environment.\\nEachworkspace is a logical place containing a dynamic set of artefacts, which are the basic computational bricks defining the\\nenvironment structure and behaviour, representing those resources and tools that agents can create, discover, perceive, and\\nuse at runtime. Each artefact provides a set of operations and observable properties defining an artefact\\xe2\\x80\\x99s usage interface, used\\nby agents to observe and operate on artefacts. Operation execution could generate updates to the observable properties and\\nspecific observable events. The last type of entity at the environment dimension is themanual, an entity used for representing\\nthe description of the functionalities provided by an artefact.\\n\\nFinally, on the organisational side, on the basis of Moise, an organisation is described: (i) from a structural point of view,\\nin terms of group and role entities; (ii) from a functional point of view, in terms of social scheme, mission, and goal entities\\n\\xe2\\x80\\x94 the social scheme decomposes the structure of the organisation\\xe2\\x80\\x99s goals into sub-goals, which are grouped into missions;\\nand (iii) from a normative point of view, in terms of norms which bind roles to missions, constraining an agent\\xe2\\x80\\x99s behaviour\\nas regards sets of goals that it will have to achieve when it chooses to enter a group and play a certain role in it.\\n\\n3.2. Synergy among the JaCaMo programming dimensions\\n\\nIn Fig. 2, the synergies among the three programming dimensions are represented by connections terminating with a\\nsquare (either filled or not). The connections terminating with a filled square are the most important part of our integrated\\nmeta-model as they explicitly represent the synergies and the conceptual mappings that we have identified during the\\ndefinition of our integrated approach: such connections provide for free (i.e., transparently and without extra programming\\neffort) the integration between the different dimensions, an integration that in other approaches must be programmed by\\nusers in an ad hoc manner.\\n\\n\\n\\n752 O. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nThe connection link between the agent and environment (A\\xe2\\x80\\x93E) dimensions is given by semantically mapping agents\\xe2\\x80\\x99\\nexternal actions into artefacts\\xe2\\x80\\x99 operations and artefacts\\xe2\\x80\\x99 observable properties and events into agents\\xe2\\x80\\x99 percepts (leading to\\nbeliefs and triggering events). This means that \\xe2\\x80\\x93 at runtime \\xe2\\x80\\x93 an agent can do an action \\xce\\xb1 if there is (at least) one artefact\\nproviding \\xce\\xb1 as an operation \\xe2\\x80\\x93 if there is more than one such artefact, the agent may contextualise the action explicitly,\\nspecifying the target artefact. On the perception side, the set of observable properties of the artefacts that an agent is\\nobserving are directly represented as (dynamic) beliefs in the agent\\xe2\\x80\\x99s belief base \\xe2\\x80\\x93 so as soon as their values change, new\\npercepts are generated for the agent that are then automatically processed (within the agent reasoning cycle) and the belief\\nbase updated. So in programming an agent it is possible to write down plans that directly react to changes in the observable\\nstate of an artefact or that are selected on the basis of contextual conditions that include the observable state of possibly\\nmultiple artefacts.\\n\\nThis mapping brings significant improvements to the action and percept model provided in general by agent\\nprogramming languages:\\n\\n\\xe2\\x80\\xa2 A dynamic action repertoire \\xe2\\x80\\x94 The repertoire of an agent\\xe2\\x80\\x99s action is dynamic and can be extended/reshaped dynamically\\nby agents themselves by creating/removing artefacts dynamically. This is an improvement with respect to existing agent\\nprogramming languages, where the set of (external) actions available to an agent is given by the set of actuators that are\\nstatically defined for the agent, typically implemented in an ad hoc way.\\n\\n\\xe2\\x80\\xa2 Amore expressive actionmodel\\xe2\\x80\\x94By inheriting the semantics of the operationmodel defined for artefacts, the expressivity\\nof the agent action model is increased in various ways [34]. Typically, actions in agent programming languages are\\nmodelled as atomic events and this tampers with the possibility of modelling concurrent actions (overlapping in\\ntime), which are essential for integrating and exploiting coordination mechanisms and languages \\xe2\\x80\\x94 for instance, for\\nmodelling Linda suspensive primitive in as an action. By mapping actions into operations, actions inherit a process-based\\nsemantics [34], which makes it possible then to model long-term actions, overlapping in time, and then to easily design\\ncoordinating actions, providing some synchronisation capability.\\n\\n\\xe2\\x80\\xa2 A well-defined success/failure semantics \\xe2\\x80\\x94 In some BDI agent programming languages the burden of understanding\\nwhether an action done by an agent succeeded or not rests upon the agent itself (and the agent programmer), through\\nreasoning about the beliefs (percepts). By mapping actions into operations, the actionmodel is extended with an explicit\\nand well-defined notion of success/failure for actions \\xe2\\x80\\x94 an action succeeds if the corresponding operation execution\\non the artefact side completes with success. This in general simplifies agent programming and reduces agent program\\nsize, although agents might still need to reason about beliefs to ensure successful action execution in non-deterministic\\nenvironments.\\n\\nThe connections that terminate with a non-filled square represent a set of predefined actions that agents can perform and\\nwhich are mapped into operations in a set of predefined artefacts available in each JaCaMo application. These actions refer\\nto the basic functionalities provided by the overall infrastructure, including the environment and organisation dimensions.\\nThis makes it possible in particular to avoid the introduction of ad hoc specific mechanisms for exploiting infrastructure\\nservices concerning organisation and coordination, for instance to adopt a role or to interactwith a tuple space. Furthermore,\\nsince artefacts can be created and disposed of dynamically, this makes it possible (also for agents) to update and adapt the\\ninfrastructure itself at runtime.\\n\\nThis idea was explored in order to effectively connect the organisation and the environment dimensions (O\\xe2\\x80\\x93E), in\\nparticular by uniformly designing the organisational infrastructure as part of the (artefact-based) environment in which\\nagents are situated [9]. In such an approach, the different concrete computational entities aimed at managing, outside\\nthe agents, the current state of the organisation in terms of groups, social schemes, and normative state are reified in the\\nenvironment bymeans of organisational artefacts, encapsulating and enacting the organisation behaviour as described by the\\norganisation specifications. From an agent point of view, such organisational artefacts provide those actions that can be used\\nto proactively take part in an organisation (for example, to adopt and leave particular roles, to commit to missions, to signal\\nto the organisation that some social goal has been achieved, etc.), and provide specific observable properties dynamically\\nto make the state of an organisation perceivable along with its evolution. Besides, they provide actions that can be used by\\norganisational agents to manage the organisation itself. The specific concrete organisational artefact types introduced in the\\nJaCaMo programming model will be briefly described in the next section.\\n\\nOverall, the O\\xe2\\x80\\x93E mapping provides some important outcomes which are important from a design and programming\\nperspective:\\n\\n\\xe2\\x80\\xa2 uniformity \\xe2\\x80\\x94 the same action and perception model is used also to enable the interaction between agents and the\\norganisation, without the need for introducing specific ad hoc primitives and mechanisms concerning the organisation;\\n\\n\\xe2\\x80\\xa2 distribution \\xe2\\x80\\x94 the organisation management infrastructure is distributed, in terms of collections of (interconnected)\\nartefacts possibly belonging to different workspaces running on distinct network nodes;\\n\\n\\xe2\\x80\\xa2 dynamism \\xe2\\x80\\x94 organisational agents can change dynamically the shape of an organisation by acting on the set of\\norganisational artefacts used by the agents to interact;\\n\\n\\xe2\\x80\\xa2 heterogeneity\\xe2\\x80\\x94 theO\\xe2\\x80\\x93Emapping also opens theway for scenarios inwhich heterogeneous agents \\xe2\\x80\\x93 belonging to different\\nplatforms and programmed in different languages \\xe2\\x80\\x93 could easily take part in a JaCaMo organisation, as soon as they have\\nbeen equipped with the capability of working within artefact-based environments;\\n\\n\\n\\nO. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761 753\\n\\nFig. 3. The JaCaMo platform runtime, with the predefined set of artefacts available in all JaCaMo applications.\\n\\n\\xe2\\x80\\xa2 high-level reorganising capabilities \\xe2\\x80\\x93 the Moise-based specifications of the organisation themselves are part of the\\ninformation made observable by organisational artefacts to agents, and this means that there is the potential for agents\\nthat understand the Moise specification formats to reason about the organisations in which they partake and therefore\\nto change them at runtime; this allows for complex on-the-fly restructuring of computational systems to be done at a\\nvery high level.\\n\\nFinally, as part of the agent and organisation (A\\xe2\\x80\\x93O) mapping, goals defined at the organisation dimension (those goals\\nthat are to be achieved by the organisation, i.e., the overall system) are mapped into individual agent goals (see Fig. 2),\\nwhich agents may decide to adopt or not. This delegation of goals from the organisation to the agents is expressed by\\nobligations. The state of goals from the organisation dimension (which agents should fulfil them and when) is maintained\\nby an organisational artefact and is displayed as obligations for the agents (e.g., agent a is obliged to fulfil goal x in one\\nweek). An obligation is fulfilled when the corresponding goal is achieved by the agent before the deadline. At the agent side,\\nwhen such an obligation is perceived, and the agent chooses to adopt it, a corresponding (individual) agent goal is created.\\nIt should be noted that, besides being free to adopt or not the goals from the organisation, the agent is also free to decide\\nwhich courses of action should be used to achieve each goal, and that in turn might mean adopting further individual goals.\\nAs we can see, themapping of goals prescribed by the organisation into agent individual goals is under the complete control\\nof the agent\\xe2\\x80\\x99s decision making process (so as to preserve its autonomy).\\n\\n4. The impact on multi-agent system programming: the JaCaMo programming model and platform\\n\\nA main objective of the integration of the dimensions described in Section 3 is to simplify the programming model\\nadopted in the development of complex multi-agent systems. Accordingly, in this section we concretely describe the\\nimpact of the dimension integration on programming, by using a toy example called Building-a-House \\xe2\\x80\\x93 included with the\\nJaCaMo distribution available on the JaCaMowebsite [35] \\xe2\\x80\\x93 which is simple yet effective in showing the integration of the\\ndimensions at the programming level.\\n\\nBefore focusing on the example and on the programmingmodel, firstwe give a brief overview of the structure of a general\\nJaCaMo application at runtime andof the supporting JaCaMo infrastructure. The overall picture of runtime support provided\\nby JaCaMo is shown in Fig. 3. A JaCaMo (distributed) application runs on top of possibly multiple JaCaMo infrastructure\\nnodes. At the platform (infrastructure) level, each infrastructure node integrates the Jason, CArtAgO, and Moise platforms\\n\\n\\n\\n754 O. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nas well as the required interfacing technology, running on top of a Java Virtual Machine which itself makes transparent the\\naccess to all resources of the operating system.\\n\\nThen, at the execution level, a JaCaMo application is represented by an organisation composed by one or multiple\\nworkspaces, running on JaCaMo nodes. Agents running on a JaCaMo node can join and work concurrently in multiple\\nworkspaces, including remote ones (i.e., workspaces not hosted by the same node as they are executing at). Among\\nthe artefacts that populate a JaCaMo workspace, a fundamental role is played by those encapsulating infrastructural\\nfunctionalities related to the agent, environment, and organisation management. They represent a direct reification of the\\nconcepts defined in the meta-model (the conceptual level in the figure). These include artefacts used to manage/inspect the\\nstructure of the environment itself \\xe2\\x80\\x93WorkspaceArtifact andNodeArtifact, providing functionalities for managing/inspecting\\nrespectively the set of artefacts inside aworkspace and the set ofworkspaces inside the environment \\xe2\\x80\\x93 aswell as organisation\\nartefacts, introduced in the previous section.\\n\\nIn particular, the basic organisational artefact types adopted in a JaCaMo application include:\\n\\n\\xe2\\x80\\xa2 OrgBoard artefacts, used to keep track of the current state of deployment of the organisational entities overall (one\\ninstance for each organisation);\\n\\n\\xe2\\x80\\xa2 GroupBoard artefacts, used tomanage the life-cycle of specific groups of agents; for instance, if an agent chooses to adopt\\na role in a particular group, it will perform the adoptRole operation (action) on theGroupBoard artefact representing the\\ngroup;\\n\\n\\xe2\\x80\\xa2 SchemeBoard artefacts, used to support andmanage the execution of social schemes; as an example, an agent can commit\\nto a mission or tell the organisation that it has achieved one of the social goals that it was assigned to in a particular\\nmission by executing actions such as commitMissions and setGoalAchieved on the specific SchemeBoard representing\\nthe scheme.\\n\\nBesides the actions, organisational artefacts have specific observable properties for making the dynamic state of an\\norganisation observable. For example, the GroupBoard artefact has an observable property concerning the available roles\\nin a group; therefore agents can find out which are the existing roles and then reason about them so as to autonomously\\ndecide whether to adopt a role or not.\\n\\nFrom a computational behaviour point of view, organisational artefacts encapsulate and enact the organisational\\nbehaviour specified in Moise. To this end, a specific language called NOPL (\\xe2\\x80\\x98\\xe2\\x80\\x98Normative Organisation Programming\\nLanguage\\xe2\\x80\\x99\\xe2\\x80\\x99) is adopted as a target language into which Moise specifications are translated [36]. So organisational artefacts\\nembed a NOPL interpreter to provide the organisational infrastructure needed to manage a Moise organisation at runtime.\\n\\nAs a final remark, the set of organisational artefacts of the same organisation are connected together by means of the\\nlinkability features provided by CArtAgO [14], to execute operations among artefacts. This is necessary, \\xe2\\x80\\x98\\xe2\\x80\\x98under the hood\\xe2\\x80\\x99\\xe2\\x80\\x99,\\nto keep consistent the overall state of an organisation infrastructure that is distributed over various separate artefacts. Such\\ndistribution of JaCaMo artefacts application over multiple workspaces and network nodes are essential for scaling with\\norganisation and application complexity.\\n\\n4.1. The Building-a-House example\\n\\nThe example concerns a multi-agent system representing the inter-organisational workflow (IOW) involved in the\\nconstruction of a house. An agent called Giacomo owns a plot and wants to build a house on it. In order to achieve this\\noverall goal, first Giacomo will have to hire various specialised companies (the contracting phase), and then ensure that the\\ncontractors coordinate and execute the various tasks required to build the house (the building phase). For each company,\\nthere is a company agent \\xe2\\x80\\x93 possibly running on a different network node \\xe2\\x80\\x93 participating in the contracting phase and then,\\npossibly, in the building one.\\n\\nIn this simple example, the organisation is composed of a single workspace called HouseBuildingWsp. Giacomo is\\nresponsible for creating and setting up the workspace, creating also the artefacts that will be used to interact with company\\nagents. It is worth remarking that in larger applications \\xe2\\x80\\x93 like the ones described in Section 5 \\xe2\\x80\\x93multiple workspaces possibly\\ndistributed on multiple nodes are often used, implementing then a distributed environment and organisation.\\n\\n4.1.1. The contracting stage: agent\\xe2\\x80\\x93environment programming\\nIn the contracting phase the objective for Giacomo is to hire one company (the one that offers the cheapest service) for\\n\\neach of the several tasks involved in building the house, such as site preparation, laying floors, building walls, building the\\nroof, etc. The same company can be hired formore than one task, if they havemore than one speciality and offer the cheapest\\nservice in more than one of the required tasks. An auction-basedmechanism is used byGiacomo to select the best company\\nfrom among the available ones for each of the tasks; one auction is run concurrently for each of the tasks. The auction starts\\nwith the maximum price that Giacomo can pay for a given task, and companies that can do that kind of task may offer a\\nprice lower than the current bid. After a given deadline (unknown to bidders), Giacomo clears the auctions and selects the\\ncontractors for building its house on the basis of the lowest bid at the time when the auction closed.\\n\\nTo exemplify the agent\\xe2\\x80\\x93environment programming in JaCaMo, auctions are here realised by means of an artefact\\nproviding auction functionalities. There will be one instance of such an artefact (created by Giacomo) for each of the\\n\\n\\n\\nO. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761 755\\n\\npublic class AuctionArt extends Artifact {\\n\\nvoid init(String taskDs, int maxValue) {\\ndefineObsProperty(\"task\", taskDs);\\ndefineObsProperty(\"maxValue\", maxValue);\\ndefineObsProperty(\"currentBid\", maxValue);\\n\\ndefineObsProperty(\"currentWinner\", \"no_winner\");\\n}\\n\\n@OPERATION void bid(double bidValue) {\\nObsProperty cb = getObsProperty(\"currentBid\");\\n\\nObsProperty cw = getObsProperty(\"currentWinner\");\\nif (bidValue < cb.intValue()) {\\n\\ncb.updateValue(bidValue);\\ncw.updateValue(getOpUserName());\\n\\n} else {\\nfailed(\"invalid_bid\");\\n\\n}\\n}\\n\\n}\\n\\n!discover_art(\"auction_for_SitePreparation\").\\n\\nmy_price(1500).\\n\\ni_am_winning(Art) :-\\n.my_name(Me) &\\n\\ncurrentWinner(Me)[artifact_id(Art)].\\n\\n+currentBid(V)[artifact_id(Art)] :\\nnot i_am_winning(Art) & my_price(P) & P < V\\n<- bid(math.max(V-150,P))[artifact_id(Art)].\\n\\n+!discover_art(ToolName)\\n<- joinWorkspace(\"HouseBuildingWsp\");\\n\\nlookupArtifact(ToolName,ToolId);\\nfocus(ToolId).\\n\\n+!contract(\"SitePreparation\",GroupBoardId)\\n<- adoptRole(site_prep_contractor)\\n\\nfocus(GroupBoardId).\\n\\n+!site_prepared\\n<- ... // actions to prepare the site..\\n\\nFig. 4. Left: source code of the auction artefact. Right: source code of a company agent.\\n\\nhouse-building tasks, concurrently used by Giacomo and the company agents. The left-hand side of Fig. 4 shows the source\\ncode of the auction artefact implemented using the CArtAgO API, and its right-hand side shows an excerpt of a company\\nagent, implemented in Jason, that uses an instance of that artefact. In fact, we will not discuss here all the details of the\\nimplementation \\xe2\\x80\\x93 the interested reader can refer to papers describing in detail the Jason and CArtAgO programmingmodels\\n\\xe2\\x80\\x93 but just provide what is necessary for understanding the example and the benefits of the dimension integration from a\\nprogramming point of view.\\n\\nAuction artefacts have only abid operation \\xe2\\x80\\x93used by company agents to submit a newbid \\xe2\\x80\\x93 and there are four observable\\nproperties: the task name (task), themaximumvalue that the agent that created the auction is willing to pay for the service\\n(maxValue), the current lowest bid (currentBid), and the agent that placed that bid (currentWinner). The bidding\\noperation \\xe2\\x80\\x93 which is seen on the agent side as a bid action \\xe2\\x80\\x93 simply updates the current bid and winner if a better bid is\\nsubmitted, or it fails if the bid is higher than the current one.\\n\\nOn the agent side, the company agent has the initial goal !discover_art(\"auction_for_SitePreparation\") of\\ndiscovering the auction for preparing the site2. To achieve this goal, the agent has a plan3 triggered by a \\xe2\\x80\\x98\\xe2\\x80\\x98new goal to achieve\\xe2\\x80\\x99\\xe2\\x80\\x99\\nevent+!discover_art(ToolName). In that plan, the agent first joins theworkspace, retrieves the unique identifier of the\\nartefact with the specified name (lookupArtifact action), and then uses it to start observing the artefact by executing\\nthe focus predefined action. By that being done, the artefact\\xe2\\x80\\x99s observable properties are automatically mapped into the\\nagent\\xe2\\x80\\x99s belief base (as seen in Fig. 2). Changes in the belief base produce events that can be handled by plans. In this specific\\ncase, the company agent has a plan for reacting to changes in the currentBid (the one with +currentBid(V) triggering\\nevent) placing a new bid (bid action execution in the plan body4) if the agent is not the current winner5 and also the current\\nbid is higher than the minimum price that this agent can offer (stored as the initial belief price(1500)6).\\n\\n4.1.2. The building stage: incorporating the organisation dimension\\nAfter the companies have been hired, in the building phase the contractors have to execute their own tasks on time and\\n\\nin coordination with each other. Some tasks depend on other tasks being completed first, while some tasks can be done\\nin parallel with some others, as represented by the following workflow (where \\xe2\\x80\\x98;\\xe2\\x80\\x99 is used for sequence and \\xe2\\x80\\x98|\\xe2\\x80\\x99 for parallel\\ncomposition):\\n\\na ; b ; c ; (d | e | f) ; (g | h | i) ; j\\n\\n2 Initial goals in Jason are represented by an exclamation mark followed by a first-order logic literal representing the goal to be achieved, specified at\\nthe beginning of the source code.\\n3 Agent plans in Jason are described by rules of the type event : context <- body, where event represents the events that can trigger the\\n\\nexecution of the plan, the plan context is a logical expression mainly involving current beliefs, indicating the conditions under which the plan can\\nbe selected for execution, and the plan body specifies a sequence of actions to perform and sub-goals to achieve when the plan is executed.\\n4 The annotation [artifact_id(Art)] that appears next to a plan triggering event related to belief updates (e.g., +currentBid(V)) and to action\\n\\nexecution (e.g., bid) is used in general to explicitly retrieve or specify information about the artefact which is the context of the observable property or\\nthe operation. This is necessary when multiple artefacts with the same observable properties and operations are used concurrently (as in this case).\\n5 i_am_winning(Art) is a Prolog-like rule which is specified initially as part of the belief base of the agent. The conclusion of the rule is true if the\\n\\ncurrent value of the currentWinner belief (acquired by the agent through an observable property) coincides with the agent\\xe2\\x80\\x99s name (retrieved through\\nthe Jason internal action .myName).\\n6 Initial beliefs are represented by Prolog-like facts, specified at the beginning of the agent program.\\n\\n\\n\\n756 O. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nFig. 5. The structural specification (left), functional specification (right), and normative specification (bottom).\\n\\n!have_a_house. // initial goal\\n\\n+!have_a_house // plan to achieve the have_a_house goal\\n<- !contract;\\n\\n!execute.\\n\\n+!contract <- ... // plan to manage the first stage (auction)\\n\\n+!execute // create the artifact to manage the group\\n<- makeArtifact(\"hsh_group\",\"GroupBoard\", [\"src/house-os.xml\", \\\\ldots ], GrArtId);\\n\\nadoptRole(house_owner)[artifact_id(GrArtId)];\\n!contract_winners(\"hsh_group\");\\n...\\n\\n+!contract_winners(GroupBoard)\\n<- for ( currentWinner(Ag)[artifact_id(ArtId)] ) {\\n\\n?task(Task)[artifact_id(ArtId)];\\n.send(Ag, achieve, contract(Task,GroupBoard))\\n\\n}.\\nFig. 6. Source code excerpt from the Giacomo agent.\\n\\nAt this stage, the organisation dimension is used to help the coordination and the monitoring of the companies that will\\nbuild the house. Companies that won the auction will join the organisation playing specific roles and, by doing so, become\\nresponsible for some goals in the overall process of building the house. The roles and goals of this organisation are specified\\nin Fig. 5 using the Moise notation.7\\n\\nThe structural specification defines a group (house group) where company agents will play the sub-role of the\\nbuilding company and theGiacomo agent plays the role of the house owner. The functional specification decomposes\\nthe organisation goals into sub-goals, defines the sequence in which each will be achieved, and gives a time-to-fulfil\\n(TTF) for each sub-goal. These goals are assigned to roles by norms as defined in the table that appears at the bottom of\\nFig. 5. For instance, norm n3 states that whenever an agent adopts the role bricklayer, it is obliged to achieve goals\\nfloors laid and walls built. Of course, this obligation is active only when the preceding goals have already been\\nachieved (site prepared, in this example).\\n\\nOnce the auctions are finished, Giacomo adopts the role house owner in the group and asks the auction winners\\nto adopt the corresponding roles. The code excerpt in Fig. 6 illustrates how these steps are programmed. Giacomo has\\nthe initial !have_a_house goal and a plan to handle it, by instantiating two sub-goals \\xe2\\x80\\x93 !contract and execute,\\ncorresponding to the contracting stage and the building stage \\xe2\\x80\\x93 that are achieved sequentially. As soon as the !contract\\ngoal is achieved, which means that the auctions are concluded, the plan managing the building stage is executed, in which a\\nGroupBoard called thehsh_group artefact is created (specifying someparameters, including theMoise specification inXML),\\n\\n7 Moise specifications are richer than presented here; they were simplified in this paper to keep the focus on the main aspects.\\n\\n\\n\\nO. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761 757\\n\\nthe house_owner role is adopted by executing an adoptRole action and then a sub-goal is instantiated to contract winners.\\nIn the plan handling that sub-goal, the agent asks (by means of an achieve message sent by the execution of the .send\\ncommunicative action) to all the company agents that won the auctions to sign the contract and finally adopt the role\\ncorresponding to the specific task. The required information for all that is made available as observable properties of the\\nauction artefacts.\\n\\nWhen the company agents receive the request sent by Giacomo, they adopt the roles by acting on the group artefact.\\nGoing back to the source code of the company agent (Fig. 4), this is done by the \\xe2\\x80\\x98\\xe2\\x80\\x98+!contract(\"SitePreparation\",\\nGroupBoardId) <- ...\\xe2\\x80\\x99\\xe2\\x80\\x99 plan. The group artefact ensures that the specified organisation constraints are satisfied at all\\ntimes.\\n\\nThe main purpose of the scheme artefact is to keep track of which goals are ready to be pursued (those whose preceding\\ngoals in the functional specification have already been achieved) and create obligations for the agents accordingly. Initially,\\nonly the site prepared goal can be pursued, and thus only the obligation obligation(companyB, achieved(s1,\\nsite_prepared), \"4/1/2011\") is created, where companyB is the agent playing the role site prep contractor,\\ns1 is the identification of the scheme instance, and 4/1/2011 is a week after the start of the building work. Such obligations\\nare observed by the agents and corresponding goals are automatically created.8 In the example, the goal !site_prepared\\nis created within the companyB agent, which can then react by executing a plan of the form !+site_prepared <- ...\\n(see Fig. 4). As soon as other goals become ready to be pursued, new obligations are created and the agents can then work\\ntowards the goals at the right moment. In the case of parallel goals, several obligations are created and the agents will work\\nin parallel, as expected from the specification.\\n\\nAmain advantage of this approach is that by simply changing the scheme specification (which can be done by the designer\\nor by the agents themselves) at a very high level, say to change the order or the dependences among goals, we will change\\nthe overall behaviour of the agent team without changing a single line of their code. We can see the scheme specification\\nas the program for the social coordination and the scheme artefact as its interpreter. This artefact also manages the state of\\nthe obligations, checking, for instance, their fulfilment or violations. This feature is very useful for Giacomo who wants to\\nmonitor the execution of the scheme to ensure that the house is built correctly and on time.\\n\\n4.2. Remarks\\n\\nFroman implementation point of view, in our approachwe are able tomaintain separation of concerns\\xe2\\x80\\x94aspects related to\\nagents, organisations, environments are specified and programmed using specific separate abstractions and corresponding\\nlanguage constructs. This contributes to multi-agent systems development in terms of modularity, reusability, readability,\\nextensibility, and software maintenance.\\n\\nFurthermore, the semantic mappings facilitate the integrated use of all those concepts, as a uniform and consistent\\nprogramming model. This also helps avoid common errors in coding that programmers often make when developing agent\\napplications by implementing agents and environment/organisation separately.\\n\\nEven if it is not possible, for many reasons, to provide an exact quantitative evaluation, we argue that the approach\\nsimplifies MAS programming, andmakes it possible to have cleaner and typically shorter programs. This is possible because\\nof the reasoning/interpreting/monitoring engines/infrastructures that are available in the three platforms incorporated into\\nJaCaMo and the interfacings among themwhich also make automatic many things that programmers would normally have\\nto worry about themselves (such as the perception of properties as regards the environment, and the mapping of agent\\nactions to environment operations, to name just a few).\\n\\n5. Using JaCaMo for real-world applications\\n\\nIn order to assess the applicability, advantages, and limitations of the approach, JaCaMo is being used in various projects\\nthat involve the development of real-world agent-based applications. In this section we provide a brief overview of some\\nselected applications. The interested readers can find at the JaCaMoweb site [35] an up-to-date list of the applications, each\\none described in detail. All these projects share some elements of complexity (distribution, openness, dynamism, need of\\nflexibility, autonomy) which make it possible to effectively stress test JaCaMo\\xe2\\x80\\x99s different programming dimensions and the\\nusefulness of the integration.\\n\\n5.1. Engineering smart co-working spaces\\n\\nThe first project concerns room management in smart co-working spaces (e.g., a school, an office); initial results can be\\nfound in [37]. The rooms provide facilities and services as typically found in ambient intelligence smart room contexts (see\\ne.g. [38]), relating to light and temperature management, for instance. Besides, people can book and use rooms according\\n\\n8 This is done \\xe2\\x80\\x98\\xe2\\x80\\x98under the hood\\xe2\\x80\\x99\\xe2\\x80\\x99 by predefined plans from a library made available with JaCaMo. This library facilitates the programming of (specially\\nnorm-abiding) agents and in this application we provided such plans to every agent.\\n\\n\\n\\n758 O. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nFig. 7. Architecture of the JaCaMo application for the governance of room allocation in a smart co-working space.\\n\\nto their needs and to the current and scheduled occupancy. The aim is to develop an autonomous and adaptive room\\nmanagement system that: (i) considers the events that are currently being held (e.g., regulating the room temperature in\\naccordance with the number of participants, automatically turning off the lights for teaching events involving a projector);\\nand also (ii) allows the (re)allocation of the rooms according to the user requests. Such a control software system required for\\nthe management of the scenario presented must be distributed and highly adaptable to cope with the inherent distribution\\nof resources and rooms together with the highly dynamic nature of the activities in such spaces. Given the importance\\nof situatedness and autonomy in this application, it must also be connected to the physical world by several sensors and\\nactuators.\\n\\nFig. 7 provides an overview of a JaCaMo solution to the problem, focusing on the environment and organisational\\ndimensions. Organisation programming is exploited here to specify and manage the overall management strategy of the\\nsystem, involving different roles (from individual room managers to schedulers), their coordination, and in particular the\\nhandling of reorganisation processes required in such dynamic contexts. The artefact-based distributed environment is\\nexploited to model and interface with the physical devices in the rooms (lights, temperature controllers, etc.), and to model\\nand represent high-level shared data structureswith related operations (such as registers keeping track of roomparticipants\\nand schedules), besides typical coordination artefacts (such as blackboards). Agents obviously encapsulate the control and\\ndecision making part of the application, in this case related to monitoring and controlling facilities in rooms as well as\\ndeciding the strategies to use for dynamic room allocation.\\n\\n5.2. An agent-based machine-to-machine management infrastructure\\n\\nThis project concerns the realisation of an agile governance application for a machine-to-machine (M2M) management\\ninfrastructure. M2M refers to technologies allowing the realisation of automated and advanced services and applications\\n(e.g., smart metering, traffic redirection, and parking management) that make great use of smart devices (sensors and\\nactuators of different kinds, possibly connected through a wireless sensor and actuator network (WSAN)) communicating\\nwithout human interventions. In this context, the Senscity9 FUI project proposes an infrastructure for enabling the\\ndeployment of city-scale M2M applications that share a common set of devices and network services. Implementing such\\nan infrastructure raises the problem of providing an agile governance with suitable scalability in different dimensions. In\\nfact, it is hardly possible to define all of the requirements of M2M due to its heterogeneity and openness. For this purpose,\\nin collaboration with Orange Labs and based on the communication and IT infrastructure proposed in the Senscity Project, a\\nJaCaMo-based governance application has been developed in order to study how to properly adapt and evolve the Senscity\\ninfrastructurewithout experiencing scalability issues [39]. The governance infrastructure is evaluated using a smart parking\\nmanagement scenario, in which an M2M system monitors the parking occupation in order to reduce traffic and to guide\\ndrivers through the streets.\\n\\n9 http://www.senscity-grenoble.com/.\\n\\nhttp://www.senscity-grenoble.com/\\nhttp://www.senscity-grenoble.com/\\nhttp://www.senscity-grenoble.com/\\nhttp://www.senscity-grenoble.com/\\n\\n\\nO. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761 759\\n\\nFig. 8. Abstract architecture of the JaCaMo-based application for the Senscity M2M infrastructure.\\n\\nThe governance application developed in JaCaMo (see Fig. 8) is designed in terms of an organisation that provides to\\nthe agents a global strategy for managing and coordinating the functioning of the whole system, distributed among several\\nworkspaces. A workspace is used for each WSAN area group, in which an agent playing a gateway role collects data sent\\nfrom all the agents playing a device management role, which manage and control M2M devices (sensors, actuators) through\\nartefacts. A dynamic pool of agents playing a platform manager role regulate the functioning of each M2M infrastructural\\nnode in accordance with the current workloads experienced by the M2M infrastructure. This is achieved by cleverly using\\na set of dedicated artefacts that provide features such as transaction management for both sensor readings and complex\\nactuator commands, and the possibility of enabling/disabling the interfacing of applications to the managed WSAN.\\n\\nIn the context of the smart parking scenario considered, the governance application allows the adaptation of the M2M\\ninfrastructure in several situations: (i) steep increase/decrease in requests coming from the different applications, (ii)\\nchanges in the topology of WSAN covered by applications (e.g. moving the area to monitor for the urban planning service\\nfrom district scale to city scale), and (iii) integration of new client applications (e.g. smart parking integrated with a multi-\\nmodal transportation system). This is done by dynamically adapting the role cardinalities in the organisation specification,\\nthus changing the size of the pools of agents playing roles in the organisation. Changes in the physical structure of the\\nWASNmanaged by the M2M infrastructure are handled by dynamically deploying (destroying) a workspace for eachWASN\\nintroduced (removed) and then registering adequately the new information in the governance infrastructure.\\n\\nThere is also an application in the area of ontology-based knowledge management for knowledge-intensive workflows\\nin business processes. An existing application in that area which involves natural language processing and various AI\\ntechniques has been revamped using JaCaMo, leading to a clearer software architecture and increased potential for\\nextending the system towards greater autonomy and adaptability. For the sake of space, we do not discuss this application\\nin detail here; it has been described in [40].\\n\\n6. Concluding remarks: current limitations and future work\\n\\nThe agent-based development of complex distributed systems requires design and programming tools that provide first-\\nclass abstractions along the main levels or dimensions that characterise multi-agent systems. To this end, in this paper we\\ndescribed a comprehensive approach for multi-agent oriented programming that integrates the agent, environment, and\\norganisation levels, providing a programming model that aims at integrating in an effective and synergistic way related\\nabstraction dimensions. To investigate the idea in practice, we introduced the JaCaMo platform, which integrates and\\nextends existing approaches and accompanying technologies, namely Jason (agent dimension), CArtAgO (environment\\ndimension) andMoise (organisation dimension). Thewhole approachwas illustrated by a case study and some applications\\nreported in this paper.\\n\\nFuture work falls into three main directions. First, we aim to investigate also interaction as a main dimension\\nto be integrated synergistically with other ones. Currently, that dimension is handled through (i) the ad hoc direct\\ncommunication support based on speech acts provided by Jason, and (ii) the mediated communication support based on\\ncommunication and coordination artefacts [41] provided by CArtAgO. Besides this view, it is interesting to explore the\\nuse of environment abstractions also, to make direct communication support more flexible. For instance, by introducing\\nappropriate personal communication artefacts, we can provide the agent with functionalities for communicating using\\ndifferent agent communication languages and managing complex conversations and ontologies. Second, it is possible\\nto further explore the O\\xe2\\x80\\x93E (organisation\\xe2\\x80\\x93environment) connection in order to implement more advanced institution\\nmechanisms such as the count-as relation [42], thus making it possible to provide, generally speaking, a direct semantic link\\n\\n\\n\\n760 O. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761\\n\\nbetween the execution of actions (operations) on environment artefacts and their meaning and effect at the organisational\\nlevel. Initial investigations in that direction can be found in [30]. Last, we aim at providing an integrated development\\nenvironment that would facilitate the process of design, development, and execution of JaCaMo applications, potentially\\nreusing and integrating existing Jason, CArtAgO, and Moise tools and technologies.\\n\\nAcknowledgements\\n\\nPart of this work was funded by the CMIRA Programme of the Rhone-Alpes Region. Support was also given by CNPq\\n(grants 307924/2009-2, 307350/2009-6, 478780/2009-5).\\n\\nReferences\\n\\n[1] Y. Shoham, Agent-oriented programming, Artif. Intell. 60 (1) (1993) 51\\xe2\\x80\\x9392.\\n[2] R.H. Bordini, M. Dastani, J. Dix, A.E. Fallah-Seghrouchni (Eds.), Multi-Agent Programming: Languages, Platforms and Applications Vol. I, Springer, 2005.\\n[3] R.H. Bordini, M. Dastani, J. Dix, A.E. Fallah-Seghrouchni (Eds.), Multi-Agent Programming: Languages, Tools and Applications Vol. II, Springer, 2009.\\n[4] M.P. Singh, Agent communication languages: rethinking the principles, Computer 31 (12) (1998) 40\\xe2\\x80\\x9347.\\n[5] D. Weyns, H.V.D. Parunak (Eds.), Environments for Multi-Agent Systems, in: Autonomous Agents and Multi-Agent Systems, vol. 14 (1), Springer,\\n\\nNetherlands, 2007 (special issue).\\n[6] O. Gutknecht, J. Ferber, Themadkit agent platform architecture, in: Revised Papers from the Int. Workshop on Infrastructure for Multi-Agent Systems:\\n\\nInfrastructure for Agents, Multi-Agent Systems, and Scalable Multi-Agent Systems, Springer-Verlag, London, UK, 2001, pp. 48\\xe2\\x80\\x9355.\\n[7] D.V. Pynadath, M. Tambe, An automated teamwork infrastructure for heterogeneous software agents and humans, Autonomous Agents and Multi-\\n\\nAgent Systems 7 (1\\xe2\\x80\\x932) (2003) 71\\xe2\\x80\\x93100.\\n[8] M. Esteva, J.A. Rodr\\xc3\\xadguez-Aguilar, B. Rosell, J.L. Arcos, AMELI: an agent-based middleware for electronic institutions, in: Prog. of the 3rd Int. Joint Conf.\\n\\non Autonomous Agents and Multi-Agent Systems, AAMAS\\xe2\\x80\\x992004, ACM, New York, 2004, pp. 236\\xe2\\x80\\x93243.\\n[9] J.F. H\\xc3\\xbcbner, O. Boissier, R. Kitio, A. Ricci, Instrumenting multi-agent organisations with organisational artifacts and agents, Autonomous Agents and\\n\\nMulti-Agent Systems 20 (2010) 369\\xe2\\x80\\x93400.\\n[10] J. Ferber, O. Gutknecht, Ameta-model for the analysis and design of organizations inmulti-agents systems, in: Proc. of the 3rd Int. Conf. onMulti-Agent\\n\\nSystems, ICMAS\\xe2\\x80\\x9998, IEEE Press, 1998, pp. 128\\xe2\\x80\\x93135.\\n[11] Y. Demazeau, From interactions to collective behaviour in agent-based systems, in: Proc. of the 1st European Conf. on Cognitive Science, Saint-Malo,\\n\\n1995, pp. 117\\xe2\\x80\\x93132.\\n[12] T. Stratulat, J. Ferber, J. Tranier, MASQ: towards an integral approach to interaction, in: AAMAS, 2009, pp. 813\\xe2\\x80\\x93820.\\n[13] R.H. Bordini, J.F. H\\xc3\\xbcbner, M. Wooldridge, Programming Multi-Agent Systems in AgentSpeak Using Jason, in: Wiley Series in Agent Technology, John\\n\\nWiley & Sons, 2007.\\n[14] A. Ricci, M. Piunti, M. Viroli, A. Omicini, Environment programming in CArtAgO, in: Bordini et al. [3].\\n[15] J.F. H\\xc3\\xbcbner, J.S. Sichman, O. Boissier, Developing organised multi-agent systems using the MOISE+ model: programming issues at the system and\\n\\nagent levels, Agent-Oriented Software Engineering 1 (3\\xe2\\x80\\x934) (2007) 370\\xe2\\x80\\x93395.\\n[16] M. Fisher, R.H. Bordini, B. Hirsch, P. Torroni, Computational logics and agents: a road map of current technologies and future trends, Computational\\n\\nIntelligence 23 (1) (2007) 61\\xe2\\x80\\x9391.\\n[17] O. Boissier, J.F. H\\xc3\\xbcbner, J.S. Sichman, Organization oriented programming: from closed to open organizations, in: G. O\\xe2\\x80\\x99Hare, O. Dikenelli, A. Ricci (Eds.),\\n\\nEngineering Societies in the Agents World VII, ESAW 06, in: LNCS, vol. 4457, Springer, Berlin, Heidelberg, 2007, pp. 86\\xe2\\x80\\x93105.\\n[18] D.V. Pynadath, M. Tambe, N. Chauvat, L. Cavedon, Toward team-oriented programming, in: N.R. Jennings, Y. Lesp\\xc3\\xa9rance (Eds.), ATAL, in: LNCS,\\n\\nvol. 1757, Springer, 1999, pp. 233\\xe2\\x80\\x93247.\\n[19] M.N. Huhns, Interaction-oriented programming, in: First International Workshop, AOSE 2000 on Agent-Oriented Software Engineering, Springer-\\n\\nVerlag New York, Inc., Secaucus, NJ, USA, 2001, pp. 29\\xe2\\x80\\x9344.\\n[20] A. Ricci, M. Piunti, M. Viroli, Environment programming in multi-agent systems: an artifact-based perspective, Autonomous Agents and Multi-Agent\\n\\nSystems 23 (2011) 158\\xe2\\x80\\x93192.\\n[21] M.B. van Riemsdijk, M. Dastani, J.-J.C. Meyer, F.S. de Boer, Goal-oriented modularity in agent programming, in: Proc. of the 5th Int. Joint Conf. on\\n\\nAutonomous Agents and Multiagent systems, AAMAS\\xe2\\x80\\x9906, ACM, New York, USA, 2006, pp. 1271\\xe2\\x80\\x931278.\\n[22] D. Poutakidis, L. Padgham,M.Winikoff, An exploration of bugs and debugging inmulti-agent systems, in: N. Zhong, Z.W. Ras, S. Tsumoto Suzuki (Eds.),\\n\\nISMIS, in: Lecture Notes in Computer Science, vol. 2871, Springer, 2003, pp. 628\\xe2\\x80\\x93632.\\n[23] G. Boella, L. Torre, H. Verhagen, Introduction to the special issue on normative multiagent systems, Autonomous Agents and Multi-Agent Systems 17\\n\\n(1) (2008) 1\\xe2\\x80\\x9310.\\n[24] M. Dastani, D. Grossi, J.-J. Meyer, N. Tinnemeier, Normative multi-agent programs and their logics, in: KRAMAS-08, Proc., 2008.\\n[25] S. Bromuri, K. Stathis, in: D. Weyns, S. Brueckner, Y. Demazeau (Eds.), Engineering Environment-Mediated Multi-Agent Systems, in: LNCS, vol. 5049,\\n\\nSpringer, Berlin, Heidelberg, 2008, pp. 115\\xe2\\x80\\x93134.\\n[26] V. Urovi, S. Bromuri, K. Stathis, A. Artikis, Initial steps towards run-time support for norm-governed systems, in: Coordination, Organizations,\\n\\nInstitutions, and Norms in Agent Systems VI, in: Lecture Notes in Computer Science, vol. 6541, Springer, 2010, pp. 268\\xe2\\x80\\x93284.\\n[27] V. Sichman, in: J. Dignum (Ed.), Agent Organizations; Models, Architectures and Applications, Springer, 2010.\\n[28] L. Sterling, K. Taveter, The Art of Agent-Oriented Modeling, The MIT Press, 2009.\\n[29] G. Beydoun, G. Low, B. Henderson-Sellers, H.Mouratidis, J.J. Gomez-Sanz, J. Pavon, C. Gonzalez-Perez, Faml: a genericmetamodel formas development,\\n\\nIEEE Transactions on Software Engineering 35 (2009) 841\\xe2\\x80\\x93863.\\n[30] M. Piunti, A. Ricci, O. Boissier, J. H\\xc3\\xbcbner, Embodying organisations inmulti-agentwork environments, in: IEEE/WIC/ACM Int. Conf. onWeb Intelligence\\n\\nand Intelligent Agent Technology, WI-IAT 2009, Milan, Italy, 2009.\\n[31] A.S. Rao, AgentSpeak(L): BDI agents speak out in a logical computable language, in: W.V. de Velde, J.W. Perram (Eds.), MAAMAW, in: LNCS, vol. 1038,\\n\\nSpringer, 1996, pp. 42\\xe2\\x80\\x9355.\\n[32] D. Weyns, A. Omicini, J.J. Odell, Environment as a first-class abstraction in multi-agent systems, Autonomous Agents and Multi-Agent Systems 14 (1)\\n\\n(2007) 5\\xe2\\x80\\x9330.\\n[33] A. Omicini, A. Ricci, M. Viroli, Artifacts in the A&A meta-model for multi-agent systems, Autonomous Agents and Multi-Agent Systems 17 (3) (2008)\\n\\n432\\xe2\\x80\\x93456.\\n[34] A. Ricci, A. Santi, M. Piunti, Action and perception in multi-agent programming languages: from exogenous to endogenous environments, in: Proc. of\\n\\nProgramming Multi-Agent Systems, ProMAS-\\xe2\\x80\\x9910, 2010.\\n[35] JaCaMo project web site \\xe2\\x80\\x93 http://jacamo.sourceforge.net/, last retrieved: August 15th 2011.\\n[36] J.F. H\\xc3\\xbcbner, O. Boissier, R.H. Bordini, From organisation specification to normative programming in multi-agent organisations, in: CLIMA XI, 2010,\\n\\npp. 117\\xe2\\x80\\x93134.\\n[37] A. Sorici, Agile governance in an AmI environment, Master\\xe2\\x80\\x99s Thesis, University \\xe2\\x80\\x98\\xe2\\x80\\x98Politehnica\\xe2\\x80\\x99\\xe2\\x80\\x99 of Bucharest (September 2011).\\n\\nhttp://jacamo.sourceforge.net/\\n\\n\\nO. Boissier et al. / Science of Computer Programming 78 (2013) 747\\xe2\\x80\\x93761 761\\n\\n[38] A. Kameas, Towards the next generation of ambient intelligent environments, in: Enabling Technologies: Infrastructures for Collaborative Enterprises,\\nWETICE, 2010 19th IEEE Int. Workshop on, 2010, pp. 1\\xe2\\x80\\x936.\\n\\n[39] C. Persson, G. Picard, F. Ramparany, A multi-agent organization for the governance of machine-to-machine systems, in: IEEE/WIC/ACM Int. Conf. on\\nIntelligent Agent Technology, IAT\\xe2\\x80\\x9911, IEEE Computer Society, 2011.\\n\\n[40] C.M. Toledo, R.H. Bordini, O. Chiotti, M.R. Galli, Developing a knowledge management multi-agent system using the jacamo platform, in: Proc. of\\nProMAS 2011, held with AAMAS-2011, 2011.\\n\\n[41] A. Omicini, A. Ricci, M. Viroli, C. Castelfranchi, L. Tummolini, Coordination artifacts: Environment-based coordination for intelligent agents, in: Proc.\\nof the 3rd Int. Joint Conf. on Autonomous Agents and Multi-Agent Systems, AAMAS\\xe2\\x80\\x9904, Vol. 1, ACM, New York, USA, 2004, pp. 286\\xe2\\x80\\x93293.\\n\\n[42] J.R. Searle, The Construction of Social Reality, Free Press, 1997.\\n\\n\\n\\tMulti-agent oriented programming with JaCaMo\\n\\tIntroduction\\n\\tAgent oriented and multi-agent programming: the state of the art and challenges\\n\\tThe JaCaMo approach\\n\\tAn overview of the JaCaMo programming meta-model\\n\\tSynergy among the JaCaMo programming dimensions\\n\\n\\tThe impact on multi-agent system programming: the JaCaMo programming model and platform\\n\\tThe Building-a-House example\\n\\tThe contracting stage: agent--environment programming\\n\\tThe building stage: incorporating the organisation dimension\\n\\n\\tRemarks\\n\\n\\tUsing JaCaMo for real-world applications\\n\\tEngineering smart co-working spaces\\n\\tAn agent-based machine-to-machine management infrastructure\\n\\n\\tConcluding remarks: current limitations and future work\\n\\tAcknowledgements\\n\\tReferences\\n\\n\\n'