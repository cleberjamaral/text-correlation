b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nJS-son - A Minimal JavaScript BDI Agent Library\\n\\nTimotheus Kampik and\\nJuan Carlos Nieves\\n\\nUmea\\xcc\\x8a University, 901 87, Umea\\xcc\\x8a, Sweden\\n{tkampik,jcnieves}@cs.umu.se\\n\\nAbstract. There is a multitude of agent-oriented software engineering frame-\\nworks available, most of them produced by the academic multi-agent systems\\ncommunity. However, these frameworks often impose programming paradigms\\non their users that are hard to learn for engineers who are used to modern high-\\nlevel programming languages such as JavaScript and Python. To show how the\\nadoption of agent-oriented programming by the software engineering mainstream\\ncan be facilitated, we provide an early, simplistic JavaScript library prototype for\\nimplementing belief-desire-intention (BDI) agents. The library focuses on the\\ncore BDI concepts and refrains from imposing further restrictions on the pro-\\ngramming approach. To illustrate its usefulness, we demonstrate how the library\\ncan be used for multi-agent systems simulations on the web, as well as embedded\\nin Python-based data science tools.\\n\\nKeywords: Reactive Agents \\xc2\\xb7 Belief-Desire-Intention \\xc2\\xb7Multi-agent Systems.\\n\\n1 Motivation\\n\\nA multitude of multi-agent system (MAS) frameworks has been developed [2] by the\\nscientific community. However, these frameworks are rarely applied outside of academia,\\nlikely because they require the adoption of design paradigms that are fundamentally\\ndifferent from industry practices and do not integrate well with modern software engi-\\nneering toolchains. A recent expert report on the status quo and future of engineering\\nmulti-agent systems1 concludes that \\xe2\\x80\\x9c[m]any frameworks that are frequently used by\\nthe MAS community\\xe2\\x80\\x93for example Jason and JaCaMo\\xe2\\x80\\x93have not widely been adopted in\\npractice and are dependent on technologies that are losing traction in the industry\\xe2\\x80\\x9d [4].\\nAnother comprehensive assessment of the current state of agent-oriented software engi-\\nneering and its implications on future research directions is provided in Logan\\xe2\\x80\\x99s Agent\\nProgramming Manifesto [3]. Both the Manifesto and the EMAS report recommend de-\\nveloping agent programming languages that are easier to use (as one of several ways\\nto facilitate the impact of multi-agent systems research). The EMAS report highlights,\\nin particular, the need to provide libraries that better integrate with technologies and\\nprogramming paradigms that are relevant in the industry and points to the success this\\napproach has in the machine learning community.\\n\\nIn this demonstration, we take a first step towards addressing the aforementioned\\nrecommendations. We follow a pragmatic and minimalistic approach: instead of creat-\\ning a comprehensive multi-agent systems framework, we create JS-son, a light-weight\\n\\n1 The report was assembled as a result of the EMAS 2018 workshop.\\n\\nlouisedennis\\nPlaced Image\\n\\n\\n\\n2 T. Kampik and J.C. Nieves\\n\\nlibrary that can be applied in the context of existing industry technology stacks and\\ntoolchains and requires little additional, MAS-specific knowledge.\\n\\nDesign Approach\\n\\nProgramming languages like Lisp and Haskell are rarely used in practice but have in-\\nfluenced the adoption of (functional) features in mainstream languages like JavaScript\\nand C#. It is not uncommon that an intermediate adoption step is enabled by external\\nlibraries. For example, before JavaScript\\xe2\\x80\\x99s array.prototype.includes functor\\nwas adopted as part of the ECMA Script standard2, a similar functor (contains and\\nits aliases include / includes) could already be imported with the external library\\nunderscore3. Analogously, JS-son takes the belief-desire-intention (BDI) [5] archi-\\ntecture as popularized in the MAS community by frameworks like Jason [1] (as the\\nname JS-son reflects) and provides an abstraction of the BDI architecture as a plug and\\nplay dependency for a widely adopted programming language.\\n\\n2 Library Description\\n\\nThe library provides object types for creating agent and environment objects, as well as\\nfunctions for generating agent beliefs, desires, intentions, and plans 4.\\nThe agent realizes the BDI concepts as follows:\\n\\nBeliefs: A belief can be any JSON object or JSON data type (string, number, array,\\nboolean, or null).\\n\\nDesires: Desires are generated dynamically by agent-specific desire functions that have\\na desire identifier assigned to them and determine the value of the desire based on\\nthe agent\\xe2\\x80\\x99s current beliefs.\\n\\nIntentions: A preference function filters desires and returns intentions - an array\\nof JSON objects.\\n\\nPlans: The plan\\xe2\\x80\\x99s head specifies which intention needs to be active for the plan to be\\npursued. The body specifies how the plan should update the agent\\xe2\\x80\\x99s beliefs and\\ndetermines the actions the agent should issue to the environment.\\n\\nAlso, each agent has a next() function to run the following process:\\n\\n1. It applies the belief update as provided by the environment (see below).\\n2. It applies the agent\\xe2\\x80\\x99s preference function that dynamically updates the intentions\\n\\nbased on the new beliefs; i.e., the agent is open-minded.\\n3. It runs the plans that are active according to the updated intentions, while also\\n\\nupdating the agent beliefs (if specified in the plans).\\n\\n2 https://www.ecma-international.org/ecma-262/7.0/#sec-array.\\nprototype.includes\\n\\n3 https://underscorejs.org/#contains\\n4 The library\\xe2\\x80\\x93including detailed documentation, examples, and tests\\xe2\\x80\\x93is available at https:\\n//github.com/TimKam/JS-son.\\n\\nhttps://www.ecma-international.org/ecma-262/7.0/#sec-array.prototype.includes\\nhttps://www.ecma-international.org/ecma-262/7.0/#sec-array.prototype.includes\\nhttps://underscorejs.org/#contains\\nhttps://github.com/TimKam/JS-son\\nhttps://github.com/TimKam/JS-son\\n\\n\\nJS-son - A Minimal JavaScript BDI Agent Library 3\\n\\n4. It issues action requests that result from the plans to the environment.\\n\\nAlternatively, it is possible to implement simpler belief-plan agents; i.e., as a plan\\xe2\\x80\\x99s\\nhead, one can define a function that determines\\xe2\\x80\\x93based on the agent\\xe2\\x80\\x99s current beliefs\\xe2\\x80\\x93if\\na plan should be executed.\\n\\nThe environment contains the agents, as well as a definition of its own state. It executes\\nthe following instructions in a loop:\\n\\n1. It runs each agent\\xe2\\x80\\x99s next() function.\\n2. Once the agent\\xe2\\x80\\x99s action request has been received, the environment processes the\\n\\nrequest. To determine which update requests should, in fact, be applied to the envi-\\nronment state, the environment runs the request through a filter function.\\n\\n3. When an agent\\xe2\\x80\\x99s actions are processed, the environment updates its own state and\\nthe beliefs of all agents accordingly. Another filter function determines how a spe-\\ncific agent should \\xe2\\x80\\x9cperceive\\xe2\\x80\\x9d the environment\\xe2\\x80\\x99s state.\\n\\n3 Potential Use Cases\\n\\nWe suggest that JS-son can be applied in the following use cases:\\n\\nData science. With the increasing relevance of large-scale and semi-automated statis-\\ntical analysis (\\xe2\\x80\\x9cdata science\\xe2\\x80\\x9d) in industry and academia, a new set of technologies\\nhas emerged that focuses on pragmatic and flexible usage and treats traditional pro-\\ngramming paradigms as second-class citizens. JS-son integrates well with Python-\\nand Jupyter notebook5-based data science tools, as shown in Demonstration 1.\\n\\nWeb development. Web front ends implement functionality of growing complexity;\\noften, large parts of the application are implemented by (browser-based) clients.\\nAs shown in Demonstration 2, JS-son allows embedding BDI agents in single-page\\nweb applications, using the tools and paradigms of web development.\\n\\nEducation. Programming courses are increasingly relevant for educating students who\\nlack a computer science background. Such courses are typically taught in high-\\nlevel languages that enable students to write working code without knowing all\\nunderlying concepts. In this context, JS-son can be used as a tool for teaching MAS\\nprogramming.\\n\\nInternet-of-Things (IoT) Frameworks like Node.js6 enable the rapid development of\\nIoT applications, as a large ecosystem of libraries leaves the application developer\\nlargely in the role of a system integrator. JS-son is available as a Node.js package.\\n\\n4 Demonstrations\\n\\nWe provide two demonstrations that show how JS-son can be applied.\\n\\n5 https://jupyter.org/.\\n6 https://nodejs.org/\\n\\nhttps://jupyter.org/\\n\\n\\n4 T. Kampik and J.C. Nieves\\n\\nJS-son meets Jupyter. The first demonstration shows how JS-son can be integrated\\nwith data science tools, i.e., Python libraries and Jupyter notebooks7. As a simple proof-\\nof-concept example, we simulate opinion spread in an agent society and run an interac-\\ntive data visualization.\\n\\nJS-son on the Web The second demonstration presents a JS-son port of Conway\\xe2\\x80\\x99s\\nGame of Life. It illustrates how JS-son can be used as part of a web frontend8. The\\ndemonstration makes use of JS-son\\xe2\\x80\\x99s simplified belief-plan approach.\\n\\n5 Limitations and Future Work\\n\\nThis demonstration paper presents an early stage library prototype that provides min-\\nimalistic abstractions for implementing BDI agents. We concede that the prototype\\nprovides\\xe2\\x80\\x93so far\\xe2\\x80\\x93merely minimally viable abstractions to instantiate agents. To increase\\nthe library\\xe2\\x80\\x99s relevance for researchers, teachers, and practitioners alike, we propose the\\nfollowing work:\\n\\nExtend library interface. It makes sense to enable JS-son agents and environments to\\nact in distributed systems and communicate with agents of other types, without re-\\nquiring extensive customization by the library user. A possible way to achieve this\\nis supporting the open standard agent communication language FIPA ACL9. How-\\never, as highlighted in a previous publication, FIPA ACL does not support commu-\\nnication approaches that have emerged as best practices for real-time distributed\\nsystems like publish-subscribe. To facilitate JS-son\\xe2\\x80\\x99s reasoning abilities, interfaces\\nto machine learning tools and best practices for developing learning JS-son agents\\ncan be developed.\\n\\nMove towards real-world usage. In this demonstration paper, we provide two proof-\\nof-concept examples of JS-son agents. To demonstrate the feasibility of JS-son, it\\nis necessary to apply the library in advanced scenarios. Considering the relatively\\nsmall technical overhead JS-son agents imply, the entry hurdle for a development\\nteam to adopt JS-son is low, which might facilitate early real-world adoption.\\n\\nImplement a Python port. While JS-son can be integrated with the Python ecosys-\\ntems, for example via Jupyter notebooks, doing so implies technical overhead and\\nrequires knowledge of two programming languages. To facilitate the use of BDI\\nagents in a data science and machine learning context, we propose the implemen-\\ntation of Py son, a Python port of JS-son.\\n\\nAcknowledgements This work was partially supported by the Wallenberg AI, Au-\\ntonomous Systems and Software Program (WASP) funded by the Knut and Alice Wal-\\nlenberg Foundation.\\n\\n7 The Jupyter notebook is available on GitHub at http://s.cs.umu.se/lmfd69 and on\\na Jupyter notebook service platform at http://s.cs.umu.se/girizr.\\n\\n8 The simulation is available at http://s.cs.umu.se/chfbk2.\\n9 http://www.fipa.org/specs/fipa00061/index.html\\n\\nhttp://s.cs.umu.se/lmfd69\\nhttp://s.cs.umu.se/girizr\\nhttp://s.cs.umu.se/chfbk2\\nhttp://www.fipa.org/specs/fipa00061/index.html\\n\\n\\nJS-son - A Minimal JavaScript BDI Agent Library 5\\n\\nReferences\\n\\n1. Bordini, R.H., Hu\\xcc\\x88bner, J.F., Wooldridge, M.: Programming Multi-Agent Systems in AgentS-\\npeak Using Jason (Wiley Series in Agent Technology). John Wiley & Sons, Inc., USA (2007)\\n\\n2. Kravari, K., Bassiliades, N.: A survey of agent platforms. Journal of Artificial Societies and\\nSocial Simulation 18(1), 11 (2015)\\n\\n3. Logan, B.: An agent programming manifesto. International Journal of Agent-Oriented Soft-\\nware Engineering 6(2), 187\\xe2\\x80\\x93210 (2018)\\n\\n4. Mascardi, V., Weyns, D., Ricci, A., Earle, C.B., Casals, A., Challenger, M., Chopra, A.,\\nCiortea, A., Dennis, L.A., D\\xc4\\xb1\\xcc\\x81az, A\\xcc\\x81.F., Fallah-Seghrouchni, A.E., Ferrando, A., Fredlund, L.A\\xcc\\x8a.,\\nGiunchiglia, E., Guessoum, Z., Gu\\xcc\\x88nay, A., Hindriks, K., Iglesias, C.A., Logan, B., Kampik,\\nT., Kardas, G., Koeman, V.J., Larsen, J.B., Mayer, S., Me\\xcc\\x81ndez, T., Me\\xcc\\x81ndez, T., Nieves, J.C.,\\nSeidita, V., Tezel, B.T., Varga, L.Z., Winikoff, M.: Engineering Multi-Agent Systems: State\\nof Affairs and the Road Ahead. SIGSOFT Engineering Notes (SEN) (January 2019)\\n\\n5. Rao, A.S., Georgeff, M.P.: Modeling rational agents within a BDI-architecture. In: Allen, J.,\\nFikes, R., Sandewall, E. (eds.) Proceedings of the 2nd International Conference on Principles\\nof Knowledge Representation and Reasoning. pp. 473\\xe2\\x80\\x93484. Morgan Kaufmann publishers\\nInc.: San Mateo, CA, USA (1991)\\n\\n\\n\\tJS-son - A Minimal JavaScript BDI Agent Library\\n\\n'