b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nUsing MATSim as a Component in Dynamic\\nAgent-Based Micro-Simulations\\n\\nDhirendra Singh1 and Lin Padgham1 Kai Nagel2\\n\\n1 RMIT University, Melbourne, Australia\\n{dhirendra.singh,lin.padgham}@rmit.edu.au\\n\\n2 Technical University, Berlin, Germany kai.nagel@tu-berlin.de\\n\\nAbstract. This paper discusses use of the widely used transport simu-\\nlator, MATSim, as one component in a large complex agent based mi-\\ncrosimulation where dynamic changes in the environment require the\\nagents to be reactive as well as goal directed. We describe a number\\nof refinements to MATSim that have been made to facilitate its use\\nwithin our deployed wildfire evacuation applications, as well as some\\ntools that have been developed which complement MATSim. All code is\\nfreely available under open source licenses. As applications increasingly\\nrequire complex microsimulations, with many aspects, it is important to\\nuse existing software where possible. However most simulation systems,\\nlike MATSim, have been developed as standalone systems. We identify\\nways that MATSim has needed to be extended or modified in order for\\nit to be used as a component in a larger whole. The paper provides de-\\ntails that will be useful for anyone wanting to use MATSim within their\\nspecific application.\\n\\nKeywords: MATSim \\xc2\\xb7 Belief-Desire-Intention \\xc2\\xb7 BDI \\xc2\\xb7Agent-Based Sim-\\nulation\\n\\n1 Introduction\\n\\nThis paper focusses on the use of the widely used MATSim (Multi-Agent Trans-\\nport Simulation) [9] traffic simulator as a component in large scale agent based\\nmicro-simulations, where, as is increasingly relevant, it is often important to\\nmake use of detailed real world data (e.g. [6, 17]. We use examples and moti-\\nvations from deployed applications in the emergency evacuation domain. The\\nspecific contributions are extensions to MATSim and some additional tools for\\nuse with MATSim. The specific aspects are: the ability to control MATSim ex-\\nternally, making it suitable for inclusion as a component; a standardised API to\\nedit MATSim plans, routes and trips; a mechanism for dynamically controlling\\nrouting in a variety of ways; population initialisation support; and a discussion\\nof principles for designing the BDI component of the agent and its interaction\\nwith the MATSim component. The unifying aspect of these contributions was\\ntheir need in a family of applications in the evacuation domain, although they\\nare also more widely applicable. One of these evacuation planning applications\\ncan be viewed at tiny.cc/bushfire-sim. The others are not publicly available.\\n\\nlouisedennis\\nPlaced Image\\n\\n\\n\\n2 D. Singh et al.\\n\\nOriginally MATSim was developed for finding traffic equilibrium as individ-\\nual agents adapt their travel behaviour to a specified transport infrastructure,\\nbased on their individual activity patterns. The system is initialised with a set of\\nagents, having various attributes, each having an \\xe2\\x80\\x9cactivity plan\\xe2\\x80\\x9d which specifies\\nthe location and duration of various activities throughout the day. The system\\nthen determines the best route between activities at suitable times, embellishing\\nthe plans with specific detailed routes for each trip.3 The execution simply steps\\nthrough these plans. If as a result of congestion or other issues travel between\\ndestinations takes a longer or shorter time than expected, this is recorded and\\nplans are scored accordingly. At the end of each one day simulation plans are\\nreviewed and some poorly rated ones are modified using genetic algorithm style\\ntechniques, until eventually after some number of iterations a stable state is\\nreached. This approach is very successful for assessing the impact of proposed\\nnew infrastructure in a city or area where there is data concerning the current\\nbehaviours. However it is not suitable for applications where decisions need to\\nbe made reactively, based directly on a dynamic situation. Two examples of\\nsuch situations are evacuation simulations and simulations involving taxis which\\nmust respond to the evolving environment. In recent years there has been a focus\\non modifying the \\xe2\\x80\\x9cMobsim\\xe2\\x80\\x9d component of MATSim to accommodate this using\\nwhat is called \\xe2\\x80\\x9cwithin-day replanning\\xe2\\x80\\x9d or \\xe2\\x80\\x9cen-route replanning\\xe2\\x80\\x9d [8, 4]. It is this\\naspect of MATSim which is considered in the current paper, considering only a\\nsingle iteration of the agents over some time period\\n\\nThe BDI-MATSim system [11] is one approach to supporting the ability of\\nMATSim agents to be reactive to a dynamic situation. It builds on the infras-\\ntructure developed for integrating any existing cognitive system (as long as it\\nrelies on percepts and actions) with any agent-based model that fills certain re-\\nquirements [16]. The integration facilitates \\xe2\\x80\\x9cwithin-day replanning\\xe2\\x80\\x9d in MATSim\\nby allowing agents to proactively make decisions to change their original plan,\\ndepending on both environmental situations and agent goals. Conceptually, the\\n\\xe2\\x80\\x9cbrain\\xe2\\x80\\x9d of a MATSim agent is modelled in the BDI system (as a BDI agent)\\nwhile the \\xe2\\x80\\x9cbody\\xe2\\x80\\x9d remains inside MATSim. The communication between these\\nagent counterparts is defined based on standard agent concepts, percepts and\\nactions. A MATSim agent sends percepts to the BDI counterpart, which con-\\nducts high-level reasoning and issues a (BDI) action for the MATSim agent to\\nexecute. Percepts from the MATSim counterpart agent can be either information\\nabout its own state (e.g. location), or an observation from the MATSim envi-\\nronment. Basically, a BDI action modifies the travel plan of a MATSim agent\\nusing low-level MATSim functions. MATSim controls the simulation, integrating\\nthe event-based BDI system, by passing control to it at the end of one or more\\nMATSim time step(s). Control is returned when reasoning about actions for the\\nnext step concludes. The evacuation applications which have motivated and used\\n\\n3 A plan encompasses activities, trips which contain the (possibly multi-modal) move-\\nment between activities, and routes which are the detailed road/path segments to\\nbe traversed by a vehicle/person.\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 3\\n\\nthe extensions and tools described in this paper have all used the BDI-MATSim\\nsystem.\\n\\n2 MATSim as a component\\n\\nIn developing large and complex simulations it is essential to be able to incor-\\nporate components which are themselves large and complex pieces of software.\\nThese must all work together \\xe2\\x80\\x93 and preferably continue to work together as\\ncomponents are further modified and developed.\\n\\nWe use the architecture shown in Figure 1 where a controller pauses and\\ncontinues the execution of components as well as providing a mechanism for\\ndata sharing. This is conceptually similar to the HLA [7] standard, although,\\nunlike HLA, multiple models can represent aspects of the same conceptual agents\\nat the same time, as long as aspects are managed to ensure consistency, as they\\nare in the BDI-ABM integrated framework described in [16].\\n\\nPhoenix\\nFire Model\\n\\nDisruption\\nModel\\n\\nMessaging\\nModel\\n\\nMATSim\\nModel\\n\\nDiffusion\\nModel\\n\\nJill BDI\\nModel\\n\\nData & Time\\nControl\\n\\nFig. 1: Architecture of component based simulation\\n\\nIf there is a producer consumer relationship with respect to data produced\\nand used within the same simulation time step, then the controller must sequence\\nthe component executions appropriately. The model cannot deal with circular\\nrelationships between components within a single timestep, only with pipeline\\nrelationships. The issues of shared resource management as handled by frame-\\nworks like OpenSim [15] that were built for integrating existing models do not\\napply here. Our framework supports models that run on different size timesteps\\nas well as variable time steps such as discrete event models. Data exchange is\\nbased on a publish/subcribe scheme whereby a model is called on one of two\\nevents: to handle incoming data from other models that it is subscribed to, or\\nto publish its own data at a frequency (fixed or variable) under its full control.\\n\\n\\n\\n4 D. Singh et al.\\n\\nFigure 2 shows in more detail the MATSim and BDI components of figure\\n1, showing the original MATSim modules, the pre-existing extensions which we\\nbuild on, and the new additions that are described in this paper.\\n\\nFig. 2: Details of Architecture\\n\\nFor MATSim to operate as a component within this framework, rather than\\nas a standalone application, it is necessary to allow stopping and starting from\\nan external controller (unlike [11] where all control was with MATSim), as well\\nas options for MATSim to receive and provide data. To support additional func-\\ntionality likely to be needed for new applications it is also desirable to have a\\nprincipled API providing access to internal MATSim functionality.\\n\\n2.1 External control of MATSim steps\\n\\nA new facility called PlayPauseSimulationControl provides a doStep(time)\\nfunction to continue the MATSim simulation forward up until time and return.\\nThis new play/pause API also ensures that the simulation clock of the controller\\nis not tied to MATSim\\xe2\\x80\\x99s simulation clock.\\n\\nAlgorithm 1 shows the high level simulation loop where MATSim is a com-\\nponent. Each model is first initialised (line 1), and registers with the central\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 5\\n\\ncontroller of Figure 1 all data types it wishes to publish or subscribe to (line\\n2). We do this upfront, but models are free to register types also during the\\nsimulation conditional on some event. Then on every simulation loop iteration\\n(line 3), the BDI model is called first (line 4) followed by MATSim so that new\\nor dropped BDI actions passed via container dataBDI are handled by MATSim\\nimmediately in the same time step (line 7). BDI actions status\\xe2\\x80\\x99 and percepts\\ncoming back from MATSim in datABM are handled by the BDI model in the\\nnext iteration of the loop. Other models are called as needed (line 8) and the\\nentire simulation terminates (lines 5\\xe2\\x80\\x936) when MATSim itself reaches the end of\\nits own simulation.\\n\\nResult: Simulation completed\\n1 // initialise all models\\n\\n2 // register ordered models with controller\\n\\n3 while true do\\n// invoke BDI model with incoming data from ABM\\n\\n4 controller.publish(BDI CONTROL, dataABM);\\n5 if MATSim has reached end of simulation then\\n6 break; // exit the loop\\n\\n// invoke MATSim with incoming data from BDI\\n\\n7 controller.publish(ABM CONTROL, dataBDI);\\n// progress time & advance other models\\n\\n8 controller.stepTime();\\n\\n9 // terminate all models\\n\\nAlgorithm 1: Simulation loop for MATSim as a component\\n\\nData flow between models happens in several places in the simulation loop.\\nDirect data passing from publisher models to subscriber models occurs in the\\ncontroller\\xe2\\x80\\x99s stepTime() function (line 8). We use this to directly feed, for in-\\nstance, time-stamped fire shape data from the Phoenix Fire Model into MATSim\\nto dynamically increase link penalties on road segments impacted by fire. Data\\nflow between the BDI-MATSim coupling is managed more precisely by the con-\\ntroller as mentioned already, by routing the data from the models (dataBDI and\\ndataABM) through the controller.\\n\\n2.2 API to modify agent behaviour\\n\\nPreviously, while it was possible to modify MATSim agent behaviour in all sorts\\nof ways, this involved editing into the internals of MATSim in functions that even\\nif they were public, possibly should not have been, and were in danger of changing\\nas MATSim developed. There are now three clearly specified classes allowing for\\n\\n\\n\\n6 D. Singh et al.\\n\\nediting of plans (EditPlans4), routes (EditRoutes5) and trips (EditTrips6).\\nThese classes provide a clean interface for programming functions to change\\nagent behaviour, as well as for querying MATSim regarding aspects of an agent\\xe2\\x80\\x99s\\ncurrent plan. Plans are the highest level of abstraction and consist of a sequence\\nof activities at specific locations, interleaved with trips between locations. A\\ntrip may have a variety of different modes, including car, public transport, and\\nwalking. A route is the specific set of links to be traversed within a trip. Table 1\\nshows the API functions for plan editing. Trip and route editing follow a similar\\npattern. Basically these are the typical insert/add/remove/modify methods that\\none knows from the Java List class, plus some helper methods that have to do\\nwith the data model.\\n\\nTable 1: High level API for plan editing.\\n\\naddActivityAtEnd (agent, activity, routingMode)\\n\\ncreateFinalActivity (type, newLinkID)\\n\\nfindIndexOfRealActAfter (agent, index)\\n\\nfindRealActAfter (agent, index)\\n\\nfindRealActBefore (agent, index)\\n\\nflushEverythingBeyondCurrent (agent)\\n\\ngetModeOfCurrentOrNextTrip (agent)\\n\\ninsertActivity (agent, index, activity)\\n\\nisAtRealActivity (agent)\\n\\nisRealActivity (agent, planElement)\\n\\nremoveActivity (agent, index, mode)\\n\\nreplaceActivity (agent, index, newAct)\\n\\nrescheduleActivityEndtime (agent, index, newEndTime)\\n\\n2.3 Adding BDI actions to MATSim\\n\\nWhen a BDI action is sent to MATSim it performs the necessary changes to the\\nagent\\xe2\\x80\\x99s plan elements using suitable API functions (of section 2.2) and registers\\nthe BDI percept handlers that watch for MATSim event(s) relevant to that\\naction. In particular there must always be some event(s) which indicate that the\\naction has terminated \\xe2\\x80\\x93 normally successfully, but possibly that it has failed.\\nInformation which needs to be provided to the BDI agent is then packaged up\\nfor transmission to the relevant BDI agent as a percept, possibly along with\\ninformation that the BDI action has succeeded or failed.\\n\\nAn example reusable BDI action is driveTo(args) for which we provide a\\ndefault action handler on the MATSim side, which on reception of the BDI action\\n\\n4 http://matsim.org/javadoc \\xe2\\x86\\x92 matsim main \\xe2\\x86\\x92 EditPlans\\n5 http://matsim.org/javadoc \\xe2\\x86\\x92 matsim main \\xe2\\x86\\x92 EditRoutes\\n6 http://matsim.org/javadoc \\xe2\\x86\\x92 matsim main \\xe2\\x86\\x92 EditTrips\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 7\\n\\n(i) inserts a new activity immediately following the agent\\xe2\\x80\\x99s current activity/leg,\\non the network link nearest to the coordinates given in args; (ii) optionally\\nsets the end time of the current activity, if the agent is currently performing an\\nactivity, to some future time given in args; and (iii) registers an event handler\\nfor the MATSim PersonArrivalEvent event, which when triggered on the link\\nof the newly inserted activity indicates the end of the drive-to action. All\\nevent monitors registered with the BDI action for an agent are removed when\\nthe action is removed upon success, failure, or abortion.\\n\\nA particular application may introduce both new BDI actions and new per-\\ncepts to be used by the BDI agents in their reasoning. This necessitates new\\napplication code to be added to MATSim to implement the percept handlers,\\nand also to implement the MATSim realisation of the BDI action. This is done\\nby registering an application specific action handler at initialisation. Existing\\nBDI actions may also be extended by the relevance of new percepts.\\n\\n2.4 Generating BDI percepts from MATSim\\n\\nMATSim\\xe2\\x80\\x99s mobility simulation, or mobsim, that is responsible for moving the\\nagents around according to their plans, generates a stream of events that capture\\nthe movement of people between activities. This stream gives MATSim exten-\\nsions a mechanism to plug in and listen to events of interest and perform their\\nown computations as needed. The events that are of most interest to us are those\\nthat describe the start(end) of an activity (ActivityStart(End)Event), a per-\\nson arriving at(departing from) the location of an activity (PersonArrival(Departure)Event),\\nafter(before) exiting(entering) their vehicle (PersonLeaves(Enters)VehicleEvent),\\na vehicle entering(exiting) traffic (VehicleEnters(Leaves)TrafficEvent), and\\na vehicle entering(leaving) a link in the MATSim road network (LinkEnter(Exit)Event).\\n\\nLike [12], we use mobsim events to build percepts for BDI counterpart agents.\\nAs mentioned, when a BDI agent sends a new driveTo(args) BDI action, the\\naction handler in MATSim registers an event listener for PersonArrivalEvent.\\nAs the simulation progresses, and the PersonArrivalEvent event is eventually\\ntriggered for that agent arriving on the destination link, the event handler code\\nflags the BDI action as passed and also generates an arrived percept for the\\nBDI agent.\\n\\nIt is also possible to add custom events based on the application\\xe2\\x80\\x99s require-\\nments. For the evacuation application, we defined two new events that are\\nboth relevant when the agent is engaged in a drive-to BDI-action. The event\\nAgentInCongestionEvent flags the condition that the vehicle is stuck in traffic\\ncongestion, while the event NextLinkBlockedEvent is triggered if the vehicle is\\nabout to enter a link that is blocked, due to a road closure for instance. Conse-\\nquently, code for responding to these custom events is registered as additional\\nevent handlers for the drive-to action which previously had only registered an\\narrival handler. These custom handlers generate the appropriate BDI percept in-\\nformation for passing back to the BDI agent as well as deciding if the BDI-action\\nshould potentially be deemed failed.\\n\\n\\n\\n8 D. Singh et al.\\n\\nThe custom AgentInCongestionEvent is computed on LinkLeaveEvent as\\n\\nck,n =\\n\\n{\\n1\\n\\ntk,i\\xe2\\x88\\x92t\\xe2\\x88\\x97k,i\\nt\\xe2\\x88\\x97\\nk,i\\n\\n> w\\n\\n0 otherwise\\n\\nwhere ck,i is the congestion evaluation between some traversed link k and current\\nlink i, time tk,i is the recorded travel time for the route taken from k to i,\\nand t\\xe2\\x88\\x97k,i is the expected travel time if travelling at freespeed on that route.\\nThe constant w is the congestion tolerance threshold. Practically, we set a time\\nperiod T for congestion evaluation and take the maximum permissible tk,i such\\nthat tk,i \\xe2\\x89\\xa4 T . This makes congestion parameterisation somewhat more intuitive.\\nFor instance, T = 300, w = 0.4 means that an agent will consider itself to be\\nstuck in congestion if over the last 5 minutes, the time delay in travelling the\\nroute from k to i was greater than 40% of the expected travel time for that\\nroute.\\n\\nThe nextLinkBlocked event is generated when the following link has freespeed\\nclose to zero as the intent is to prevent the agent from entering a blocked link\\nwhere it might get stuck forever.\\n\\nThe architecture of Figure 1 supports data flow directly between models,\\nas described in Section 2.1. Such incoming \\xe2\\x80\\x9cdata events\\xe2\\x80\\x9d can therefore be used\\nby the MATSim model to generate BDI percepts. For instance, on reception of\\nupdated fire(smoke) shape information from the Phoenix Fire model, we first\\nquery MATSim for a list of all agents that are within the polygon shape (plus\\nsome configurable buffer around the shape) at that timestep, and then generate\\nfire(smoke)-visual BDI percepts for all those agents.\\n\\nAs different applications are developed with MATSim as one component, it\\nis anticipated that a range of application specific percepts and percept handlers\\nwill be developed, some of which will be reusable across multiple applications.\\nThe in-congestion percept is one such addition which could be expected to\\nbe reused across applications. The smoke and fire percept and percept handler\\non the other hand is likely to be relevant only to applications in the bushfire\\ndomain. The mechansim of percept handlers and the way they can be linked to\\nspecific high level actions (BDI-actions) is a new/refined facility which supports\\nthe integration of MATSim into new application areas, combined with other\\ncomponents.\\n\\n3 Flexible route planning\\n\\nIn many simulation applications the environment itself is dynamic. For example\\na bushfire progression creates smoke and fire while a traffic accident causes a\\nroad blockage. Often these environmental changes will require modifications to\\na simulation environment, even when they do not originate there (such as fire\\nand smoke). In MATSim the key environmental component is the road network.\\nSome dynamics of the environment already result in MATSim effects, such as\\ncongestion influencing the speed at which traffic moves through a link. There are\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 9\\n\\nalso existing options to make some dynamic modifications to the road network,\\nsuch as modifying the speed and capacity of links. However, as we developed our\\nevacuation applications we found that these aspects were insufficient for some\\nsituations. In particular we needed to have residents who were evacuating avoid\\ndriving into the fire, while still allowing emergency service vehicles to do so (to\\nsome extent).\\n\\n3.1 Route planning in MATSim\\n\\nWhenever an agent needs to plan its route between destinations it calls a router.\\nThe router uses a Djikstra algorithm to find a close to optimal path to the\\ndestination, based on the cost of a link. Link cost is based on a travel time\\nparameter multiplied by a penalty. Travel time can be either a current travel\\ntime based on traffic conditions, or a travel time based on maximum speed\\non the link. Link times and penalties are associated with a particular router\\n(e.g. freespeed, using max link speed, or globalspeed using current actual\\nspeed) and the router is used for a specific combination of vehicle type and\\nnetwork mode such as car, bicycle, public transport, walking, etc. set during\\nconfiguration.\\n\\nHowever, in the evacuation application we needed to use different route plan-\\nning in different situations, for the same vehicle type: sometimes a car would\\nrequire using the freespeed router, sometimes globalspeed, and then emer-\\ngency vehicles required different costs again. The refinement to MATSim that\\nwas introduced was to allow a specific router to be specified dynamically as a\\nparameter with the destination node for a trip.\\n\\n3.2 The evacuation system routers\\n\\nInitially when we developed our evacuation applications we found that as roads\\nbecame congested (with reduced speeds) we had a problem preventing agents\\nfrom driving directly into the fire in order to find a faster route to the evacuation\\ndestination. We tried a number of ways of controlling this, including: 1. requiring\\nthe routing algorithm to disregard current speeds and capacities based on con-\\ngestion when routing, and instead use the maximum speed of links. 2. routing\\nvia specific waypoints at the BDI level to enforce particular routes. 3. modify-\\ning maximum speed to zero or very low on links affected by smoke and fire to\\ninfluence the routing away from using those links.\\n\\nHowever, none of these were really satisfactory. Inability to use congestion\\ninformation meant we could not adequately model the fact that while this infor-\\nmation may not immediately be known to an agent, it is likely to be transmitted\\nvia various mechanisms and used in planning egress routes. Setting the speed\\nto zero meant that vehicles currently on the link remained stuck there. Also\\nusing very low values did not properly reflect the speed should an agent actually\\ndecide to go into an affected area based on some cognitive goal such as reach-\\ning family members or, in the case of emergency services, dealing with the fire.\\n\\n\\n\\n10 D. Singh et al.\\n\\nRouting via specific waypoints at the cognitive level required far too much MAT-\\nSim specific information within the BDI system and was not robust to changing\\ncircumstances.\\n\\nAs a result three specific routers were developed for the evacuation domain\\nusing the key idea of risk reduction routing as described in [10]. Links within\\nthe danger zone (the fire area) were given high penalties, while those in an area\\naround the danger zone (for us the smoke zone) were given penalties that de-\\ncreased based on distance from the fire front. The travel time could then be\\neither maximum link speed or actual current link speed. This successfully con-\\ntrolled the behaviour of the agents such that they didn\\xe2\\x80\\x99t \\xe2\\x80\\x9cmindlessly\\xe2\\x80\\x9d drive into\\nthe fire, but if they had a goal to reach a destination within the danger zone\\n(such as rescuing family members), then they were not prevented from doing\\nso. We currently have three different routers for our evacuation applications:\\ncarFreespeed, carGlobalInformation and emergencyVehicle, with the abil-\\nity to switch between them depending on context. The emergencyVehicle router\\nis similar to the carGlobalInformation router but imposes lower penalties for\\ncoming close to the fire \\xe2\\x80\\x93 it allows taking of greater risks.\\n\\nWithin our system the road link penalties used by the routers are updated\\nperiodically based on information from the fire model. This information is also\\nused to provide percepts to the (BDI) agents to be potentially used in their\\nreasoning process. The sequence of execution is as follows: (i) updated smoke\\nand fire shape information is published by the Phoenix Fire model; (ii) the\\nMATSim model has subscribed to this information and therefore receives it im-\\nmediately; (iii) at the next MATSim step MATSim places penalties on links and\\nalso produces smoke/fire percepts for relevant agents in the areas (as explained\\nin Section 2.4); and (iv) at the next BDI step the smoke percepts are passed to\\nthe specified BDI agents where it affects their decision making.\\n\\nThe ability to dynamically choose which router to use, combined with the\\nability to set penalties dynamically based on a changing situation provides great\\nflexibility which can be relatively easily extended and modified for different ap-\\nplication needs.\\n\\n4 Initialisation of MATSim\\n\\nLike most microsimulations MATSim typically includes data from real environ-\\nments, and creates agents with attributes and activities taken from data. The\\neasiest way to create a road network is to use OpenStreetMap7 and then convert\\nto MATSim representation using the MATSim utility class OsmNetworkReader.\\nThe population of agents is given by an input file in XML format as shown in\\nFigure 3.\\n\\nTypically initial agents with attributes are created by writing a script that\\nprocesses census data in some format. Activities are then added by generalising\\nfrom activity diaries from a population sample. If census data provides place of\\n\\n7 https://www.openstreetmap.org/\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 11\\n\\n<population>\\n\\n<person id=\"\">\\n\\n<attributes>\\n\\n<attribute name=\"\" class=\"\">. . . </attribute>\\n. . .\\n\\n</attributes>\\n\\n<plan selected=\"yes\">\\n\\n<activity type=\"home\" x=\"\" y=\"\" end_time=\"\" />\\n\\n<leg mode=\"car\" />\\n\\n. . .\\n</plan>\\n\\n</person>\\n\\n. . .\\n</population>\\n\\nFig. 3: Structure of MATSim\\xe2\\x80\\x99s input population XML file\\n\\nwork and mode of transport to work for sufficiently small geographical areas,\\nreasonably realistic work travel plans can be created.8\\n\\n4.1 Creating the agent population\\n\\nIt is relatively straightforward to create a set of individuals that match census\\ndata with regard to attributes such as gender, age, etc. These attributes can\\nbe directly encoded as attributes of a person in the MATSim population using\\nthe attributes set as shown in Figure 3. Grouping individuals into family and\\nhousehold structures that also match census data is more complex. Various ap-\\nproaches have been used in the literature, and for Australian census data there\\nis software available that can create a population, assigned to households with\\naddress coordinates.9 There are scripts which take this information and create\\nan initial population in MATSim format. Activities can then be assigned based\\non census data and on surveys.\\n\\nWe further provide a new convenient way of connecting BDI behaviour classes\\nto individual MATSim agents directly via the input population file using the\\nspecial BDIAgentType attribute (of the form shown in Figure 3) whose value is a\\nfully qualified Java class name that captures the BDI behaviours for that agent\\ntype.\\n\\n4.2 Creating the activities\\n\\nThere are a number of approaches that have been used for creating the activity\\nschedules of the agents. These include activity based demand generation models\\n\\n8 Cf. https://github.com/matsim-org/matsim-code-examples/find/0.11.x \\xe2\\x86\\x92\\nRunDemandGenerationFromShapefileExample.java for intuition.\\n\\n9 Software is available at https://github.com/agentsoz/synthetic-population.\\n\\n\\n\\n12 D. Singh et al.\\n\\n(e.g. [14]), smart card or mobile phone data (e.g. [1, 5]) hourly origin destination\\nmatrices [3], or commuting matrices [2]. One can additionally calibrate against\\nemergent properties such as traffic counts (e.g. [18]). The challenge is to combine\\nthe data that is locally available, and which is typically different in each location,\\nto come up with a good approximation.\\n\\nFor the bushfire applications we have a user requirement to simulate the\\nagents going about their daily business, prior to the evacuation request. Conse-\\nquently we have developed some tools to assist with this. If census data includes\\ninformation on whether individuals work, where they work (at a suitably fine\\ngeographical granularity), and mode of transport to work, then reasonable ini-\\ntial activity schedules for work travel can be created by assigning travel to and\\nfrom a work activity of appropriate length, for a suitable number of people in\\neach geographical area. Work locations can be assigned randomly within the rel-\\nevant geographical area, or probabilistically according to knowledge of centres\\nof activity. Timings must also be assigned based on some assumptions (or data)\\nabout usual length and time of work activities. Code is available which allocates\\nthese work activity schedules to the population described in section 4.1, based\\non census data of individuals and households.\\n\\nIn order to simulate other activity we have developed a tool that allows us\\nto use expert knowledge about the approximate proportions of different agent\\ntypes doing various activities at certain times of day, in order to generate rep-\\nresentative activity schedules. This tool can possibly also be useful for creating\\nscenarios involving specialised situations, such as an influx of tourists during\\nholiday season, or scenarios involving a special event. The aim is not to build\\ncalibrated populations, but instead build representative populations that cap-\\nture sufficient richness of activities while being relatively easy for domain experts\\nto specify. However this tool is potentially suitable only for relatively small ge-\\nographical areas in its current state, as with large scale scenarios, a random\\ndestination choice with a uniform distribution leads to distances that are too\\nlarge (in the average half the scenario diameter). Nevertheless it has been useful\\nfor the current applications and is an area of ongoing work.\\n\\n1 3 5 7 9 11131517192123\\n0\\n\\n50\\n\\n100\\n\\nhome work beach shops other\\n\\nFig. 4: Example input weekday activities for Residents.\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 13\\n\\nThe tool takes as input, for each population subgroup, a table of activities\\ndistributions for the day, a list of GIS shapes associated with each activity signi-\\nfying places where those activities can be performed, and the number of persons\\nof the subgroup to generate. For instance, given the example activities distri-\\nbutions for the Resident subgroup in Figure 4 \\xe2\\x80\\x93 that tells us what activities\\nthe subgroup is doing at different times of the day and in what proportion \\xe2\\x80\\x93\\nthe algorithm constructs a population whose activites taken together resemble\\nthese distributions. The output is a MATSim population file in GZipped-XML\\n(.xml.gz) format.10\\n\\n5 Designing agents and their behaviours\\n\\nDesigning the agents and their behaviours in a complex simulation involving mul-\\ntiple components will typically involve some level of interaction between these\\ncomponents. Decisions must be made about which components receive and are\\naffected by, which information. In some cases agents may be represented in differ-\\nent components to take advantage of specialised representations and modelling.\\nThis is the case in BDI-ABM integration as described in [16], where the cognitive\\nreasoning of the agents is in a different component than the interaction of the\\nagent with the environment. This raises questions regarding the design of the\\nagents and what aspects should be in which component. This will always depend\\non the particular application and the specifics of the components. The principle\\nwith BDI-ABM agents has always been that reasoning decisions should be made\\nby the cognitive system, with actions carried out by the ABM. In practice how-\\never this is a fuzzy boundary. Route planning is a cognitive process. However it\\nis tightly coupled with the representation of the road network, and given that\\nMATSim has route planning as an integral part of the system it would be a\\nlot of additional work to reproduce this in the BDI system. It is also the case\\nthat as it is MATSim which has detailed location information regarding agents,\\nit is sometimes MATSim that must receive information and then channel it to\\nthe relevant (BDI) agents. In consequence, an active design decision needs to\\nbe made at which level of abstraction the BDI model operates. For our present\\napplications, we assume that the BDI model knows about certain fixed location\\ncoordinates (e.g. activity locations), but not about the road network, or dynamic\\nco-ordinates such as agent location.\\n\\nWhen a BDI-action is sent to MATSim, then the BDI goal of which it is a\\npart is suspended until MATSim returns from that action with either a PASS\\nor a FAIL. We note that failing a BDI action is not the same as failing a BDI\\nplan, as an action is a plan step (similar to a sub-goal), and therefore should, like\\na sub-goal, raise a consideration of alternative options for achieving success for\\nthat action, rather than automatic failure, leading to failure of the containing\\nplan. We have developed a mechanism to specify (possibly with some analysis\\nor query regarding the current situation) together with an action, what should\\n\\n10 This software can be accessed at https://github.com/agentsoz/ees-synthetic-\\npopulation/tree/master/plan-algorithm.\\n\\n\\n\\n14 D. Singh et al.\\n\\nbe done if it fails. Sometimes a percept relevant to a BDI-action may be better\\nprovided to the BDI system as a trigger for reasoning in a separate intention,\\nrather than associated with immediate SUCCESS or FAIL of the BDI-action.\\nThis allows the BDI system to reason about the situation using standard goals\\nand plans with context conditions, in order to determine what should be done.\\nThe BDI action can then be aborted/replaced if that is considered appropriate.\\n\\nA simplified example of this situation is shown in figure 5 using the detailed\\ndesign diagram of the Prometheus agent system design methodology [13]. This\\n\\nFig. 5: Basic design of handling of congestion percept\\n\\nfigure shows an evacuate goal which through some series of plans and subgoals\\nhas led to a BDI-action to drive to the evacuation destination. The design spec-\\nifies that if a congestion percept arrives (which will happen only while the agent\\nis engaged in some drive-to), then an appropriate plan is chosen to assess\\nthe situation. Here we show 3 different plans depending on whether the agent is\\n1. still in the danger zone, 2. out of the danger zone but far from the destination,\\n3. close to the destination.\\n\\nIf as a result of the reasoning that happens when one of these plans is chosen,\\nthere is a decision that the agent should modify its destination, then the decision\\ncode within the congestion intention11 will abort the drive-to action within the\\nEvacuate intention. The code for handling this situation will then instantiate a\\nnew drive-to action with the new destination.\\n\\nThere may be a number of subgoals and further plans associated with the\\nplans for handling the congestion percept. Figure 6 shows a possible design.\\nPlan in-danger results in the agent querying MATSim to find a location outside\\nthe danger zone to which there is a faster route (given congestion) than the\\npoint outside the danger zone on the current route. If such exists the agent will\\nregister the new destination and abort the current drive-to action allowing it\\nto be replaced with a new drive-to action. The new destination will be accessed\\nand provided as a parameter to the new drive-to. MATSim will then add the\\nroute in standard fashion. The code for failing/aborting the drive-to action for\\n\\n11 An intention is simply the code stack resulting from a top-level instantiated goal.\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 15\\n\\nFig. 6: Detailed design of handling of congestion percept\\n\\nthis case will, in addition to instantiating a new drive-to, need to ensure this\\nis followed by a choice of final destination once out of the danger zone.\\n\\nIf the out-of-danger plan is chosen the agent may consider either looking for\\na new route to the current evacuation destination, or looking for an alternative\\ndestination which is faster to get to, given congestion. Let us assume that the\\nagent first looks for a better route, by choosing the better-route plan, resulting in\\ninstantiating a new BDI-action to \\xe2\\x80\\x9cfind-faster-route\\xe2\\x80\\x9d. If this has been properly\\nset up in MATSim as described in section 2.4, then the action will be generated in\\nMATSim to replace the current route with a faster one if such exists and return\\nSUCCESS. At this point the intention triggered by the congestion percept would\\ncomplete. If no faster route was found then a FAIL would be returned, in which\\ncase the plan can just be allowed to fail and the standard BDI execution will\\nlead to the plan new-dest which can consider alternative evacuation destinations.\\nDepending on the outcome of that reasoning, either a new destination may be\\nchosen or it may be determined that there is nothing better and no change is\\nmade. The former will result in aborting the current drive-to and instantiating\\na drive-to with new destination (as in case (1)), while the latter would simply\\nterminate with no change. Case (3) may simply be a no-op where the agent does\\nno further reasoning, as they are anyway close to the destination.\\n\\nThe key aspects that we have identified for design are:\\n\\n\\xe2\\x80\\x93 percepts should always be handled by a new separate intention. This may\\nsimply alter a belief that affects a current intention, it may generate a sub-\\nstantial reasoning process regarding what to do with regards to a current\\nintention, or it may generate new behaviour unrelated to other current in-\\ntentions.\\n\\n\\xe2\\x80\\x93 any reasoning, other than that specifically related to route planning or simple\\nlocational reasoning, should be done by the BDI system.\\n\\n\\n\\n16 D. Singh et al.\\n\\n\\xe2\\x80\\x93 action failures must be handled differently to plan failures - they are more\\nlike goal failures. (Future work should investigate infrastructure support for\\nhigh level specification and management of such, in the same style as is done\\nfor goal failure with a search for alternative plans based on context).\\n\\n\\xe2\\x80\\x93 there is a need for aborting an action, which arises from BDI reasoning, as\\nwell as failing an action which arises from the environment.\\n\\n\\xe2\\x80\\x93 querying of MATSim may be needed in order to do the BDI reasoning. This\\nis supported by the BDI-ABM infrastructure of [16].\\n\\nAgent intentions may also be trigered by messages from another agent. This\\nhappens in the evacuation domain when a policeman \\xe2\\x80\\x9csees\\xe2\\x80\\x9d (via a percept from\\nMATSim) an approaching agent, and directs them to take a particular turn. A\\nsimilar approach to that shown with the congestion percept is appropriate. First\\ngenerate an intention that reasons about the message, and any effect on current\\nintention(s). Then modify current intentions as needed.\\n\\n6 Discussion and conclusion\\n\\nIn this paper we have described some of the important aspects of MATSim which\\nfacilitate its use as a component in large complex simulations, including some\\nnew extensions and some supporting tools. MATSim is itself a large and complex\\nsystem. However, where transport simulation is an important aspect of a larger\\nmicro-simulation it does not make sense to implement a simpler (and likely less\\nefficient and accurate) alternative. Rather effort should be made to facilitate the\\nre-use and incorporation of this existing and highly flexible software. The work\\ndescribed here contributes to this effort.\\n\\nA number of the aspects described have been motivated by our use of MAT-\\nSim as a component in evacuation applications and in an urban planning appli-\\ncation. We believe that this description will assist others in using MATSim in\\nsimilar ways. The key aspects we have described are:\\n\\n1. Architecture that enables external control of multiple simulation compo-\\nnents. Components must be able to be started and paused externally.\\n\\n2. A well specified API to support addition of new percepts and actions, as\\nwell as the structure within which to do this.\\n\\n3. An ability to modify the environment dynamically, in this case using dy-\\nnamic penalties and flexible routers.\\n\\n4. Tools to assist in creating a suitable representative initial scenario for the\\nsimulation.\\n\\n5. Design of cognitive agents within the BDI-MATSim system.\\n\\nWe also gave examples of how we have used these facilities within evacuation\\napplications, where requirements were user driven. One of these applications\\nis currently deployed and the other is expected to be deployed within coming\\nmonths.\\n\\n\\n\\nMATSim as a Component for Micro-Simulations 17\\n\\nReferences\\n\\n1. Anda, C., Erath, A., Fourie, P.J.: Transport modelling in the age of big data.\\nInternational Journal of Urban Sciences 21(sup1), 19\\xe2\\x80\\x9342 (Feb 2017)\\n\\n2. Balmer, M., Axhausen, K., Nagel, K.: A demand generation framework for large\\nscale micro simulations. Transportation Research Record 1985, 125\\xe2\\x80\\x93134 (2006)\\n\\n3. Balmer, M., Rieser, M., Vogel, A., Axhausen, K., Nagel, K.: Generating day plans\\nusing hourly origin-destination matrices. In: Bieger, T., Laesser, C., Maggi, R.\\n(eds.) Jahrbuch 2004/05 Schweizerische Verkehrswirtschaft, pp. 5\\xe2\\x80\\x9336. Schweizer\\nVerkehrswissenschaftliche Gesellschaft (2005)\\n\\n4. Bazzan, A., Amarante, M.d.B.d., Sommer, T., Benavides, A.J.: ITSUMO: An\\nagent-based simulator for ITS applications. In: Rossetti, R., Liu, H., Tang, S.\\n(eds.) Proceedings of the 4th Workshop on Artificial Transportation Systems and\\nSimulation. IEEE (Sep 2010)\\n\\n5. Bouman, P., Lovric, M.: Rotterdam: Revenue management in public transportation\\nwith smart-card data enabled agent-based simulations. In: Horni, A., Nagel, K.,\\nAxhausen, K.W. (eds.) The Multi-Agent Transport Simulation MATSim, chap. 81.\\nUbiquity, London (2016). https://doi.org/10.5334/baw\\n\\n6. Bruch, E., Atwell, J.: Agent-based models in empirical social research. Sociological\\nMethods & Research 44(2), 186\\xe2\\x80\\x93221 (2015)\\n\\n7. Dahmann, J.S., Kuhl, F., Weatherly, R.: Standards for simulation: as simple as\\npossible but not simpler the High Level Architecture for simulation. Simulation\\n71(6), 378\\xe2\\x80\\x93387 (1998)\\n\\n8. Dobler, C., Nagel, K.: Within-day replanning. In: Horni, A., Nagel, K., Axhausen,\\nK.W. (eds.) The Multi-Agent Transport Simulation MATSim, chap. 30, pp. 187\\xe2\\x80\\x93\\n200. Ubiquity Press, London (2016)\\n\\n9. Horni, A., Nagel, K., Axhausen, K.W.: The Multi-Agent Transport Simulation\\nMATSim. Ubiquity Press, London (2016)\\n\\n10. La\\xcc\\x88mmel, G., Klu\\xcc\\x88pfel, H., Nagel, K.: Risk minimizing evacuation strategies un-\\nder uncertainty. In: Peacock, R., Kuligowski, E., Averill, J. (eds.) Pedestrian and\\nEvacuation Dynamics. pp. 287\\xe2\\x80\\x93296. Springer, Berlin (2011)\\n\\n11. Padgham, L., Nagel, K., Singh, D., Chen, Q.: Integrating BDI agents into a MAT-\\nSim simulation. In: ECAI 2014. pp. 681\\xe2\\x80\\x93686. IOS Press, Prague, Czech Republic\\n(2014)\\n\\n12. Padgham, L., Singh, D.: Making MATSim agents smarter with the Belief-Desire-\\nIntention framework. In: Horni, A., Nagel, K., Axhausen, K.W. (eds.) The Multi-\\nAgent Transport Simulation MATSim, chap. 31, pp. 201\\xe2\\x80\\x93210. Ubiquity Press, Lon-\\ndon (2016)\\n\\n13. Padgham, L., Winikoff, M.: Developing Intelligent Agent Systems: A practical\\nguide. Wiley Series in Agent Technology, John Wiley and Sons (2004)\\n\\n14. Rieser, M., Nagel, K., Beuck, U., Balmer, M., Ru\\xcc\\x88menapp, J.: Truly agent-oriented\\ncoupling of an activity-based demand generation with a multi-agent traffic simu-\\nlation. Transportation Research Record 2021, 10\\xe2\\x80\\x9317 (2007)\\n\\n15. Singh, D., Padgham, L.: OpenSim: A framework for integrating agent-based models\\nand simulation components. In: ECAI\\xe2\\x80\\x9914. pp. 837\\xe2\\x80\\x93842. IOS Press, Prague, Czech\\nRepublic (2014)\\n\\n16. Singh, D., Padgham, L., Logan, B.: Integrating BDI agents with agent-based simu-\\nlation platforms. Autonomous Agents and Multi-Agent Systems 30(6), 1050\\xe2\\x80\\x931071\\n(2016)\\n\\n\\n\\n18 D. Singh et al.\\n\\n17. Waddell, P.: Urbansim: Modeling urban development for land use, transportation,\\nand environmental planning. Journal of the American Planning Association 68(3),\\n297\\xe2\\x80\\x93314 (2002)\\n\\n18. Zilske, M., Nagel, K.: A simulation-based approach for constructing all-day travel\\nchains from mobile phone data. Procedia Computer Science 52, 468\\xe2\\x80\\x93475 (2015)\\n\\n\\n'