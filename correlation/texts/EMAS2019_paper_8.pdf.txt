b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nJacamo-web is on the fly: an interactive\\nMulti-Agent System IDE?\\n\\nCleber Jorge Amaral1,2 and\\nJomi Fred Hu\\xcc\\x88bner1\\n\\nFederal University of Santa Catarina (UFSC), Floriano\\xcc\\x81polis, SC, Brazil\\njomi.hubner@ufsc.br\\n\\nFederal Institute of Santa Catarina (IFSC), Sa\\xcc\\x83o Jose\\xcc\\x81, SC, Brazil\\ncleber.amaral@ifsc.edu.br\\n\\nAbstract. This paper presents jacamo-web, an interactive program-\\nming IDE to develop Multi-Agent Systems. The standard programming\\nmethod usually follows the sequence of compile, link and execute the\\napplication. Alternatively, so-called interactive programming provides a\\nway to modify a system while it is running. Besides saving developing\\ntime, it maintains the system\\xe2\\x80\\x99s availability since the application is kept\\nrunning while it is being changed. To illustrate jacamo-web interactive\\nfunctions, we have developed a MAS for the financial market. It checks\\ndata of companies and applies known formulae to suggest whether to\\nbuy assets or not.\\n\\nKeywords: Interactive programming \\xc2\\xb7 Just-in-time programming \\xc2\\xb7 Multi-\\nAgent Oriented Programming \\xc2\\xb7 On-the-fly programming.\\n\\n1 Introduction\\n\\nInteractive programming is a form to develop a program while it is running,\\nwithout stopping or restarting, acting directly over its instance [6]. It allows\\nrapid prototyping, debugging and learning, as well as facilities for incremental\\ndevelopment. On the interactive approach, the programmer can enter a program\\nor a fragment directly into an already running system, reducing system devel-\\nopment time since the usual compile-link-execute process is done in a single\\nstep [5]. This method is also useful in cases where there is no clear specification\\nof the problem at design phase and adaptations are required at run-time. This\\nfeature is particularly useful for systems that perform critical missions needing\\nhigh availability.\\n\\nFor long term running systems, such as some open systems, interactive pro-\\ngramming gives tools to improve partly or the whole system at run-time. For\\nexample, imagine stock market autonomous agents buying and selling all sorts\\nof assets. It is usual that one needs to enhance some functions of the agents,\\nfor instance, their prediction models and decision-making rules. Interactive pro-\\ngramming allows to instantly apply such changes.\\n\\n? Supported by Petrobras project AG-BR, IFSC and UFSC.\\n\\nlouisedennis\\nPlaced Image\\n\\n\\n\\n2 C.J. Amaral et al.\\n\\nThis paper presents jacamo-web an Integrated Development Environment\\n(IDE)1 which uses the concept of interactive programming for development of\\nMulti-Agent Systems. It extends JaCaMo platform [3] adding facilities to create,\\nmodify and destroy agents, artifacts, and organisations at running time. This\\nIDE is showed by demonstrating an application of financial market consultants.\\n\\n2 Jacamo-web\\n\\nJaCaMo is a Multi-Agent Oriented Programming (MAOP) platform that splits\\nprogramming concerns of a MAS by the parts responsible for autonomous deci-\\nsions: (i) the agents which are developed in Jason; (ii) their shared environment,\\nprogrammed in CArtAgO, a java-based framework; and, (iii) the coordination of\\nglobal behaviour, which is developed in MOISE, that uses artifacts to represent\\norganisational entities [3]. Jacamo-web adds a web interface allowing users to\\ncreate, modify, interact with, and destroy agents, artifacts, and organisations.\\nAlthough we have MAS IDEs where the agents themselves can modify the run-\\nning system (by dynamically adding plans, changing beliefs of others, changing\\nits organisation and environment), jacamo-web brings this feature for the (de-\\nveloper) user using a web interface.\\n\\nJacamo-web provides interactive functions of Read-Eval-Print Loop (REPL).\\nThe acronym REPL refers to: Read user insertions, Evaluates them, Print the\\nresult for the user, all of this, repeatedly in a Loop [7]. This technology allows\\nthe user to send commands to agents, to insert new instructions or full blocks\\nof code. Jason\\xe2\\x80\\x99s API is equipped with REPL functions which are processed by\\nJason\\xe2\\x80\\x99s internal interpreter.\\n\\nIn case of environmental artifacts, jacamo-web brings a built-in Java com-\\npiler. It allows the development of new artifacts by coding java files which are\\ncompiled automatically. These new or changed artifacts can be used in the run-\\nning system.\\n\\nIn the case of the organisation, jacamo-web allows the user to create new\\norganisations and change those that are already running. For instance, the user\\ncan create, modify and remove roles, shared goals, coordination schemes, and\\nnorms.\\n\\n3 Demonstration\\n\\nThe facilities provided by jacamo-web for developers are demonstrated by the\\nimplementation of a MAS for the financial market. The organisation of the MAS\\nhas two roles: consultants, which read assets data to apply a particular formu-\\nlae to suggest whether to buy it or not; and, assistants, which receive users\\nrequests, asking to consultants their opinion, compiling a final suggestion and\\nreplying to the user. The interface with final users is implemented using the Tele-\\ngram cell phone application, which is being integrated through Apache Camel\\nframework [1]. Fig. 1 shows the architecture of the application and jacamo-web.\\n\\n1 A demo application is running at http://191.36.8.42:8080/\\n\\n\\n\\nJacamo-web is on the fly: an interactive Multi-Agent System IDE 3\\n\\nFig. 1. Financial agents and jacamo-web architecture\\n\\nIn the financial market, there are some known investors that have shared\\nthe way they decide to buy an asset or not. For this demo, we adapt Benjamin\\nGrahan\\xe2\\x80\\x99s, Decio Bazin\\xe2\\x80\\x99s and Joel Greenblatt \\xe2\\x80\\x99s formulas [2, 4]2. Each of these\\ndecision rules is coded into agents with the same name as the original authors\\xe2\\x80\\x99\\nformulas. These agents are connected to an artifact that gets financial data of\\nassets from an external web-site. The assistant agent sends to the user consultant\\nopinions as well as a summarised recommendation. The final recommendation is\\nto buy the asset if at least two of the consultants are suggesting to buy.\\n\\nFig. 2 shows a diagram generated by jacamo-web according to the current\\nsystem\\xe2\\x80\\x99s state. The agents are represented by round shapes. The roles they\\nare playing are represented by connections with the organisation finantialteam.\\nThe missions they are committed to are represented by connections with the\\norganisational scheme finantialsch. The consultants are also connected with the\\nartifact fundamentus which contains a parser for consulting asset data.\\n\\nFig. 2. Application overview showing runtime organisation, agents and environment\\n\\n2 Buying conditions: Graham: Price <\\n\\xe2\\x88\\x9a\\n\\n(22.5 \\xe2\\x88\\x97 EPS \\xe2\\x88\\x97 BV PS); Greenblatt:\\nEBIT/(MarketCap + NetDebt) < 0.1 and ROIC < 0.1; Bazin: DY >= 0.06\\nand Debt/EV <= 1.\\n\\n\\n\\n4 C.J. Amaral et al.\\n\\nJacamo-web allows programmers to exploit the following features:\\n\\n\\xe2\\x80\\x93 Inspect the current state of the agent\\xe2\\x80\\x99s belief base, plan library and relations.\\n\\xe2\\x80\\x93 Change the agent\\xe2\\x80\\x99s belief base without stopping the agent.\\n\\xe2\\x80\\x93 Modify the agent\\xe2\\x80\\x99s plan library while running.\\n\\xe2\\x80\\x93 Create a new agent by command box (Fig. 3) and by menu.\\n\\xe2\\x80\\x93 Kill an agent and recreate him.\\n\\xe2\\x80\\x93 Send a new plan to an agent using tellHow performative.\\n\\xe2\\x80\\x93 Consult directory facilitator.\\n\\xe2\\x80\\x93 Inspect workspaces and artifacts seeing agents which are focusing on them.\\n\\xe2\\x80\\x93 Create an artifact based on a new java file.\\n\\xe2\\x80\\x93 Modify an artifact, dispose and create an new instance.\\n\\xe2\\x80\\x93 Inspect organisations.\\n\\xe2\\x80\\x93 Change organisation\\xe2\\x80\\x99s structure and schemes.\\n\\nFig. 3. Text box with code completion. Diagram of agent greenblatt\\xe2\\x80\\x99s relations.\\n\\n4 Conclusions\\n\\nWe have presented jacamo-web; an extension of JaCaMo MAS platform. Jacamo-\\nweb has shown that it can shorten project life cycle. We could take advantage\\nof instantiated contexts and quickly get responses from new code insertions.\\nWhile developing the financial application, we have faced common situations\\nthat needed changes on agents, environment and organisation that could be\\napplied at running time, and the results have been shown instantly. In case of\\nopen systems, they are supposed to be available for new entrants where IDE like\\njacamo-web are useful to help maintain the system\\xe2\\x80\\x99s availability. In addition, we\\nthink it also facilitate to understand programming aspects, being an important\\ntool for didactic purposes. As far as we know, jacamo-web is the first interactive\\nMAOP IDE where the user can interact with the system while it is running.\\n\\n\\n\\nJacamo-web is on the fly: an interactive Multi-Agent System IDE 5\\n\\nReferences\\n\\n1. Amaral, C., Cranefield, S., Roloff, M.L.: Development of a Multi-Agent Sys-\\ntem in the Industry 4.0 Context - Using JaCaMo and Apache Camel. In:\\nAnais do IX Congresso Brasileiro de Engenharia de Fabricac\\xcc\\xa7a\\xcc\\x83o. ABCM (2017).\\nhttps://doi.org/10.26678/ABCM.COBEF2017.COF2017-0027\\n\\n2. Bazin, D.: Fac\\xcc\\xa7a Fortuna com Ac\\xcc\\xa7o\\xcc\\x83es, Antes que seja Tarde. CLA Cultural, 6a edn.\\n(2006)\\n\\n3. Boissier, O., Bordini, R.H., Hu\\xcc\\x88bner, J.F., Ricci, A.: Dimensions in program-\\nming multi-agent systems. The Knowledge Engineering Review 34, e2 (2019).\\nhttps://doi.org/10.1017/S026988891800005X\\n\\n4. Reese, J., Forehand, J.: The Guru Investor: How to Beat the\\nMarket Using History\\xe2\\x80\\x99s Best Investment Strategies. Wiley (2009),\\nhttps://books.google.es/books?id=Z7J sg9iX5IC\\n\\n5. Tung, S.H.S.: Interactive modular programming in Scheme. ACM SIGPLAN Lisp\\nPointers V(1), 86\\xe2\\x80\\x9395 (1992). https://doi.org/10.1145/141478.141512\\n\\n6. Wang, G., Cook, P.R.: On-the-fly Programming: Using Code as an Ex-\\npressive Musical Instrument. NIME \\xe2\\x80\\x9904 Proceedings of the 2004 con-\\nference on New interfaces for musical Expression pp. 138\\xe2\\x80\\x93143 (2004).\\nhttps://doi.org/http://dx.doi.org/10.1017/S1092852916000900\\n\\n7. Wenzel, M.: READ-EVAL-PRINT in Parallel and Asynchronous Proof-checking.\\nElectronic Proceedings in Theoretical Computer Science 118, 57\\xe2\\x80\\x9371 (2013).\\nhttps://doi.org/10.4204/EPTCS.118.4, http://arxiv.org/abs/1307.1944v1\\n\\n\\n'