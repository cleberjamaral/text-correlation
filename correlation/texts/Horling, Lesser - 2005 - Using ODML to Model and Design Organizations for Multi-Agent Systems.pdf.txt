b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nUsing ODML to Model and Design Organizations for\\nMulti-Agent Systems !\\n\\nBryan Horling and Victor Lesser\\n\\nUniversity of Massachusetts\\nAmherst, MA 01003-9264\\n\\n{bhorling,lesser}@cs.umass.edu\\n\\nAbstract. In this paper, we introduce a new, domain-independent organizational\\ndesign representation able to model and predict the quantitative performance\\ncharacteristics of agent organizations. This representation, capable of capturing a\\nwide range of multi-agent behaviors, can support the selection of an appropriate\\ndesign given a particular operational context. We demonstrate the capabilities and\\nefficacy of this language by comparing a range of metrics predicted by an ODML\\nmodel to previously obtained empirical results from a real-world system. We then\\noutline how such models can serve as the foundation for automated organizational\\ndesign process by modeling a range of organizational possibilities.\\n\\n1 Introduction\\n\\nAny real-world system must be tailored to the environment in which it exists if it is to\\nmake effective use of the resources and flexibility available to it. In this paper, we will\\nexplore the possibility of such tailoring through the system\\xe2\\x80\\x99s organizational design. The\\nnotion of an organizational design is used in many different fields, and generally refers\\nto how members of a society act and relate with one another. This is true of multi-agent\\nsystems, where the organizational design of a system can include a description of what\\ntypes of agents exist, what roles they take on, and how they act both independently\\nand with one another. This additional structure becomes increasingly important as the\\nsystem scales in number and scope [1]. Imagine how difficult it would be for a large\\nhuman organization, such as a corporation or government, to function if individuals\\nlacked job descriptions and long-term peer relationships. Agent systems face similar\\nchallenges, and can derive similar benefits from an explicit organizational design.\\n\\nConsider the problem of designing a solution for a complex, resource-bounded do-\\nmain, such as a distributed tracking system. The system would consist of an array of\\nsensors deployed to track mobile targets. Assume that each sensor is controlled by an\\nagent. Let us further assume that the sensor nodes must collaborate in some way to\\nbe successful, because multiple sensors must illuminate a target to correctly obtain its\\nposition. Given these assumptions, a designer must determine a way to structure the\\n! This material is based upon work supported in part by the National Science Foundation En-\\ngineering Research Centers Program under NSF Award No. EEC-0313747. Any opinions,\\nfindings, conclusions or recommendations expressed in this material are those of the author(s)\\nand do not necessarily reflect the views of the National Science Foundation.\\n\\n\\n\\nagents\\xe2\\x80\\x99 behaviors so that tracking may be accomplished. One strategy would create or\\ndelegate a single agent to be the manager of the entire sensor network. The manager\\nwould decide when, where and how each sensor should take measurements, and then\\nprocess the resulting data to estimate the targets\\xe2\\x80\\x99 positions. This layout of responsibili-\\nties constitutes a rudimentary organizational design. It specifies what roles agents take\\non, who they interact with, and where decision making authority is located.\\n\\nUnder some conditions, this simple solution will perform optimally, because the\\nmanager can maintain an omniscient view of the entire network\\xe2\\x80\\x99s state and use that\\nview to find the best assignment of sensing tasks. However, under real world condi-\\ntions, where bandwidth and computational power is limited, communication and data\\nprocessing takes time, and the number of sensors can be arbitrarily large, the weak-\\nnesses of this approach quickly become apparent. A different strategy, in the form of a\\ndifferent organizational design, can compensate for these more challenging conditions.\\nFor example, we might distribute the manager role among multiple different agents,\\nto more evenly balance the communication and computational loads. We might also\\ncreate an information dissemination hierarchy among the agents that summarizes and\\npropagates measurement data to use the available bandwidth more efficiently. How-\\never, distributing the role can lead to conflicts and lower utility, because no single agent\\nnecessarily has the appropriate local context to make the right decision. Similarly, a\\nhierarchical summarization process might introduce unwanted latency and imprecision.\\n\\nImplicit in this example is the idea that different organizations will affect perfor-\\nmance in different ways, either helping or hindering depending on the situation. Intu-\\nitively, changing the manner in which agents interact or the pattern that interactions\\ntake on can change behavior at both global and local levels. The objectives of a particu-\\nlar design will depend on the desired solution characteristics, so for different problems\\none might specify organizations which aim toward scalability, reliability, speed, or ef-\\nficiency, among other things. Confounding the search for such a design is the fact that\\nmany potentially important characteristics can be subtle or have complex interactions.\\n\\nIt is our belief that understanding the fundamental causes of these characteristics\\nand developing accurate models of their effects are both critical to selecting an appro-\\npriate design. To enable this functionality, we will present a new, domain-independent\\nlanguage designed to capture organizational information in a single predictive struc-\\nture. This Organizational Design Modeling Language (ODML) incorporates quantita-\\ntive information in the form of mathematical expressions that are used to predict the\\ncharacteristics of an organization. Succinct but detailed representations of the range\\nof organizational possibilities can be defined with ODML, using local knowledge to\\nautomatically predict the behavior of the global system. This representation addresses\\nthe needs outlined above by creating a computational model that is able to uncover the\\neffects of interactions, and allow subtle effects to become more transparent.\\n\\nSection 2 will define the ODML language, and demonstrate its ability to model\\na complex, real-world system. Our ultimate objective is to create technology able to\\nreason about the type of characteristics and tradeoffs mentioned above, automatically\\nselecting the appropriate organizational design for a particular operational context. We\\nwill show in Section 3 that by incorporating appropriate search strategies, the detailed\\ninformation present in ODML can serve as the foundation for such a process.\\n\\n\\n\\n2 Representing Organizations\\n\\nThe practice of structuring an agent system to best suit a set of perceived strengths and\\nweaknesses is not a new concept. A wealth of research has been performed itemizing al-\\ngorithms and techniques that accomplish this objective. The solution we present differs\\nin that it suggests a more general way to determine which strategy is most appropriate\\nfor a given situation, based on the characteristics endowed on a system by the organi-\\nzation it employs. The foundation of this approach is the representation used to capture\\nthose characteristics.\\n\\nAn organizational model, as we envision it, serves in several different capacities.\\nAt design time, it should be possible to use the structure to create and evaluate not\\njust a single organizational instance, but an entire family of organizational possibilities.\\nAt runtime, it should accurately describe the current organization. In both cases, the\\nmodel must be sufficiently descriptive and quantitative that one can evaluate the organi-\\nzation\\xe2\\x80\\x99s effectiveness, and rank alternatives according to some specified criteria. Below,\\nwe enumerate the desired capabilities and characteristics the modeling language should\\npossess to satisfy these requirements:\\n\\n1. Represent a particular organizational structure. This would include roles, interac-\\ntions and associations (e.g., coalitions or teams). Differentflows in the organization,\\nsuch as communication and resources, should be representable.\\n\\n2. Represent the range of organizational possibilities, by identifying general classes of\\norganizations and the parameters which influence their behavior. Different elements\\nshould be able to be modeled at different levels of abstraction. Identify which char-\\nacteristics are under deliberate control, and which are derived from external factors.\\n\\n3. Enable concrete performance predictions and allow deductive analysis by quantita-\\ntively describing the relevant characteristics exhibited by the structure, the manner\\nin which those characteristics interact, and the constraints they are affected by. For\\nexample, both communication overhead and the effect that overhead has on work\\nload should be representable.\\n\\nMany different organizational representation schemes have been developed by re-\\nsearchers [2\\xe2\\x80\\x9310]. Nearly all these representations can satisfy the first two points, but\\nnone are able to incorporate quantitative knowledge in such a way that concrete predic-\\ntions along multiple, interdependent dimensions can be made directly from the model\\nitself. In this section we describe a new formalism called ODML that explores how such\\ninformation can be modeled and used.\\n\\nMost existing representations fall into one of two categories: either they represent a\\nwide range of organizational characteristics abstractly, or they can capture a smaller set\\nof characteristics concretely. The former are usually good at representing what entities\\nor relationships exist or could exist, but cannot compare alternatives in a quantitative\\nway. The latter may contain quantitative knowledge, but have difficulty relating that\\nknowledge to specific organizational concepts, either because the quantitative infor-\\nmation is only indirectly related to the organizational structure or because a separate\\nsimulation is required to elucidate the actual performance. This mitigates their useful-\\nness if one is hoping to understand the effects a particular organizational design will\\nhave, particularly in response to the needs of a dynamic environment.\\n\\n\\n\\nFor example, OMNI [6] andMOISE+[9] can each capture a greater variety of or-\\nganizational concepts than ODML, but do so in a largely qualitative way. Work by\\nMatson and DeLoach [4] does dynamically compute the quantitative utility of an orga-\\nnization, but does so using only a single aggregate statistic. Conversely, both SADDE\\n[5] andMIT\\xe2\\x80\\x99s Process Handbook [8] can incorporate arbitrary quantitative information,\\nbut neither couples this information with the organizational structure in a way that en-\\nables one to deduce how the characteristics of one aspect of the design affect another.\\nThe representation created by Sims [10] does incorporate quantitative information into\\na structured organizational model, but we believe ODML\\xe2\\x80\\x99s more flexible design can\\nmodel more situations at different levels of abstraction. For example, although one can\\nmodel individual agents and roles in ODML, the representation does not require that\\nsuch elements exist. By modeling these concepts only abstractly or not at all, one can\\npotentially create models of much larger systems without the associated high combina-\\ntorics. At the same time, this flexibility can make the design search itself more difficult.\\nEach representation has its strengths and ODML\\xe2\\x80\\x99s goal is not to supplant these works,\\nbut to demonstrate another approach that makes different tradeoffs. As shown in the\\nfollowing section, ODML does so by incorporating a concrete but flexible set of prim-\\nitives that can model a range of organizational constructs along with the quantitative\\ncharacteristics that differentiate them.\\n\\nWe believe the principal benefit of using a quantitative representation is the ability to\\nmake rapid but precise predictions about organizational performance. If one views the\\nprocess of organizational design as a search through the potentially very large space of\\npossible organizational structures, a critical part of that search is the ability to evaluate\\nalternative designs with respect to an expected operational context. We further believe\\nthat the utility of an organizational structure should not be restricted to just a single\\nmetric, but can be based on many characteristics that may be tightly coupled with one\\nanother and the structure itself. ODML models are able to capture both the space of al-\\nternatives and the complex characteristics they exhibit in a representation that can make\\npredictions much faster than is possible through simulation. If used as part of a design\\nprocess, this advantage can allow the evaluation of a greater number of alternatives,\\nwhich will increase the chance that the most suitable design will be found.\\n\\n2.1 ODML\\n\\nThe formal, domain-independent definition of an ODML template specification O is\\ngiven below. Section 2.2 will give examples of how these features are used in practice.\\n\\nO = {N , H, C, K, M, V }\\nN = {N0, N1, . . . , Nn} (1)\\nNi = {t, p\\xcc\\x84, I, H, C, K, M, V }\\n\\nThe bulk of the ODML template specification is made up of the set N of nodes,\\neach of which corresponds to a particular physical or logical entity that might exist in\\nthe organization. For example, in the sensor network scenario there would be nodes\\n\\n\\n\\ncorresponding to managers, relationships, agents and the environment, among other\\nthings. Each nodeNi contains a number of elements, defined below:\\n\\nt The node\\xe2\\x80\\x99s type. This label must be unique within the set of template nodes that make\\nup the organization.\\nN.t = !symbol\"\\n#N, M $ N , N.t = M.t % N = M\\n\\np\\xcc\\x84 An ordered list of parameters that must be passed to the node\\xe2\\x80\\x99s template when an\\ninstance of the node is created. These are analogous to the parameters one might\\npass to an object constructor. Each parameter is specified with a type and local\\nname.\\nN.p\\xcc\\x84 = [!symbol, type\", . . .]\\n\\nI The set of node types that this node has an is-a relation with using conventional\\nobject-oriented inheritance semantics. If we assume that a node\\xe2\\x80\\x99s I = {a, b}, an\\ninstance of the node will also be an instance of a and b, possessing the characteris-\\ntics of all three node types. Is-a relationships cannot be cyclic, i.e., N cannot have\\nitself as a decedent.\\nN.I = {!type\", . . .}\\n#i $ N.I, N &= i \\' N /$ i.I \\' ...\\n\\nH The set of node types that this node has a has-a relation with. If we assume that\\nH = {a, b}, an instance of the node will possess some number of instances of\\nboth a and b. It is through this type of relationship that the primary organizational\\ndecomposition is formed. Each has-a has a magnitude that specifies the number of\\ninstances connected by the relationship.\\nN.H = {!symbol, type, magnitude\", . . .]\\nmagnitude = !symbol\"\\n\\nC A set of constants that represent quantified characteristics associated with the node.\\nConstants may be defined with numeric constants (e.g., 42), or mathematical ex-\\npressions (e.g., x + y).\\nN.C = {!symbol, expression\", . . .}\\n\\nK A set of constraints. Also defined with expressions, an organization is considered\\nvalid if all of its constraints are satisfied.\\nN.K = {!symbol, op, expression\", . . .}\\nop $ {<, >,(,), =, &=}\\n\\nM A set ofmodifiers that can affect (e.g., mathematically change) a value contained\\nby a node. Multiple modifiers may affect the same value. Modifiers model flows\\nand interactions by allowing the characteristics and decisions made in one node to\\naffect those of another.\\nN.M = {!symbol, op, expression\", . . .}\\nop $ {+,*,+,\\xc3\\xb7}\\n\\nV A set of variables, representing decisions that must be made when the node is\\ninstantiated. Each variable is associated with a range of values it can take on. For\\nexample, a node might have a variable x that could take any one value in the set\\n[2.7, y2,!z].\\nN.V = {!symbol, {expression, . . .}\", . . .}\\n\\n\\n\\nsymbol refers to a user-defined string, similar to a variable name in a conventional\\nprogramming language. These typically describe or refer to a particular characteris-\\ntic. type is the type name of some defined node, so ,N $ N such that N.t = type.\\nexpression is an arbitrary algebraic expression, possibly referencing constants, sym-\\nbols and function calls. ODML supports the use of floating point values, lists of floating\\npoint values, and discrete probabilistic distributions in these expressions.\\n\\nThe top-level organization node O also contains the elements H, C, K, M, V , pro-\\nviding a location to embed additional global information and constraints.\\n\\nCollectively, we refer to C, K, M, V as a node\\xe2\\x80\\x99s fields, and the quantitative state of\\na field as its value. For example, a constant field total load might be defined with the\\nexpression total load = work load + communication load and have a value of 0.9 for\\na particular agent. Note that the use of the term \\xe2\\x80\\x9cconstant\\xe2\\x80\\x9d may initially be misleading.\\nWhile the expression defining total load is fixed, the value for total load produced by\\nthat expression may change through the application of modifiers, or due to changes in\\nfields or values that the expression is dependent on.\\n\\nAt first glance, the ODML language may appear to be devoid of almost all the orga-\\nnizational concepts that are provided by typical organizational representations. This is\\npartially true, and by design. Instead of directly incorporating the usual high-level orga-\\nnizational components, such as hierarchies, roles, agents, etc., ODML provides a set of\\nrelatively low-level primitives by which such structures can be defined. For example, a\\nnode with the user-defined typemanager, having a has-a relationship with another node\\nof type agent could embody a role-agent relationship. A sequence of has-a relationships\\nbetween nodes could indicate a hierarchy. Although the high-level semantics for these\\nnodes may only be implicit, the concrete characteristics and design ramifications are\\nstill directly and quantitatively captured by the nodes\\xe2\\x80\\x99 fields. We feel that this approach\\ncan lead to an increased diversity of representable structures, by avoiding the assump-\\ntions and inevitable restrictions that typically accompany high-level structures. Section\\n3 will demonstrate that it also simplifies the organizational search process, by unifying\\nthe various ways that design alternatives can be specified into two well-defined template\\ncharacteristics (has-a relationships and variables).\\n\\nODML instances are quite similar to ODML templates. The difference is that where\\na template is a description of what could be, an instance is a description of what is.\\nWhere a template might specify that a manager role can be assigned to a single agent\\nor distributed across multiple agent nodes, an instance would indicate that manager 1\\nis distributed across agent 5 and agent 7, and so on. Once instantiated, the expressions\\ndefined by the fields, the data passed in through parameters, and the interactions caused\\nby relationships can all be used to predict values for an individual node\\xe2\\x80\\x99s characteristics.\\n\\nThe formal definition of an instance is nearly identical to that given in Equation 1,\\nso we will not repeat it here. The differences principally relate to the replacement of\\nnode types in the template with instances of those nodes in the organizational instance.\\nThus, the set N is the set of node instances, whose individual types no longer need\\nbe unique. So, where there might be just a singlemanager type in the template, there\\ncan be an arbitrary number of manager instances in the instance. Both is-a (N.I) and\\nhas-a (N.H) relationships no longer reference node types, but particular node instances\\nin N . Finally, the set p\\xcc\\x84 is filled with appropriate values from each node\\xe2\\x80\\x99s parent, and\\n\\n\\n\\nget value(symbol s)\\nr- null\\nif (s is of the form s1.s2)\\n\\nn- get value(s1)\\nr- n.get value(s2)\\n\\nelse if (, c $ C | c.symbol = s) r- evaluate(c.expression)\\nelse if (, h $ H | h.symbol = s) r- h\\nelse if (, v $ V | v.symbol = s) r- evaluate(v.expression)\\nelse if (, p $ p\\xcc\\x84 | p.symbol = s) r- p\\nelse forall i $ I\\n\\nr- i.get value(s)\\nif (r &= null) break\\n\\nforall m $M\\nif (m.symbol = s)\\n\\nr- r m.op evaluate(m.expression)\\nforall n $ N\\n\\nforall m $ n.M\\nif (m.symbol is of the form s1.s2) \\' (s1 = N) \\' (s2 = s)\\n\\nr- r m.op n.evaluate(m.expression)\\nreturn r\\n\\nevaluate(expression e)\\nforall s $ { non*function symbols referenced by e }\\n\\nvs - get value(s)\\nsubstitute all occurrences of s $ e with vs\\n\\nr- mathematical result of e\\nreturn r\\n\\nFig. 1. Pseudocode for the get value function of a node N . This function is used to quantify the\\ncharacteristics of instance nodes.\\n\\nthe variable set V for each node is replaced by a single item from that variable\\xe2\\x80\\x99s range.\\nBecause a common syntax is shared between the two forms, for the remainder of this\\ndocument I will indicate where necessary which is being considered.\\n\\nAs mentioned above, it is the ability to use an ODML model to deduce quantitative\\nvalues for specific characteristics that sets it apart from other representations. The man-\\nner in which these values are determined for an instance node\\xe2\\x80\\x99s characteristics is defined\\nby the pseudocode in Figure 1. This shows how various sources of information, non-\\nlocal data and node interrelationships all interact to describe the features of a particular\\nnode. It is through the execution of this function on a particular symbol that predictions\\nare made of the design\\xe2\\x80\\x99s performance. The process shown by the pseudocode formal-\\nizes what should be a mathematically intuitive way of determining a symbol\\xe2\\x80\\x99s value.\\nFor example, if a constant c is defined to be a.x + y, then get value(c) will proceed\\nby evaluating a.x + y, which will recursively call get value() on a.x and y. The dot-\\n\\n\\n\\nSensor\\nSensor\\n\\nSensor\\nSensor\\n\\nSensor\\n\\nSector \\nManager\\n\\nSector \\nManager\\n\\n< \\nSc\\n\\nan\\n T\\n\\nas\\nks\\n\\nRe\\nsu\\n\\nlts\\n >\\n\\nSensor\\n\\nSensor\\nSensor Sensor\\n\\nTrack \\nManager\\n\\nTr\\nac\\n\\nk \\nTa\\n\\nsk\\ns \\n\\n>\\n< \\n\\nR\\nes\\n\\nul\\nts\\n\\nTrack \\nManager\\n\\nNegotiation\\n\\nTra\\nck I\\n\\nnfo\\nrma\\n\\ntion\\n >\\n\\n< S\\nens\\n\\nor I\\nnfo\\n\\nrma\\ntion\\n\\nTarget \\n\\nSector\\n\\nSector\\n\\n Target \\n\\norganization\\n\\nenvironment\\n\\n1\\n\\nsector\\n\\nenv.num_sectors\\n\\ntrack_manager\\n\\nenv.num_targets\\n\\nsector_manager\\n\\n1\\n\\nsensor\\n\\nnum_sensors\\n\\nagent\\n\\n1\\n\\nrobust-agent normal-agent\\n\\n1\\n\\nnum_agents sm_tm_relation\\n\\nsector_managers\\n\\ns_tm_relation\\n\\nsensors\\n\\n(a) (b)\\n\\nFig. 2. The a) conceptual DSN organizational design and b) corresponding ODML template struc-\\nture.\\n\\nsensor_organization\\n\\nenvironment sector sector TM\\n\\nSM S S\\n\\na a\\n\\nSM S S\\n\\na a\\n\\nSM-TM SM-TM S-TM S-TM S-TM S-TM\\n\\nFig. 3. An instance created from the template in Figure 2b.\\n\\nnotation of a.x indicates that the value of x in node a is being referenced. y refers to\\nthe value of y in the local node, which may be another local constant, variable, or pa-\\nrameter, or be inherited from an is-a relationship. The effect of modifiers is somewhat\\nless intuitive, because they may change the value of a symbol without being part of that\\nsymbol\\xe2\\x80\\x99s definition. For example, there might be a modifier in some other node b that\\nincrements the value of c by some amount z. The effect of this operation is as if c were\\nactually defined as (a.x + y) + b.z.\\n\\nSection 3 will show that the process of finding an appropriate organization revolves\\naround first finding the set of valid designs, and selecting from that set the one that is\\nmost desirable. The validity of a particular organizational instanceO is defined as:\\n\\nO is valid iff #N $ O.N , N is valid (2)\\nN is valid iff #k $ N.K, (N.get value(k.symbol) k.op k.expression) = true\\n\\nThe \\xe2\\x80\\x9cdesirability\\xe2\\x80\\x9d of instance O can be quantified by defining a utility character-\\nistic in the organization. This can then be computed using the existing machinery by\\ncalling O.get value(utility). Once such a value has been computed for all candidate\\norganizational designs, they may be ranked and the best selected. These concepts will\\nbe revisited in Section 3.\\n\\n\\n\\n2.2 Representing Organizational Characteristics\\n\\nODML\\xe2\\x80\\x99s method of defining organizations is more free-form than most other existing\\norganizational representations. On one hand, this characteristic can offer a great deal of\\nflexibility in how and what organizations are represented. The drawback is its lack of\\nhigh-level guiding structures, which can make it difficult to initially grasp how ODML\\nmodels should be created and how the various pieces of a model really interrelate.\\nBecause of this, the capabilities of ODML are best explained through an example.\\n\\nWe will use a working system that was developed for a distributed sensor network\\n(DSN) domain to motivate and demonstrate the capabilities of ODML. This framework\\nwas designed and developed prior to the existence of ODML, making it an ideal plat-\\nform to gauge ODML\\xe2\\x80\\x99s ability to accurately depict the characteristics of a real-world\\nsystem. The goal in this domain is to use a collection of sensors to track targets in an\\narea. Each sensor is controlled by an agent that can communicate over a low-bandwidth,\\nwireless network. Individual sensors can return only simple amplitude and frequency\\nvalues, so a sensor is incapable of determining the absolute position of a target by itself.\\nTo track under these conditions, the sensors must be organized and coordinated in a\\nmanner that permits their measurements to be used for triangulation.\\n\\nThe system employs an explicit organizational design, as seen in Figure 2a, in an\\neffort to reduce overhead without negatively impacting performance. This begins with\\nthe agents dividing the environment into a series of logical sectors, each a rectangu-\\nlar portion of the available area. The intent of these divisions is to limit the interac-\\ntions needed between sensors, to reduce and distribute the overall communication load.\\nThere are also three types of responsibilities, or roles, that agents may take on: sector\\nmanager, track manager and sensor. Each role specifies behaviors, responsibilities and\\ninteractions that must be enacted by the agent it is assigned to. Agents can take on mul-\\ntiple roles. The complete architecture, described in detail in [11], has been demonstrated\\nsuccessfully in both simulation and real-world experiments.\\n\\nWe will proceed with an overview of how an ODML model was produced for this\\nsystem. For clarity, the names of nodes and fields that reside in nodes will be repre-\\nsented in italics. A graphical depiction of some aspects of the ODML template created\\nfor the DSN domain can be seen in Figure 2b. Space precludes showing the complete\\nXML-based specification, which is roughly 300 lines long, but a representative portion\\ncan be seen in Figure 4. Vertices in the graph, such as sensor and track manager, cor-\\nrespond to nodes in the ODML model. Nodes can represent both tangible (e.g. agent)\\nand intangible (e.g. sector) entities. At the root there exists an organization node. The\\norganization node serves as the common root of all other nodes in the structure. This\\nis true even if multiple, otherwise independent structures exist, because they still oper-\\nate within a common environment (the agent world) that relates them even if no other\\naspects do. For example, the sector nodes are related in a peer-to-peer fashion; no con-\\ncrete entity exists above to manage or control them (although one could be added to do\\nso). Thus, although the graph-inspired design used by ODML facilitates the modeling\\nof decomposable organizations, it is not limited to depicting this class.\\n\\nEdges in the graph show relations between nodes. Directed edges with a solid arrow\\nrepresent has-a relations, and the corresponding label indicates the relation\\xe2\\x80\\x99s magnitude.\\nFor example, consider the track manager node, which corresponds to the DSN\\xe2\\x80\\x99s track\\n\\n\\n\\n1 <node type=\"track_manager\">\\n2 <param>organization:org,environment:env,[sector]:sectors</param>\\n3 <is-a>entity</is-a>\\n4 <has-a name=\"agent\" size=\"num_agents\">agent(env)</has-a>\\n5 <has-a name=\"sm_relations\">forall(sm, sector_managers):sm_tm_relation(org, this, sm)</has-a>\\n6 <has-a name=\"s_relations\">forall(s, sensors):s_tm_relation(org, this, s)</has-a>\\n7\\n8 <!-- Determine target bounds -->\\n9 <constant name=\"uncertainty_radius\">5</constant>\\n10 <constant name=\"influence_radius\">uncertainty_radius + 10</constant>\\n11 <constant name=\"target_area\">3.14 * influence_radius\\xcb\\x862</constant>\\n12\\n13 <!-- Calculate requested measurement rate -->\\n14 <constant name=\"desired_sensors\">3</constant>\\n15 <constant name=\"sensor_density\">forallavg(sectors.sensor_density)</constant>\\n16 <constant name=\"actual_sensors_available\">target_area * sensor_density</constant>\\n17 <constant name=\"requested_sensors\">min(desired_sensors, actual_sensors_available)</constant>\\n18 ...\\n19 </node>\\n20\\n21 <node type=\"s_tm_relation\">\\n22 <param>organization:org,track_manager:tm,sensor:s</param>\\n23\\n24 <!-- Calculate actual measurement rate -->\\n25 <constant name=\"requested_sensor_rate\">tm.requested_sensors / org.total_sensors</constant>\\n26 <constant name=\"requested_measurement_rate\">tm.requested_measurement_rate * requested_sensor_rate</constant>\\n27 <modifier name=\"s.requested_measurement_rate\" op=\"+\">requested_measurement_rate</modifier>\\n28\\n29 <!-- Assign measurement communication load -->\\n30 <constant name=\"actual_measurement_rate\">requested_measurement_rate * s.actual_measurement_ratio</constant>\\n31 <modifier name=\"tm.actual_measurement_rate\" op=\"+\">actual_measurement_rate</modifier>\\n32 <modifier name=\"s.message_rr\" op=\"+\">actual_measurement_rate</modifier>\\n33 ...\\n34 </node>\\n\\nFig. 4. A portion of the ODML specification for the track manager and s tm relation nodes.\\n\\nmanager role. It has a number of agents defined by num agents, shown in line 4 of Fig-\\nure 4, that represent the agents the role is bound to. In the DSN system, a track manager\\nrole may migrate amongmany different agents over time. The magnitude num agents is\\nused here to represent this behavior, and modifiers distribute the characteristics accord-\\ningly. Has-a relationships in the template may also be recursive or self-referential. This\\nfacilitates the modeling of self-similar organizations, such as hierarchies, by making it\\npossible to represent organizations with varying numbers of levels.\\n\\nA hollow-arrow edge represents an is-a relation, so normal agent is an instance of\\nagent. Shaded nodes, such as agent, are abstract and cannot be directly instantiated.\\nThus, any node with a has-a relation with agent can instead substitute normal agent.\\nThis indirection allows the model to represent alternative nodes with different capabili-\\nties. For example, suppose there were two types of agents available: a normal agent, and\\na \\xe2\\x80\\x9crobust\\xe2\\x80\\x9d agent that had better processing and computational powers but a higher cost.\\nTo model this, a robust agent node is depicted that also has an is-a relation with agent,\\nand can be substituted for agent in the same way. A similar arrangement could model a\\nrange of alternative roles that had different characteristics but could serve overlapping\\npurposes. For example, if different sensors types existed with different characteristics,\\nthey would all have an is-a relationship with the common node sensor.\\n\\nFigure 3 shows one particular instance created from the template in Figure 2b. Ver-\\ntices in the instance graph represent nodes, and a gray directed edge indicates the exis-\\ntence of a non-local modifier from the source node to a field in the target node. Black\\ndirected edges represent has-a relationships, but unlike the template they have no mag-\\nnitude. Because this is a particular instance of the sensor network organization, the\\ndecision points present in the template have all been decided. Therefore, where sector\\n\\n\\n\\nmight have the num sensors magnitude on its sensor relationship in the template, a dis-\\ncrete value of two has been chosen for that field in this particular instance. Because of\\nthis, each sector in the instance has a has-a relationship with two distinct sensors (S).\\nNormal agents (a), sector managers (SM), track managers (TM), and two kinds of track\\nmanager relations (SM-TM and S-TM), are also present.\\n\\nThe heart of any ODML model exists in the expressions encoded within nodes\\xe2\\x80\\x99\\nfields. Each expression consists of a sequence of standard mathematical operations\\n(e.g.,+,\\xc3\\xb7, xy , etc.) and a limited number of predefined functions (e.g., min, max, sqrt,\\nround, forallavg, etc.). A selection of these fields, contained by the track manager and\\ns tm relation nodes, are shown in Figure 4. The former defines the track manager role,\\nwhile the latter represents the relationship that role has with sensors in the environment.\\nEach node\\xe2\\x80\\x99s field contains a mathematical equation, combining local and nonlocal in-\\nformation to calculate new local values. These expressions allow one to represent how\\ndifferent characteristics of the node may be computed. For example, suppose we wish to\\ndefine how to calculate the bounds of a target that moves through the environment. This\\nwill depend on the uncertainty the manager has in the target\\xe2\\x80\\x99s location, along with a fac-\\ntor modeling the range of the target\\xe2\\x80\\x99s influence. In our model, this area will be approxi-\\nmated as a circle; line 11 shows how the track manager\\xe2\\x80\\x99s target area constant is derived\\nfrom the target\\xe2\\x80\\x99s influence radius. The number of sensors presumed capable of sensing\\nthe target is the average number that lie within this area. Therefore, although the num-\\nber of desired sensors is independent of the environment, the actual sensors available\\nto the manager depends indirectly on the target area and sensor density, as shown in\\nline 16. The constant requested sensors is the minimum of the desired and available.\\n\\nWe maymodel the number of measurements provided to the track manager in a sim-\\nilar way. The actual measurement rate constant from line 30 of the sensor-track man-\\nager relationship is derived from the locally calculated requested measurement rate and\\nactual measurement ratio computed by the sensor node. This value is then used in a\\npair of modifiers defined in lines 31 and 32 that specify for the track manager and sen-\\nsor the actual number of measurements that will be taken. This value will eventually be\\nused along with other characteristics to estimate the rms error the track manager will\\nexhibit. Variables and constraints present elsewhere in the model are similarly defined.\\nThese descriptions give only the spirit of the calculation process, refer back to Figure 1\\nfor a more rigorous definition of how these values are assimilated in practice.\\n\\nThrough modifiers or the assimilation of nonlocal values, the characteristics of one\\nnode may affect or be affected by those of another. ODML models are generally con-\\nstructed by designing individual nodes, and linking them through nonlocal dependen-\\ncies or modifiers. The resulting web of equations allows one to model important con-\\ncepts such as informationflow, control flow, and the effects of interactions. By propagat-\\ning data through these expressions, the model can correctly predict the characteristics\\nof both individual nodes and the organization as a whole. Perhaps more importantly, it\\nalso allows the model to predict characteristics not envisioned by the designer, as results\\ncan flow through the graph in unanticipated ways.\\n\\nAlthough space precludes providing a complete description, the model we have\\ncreated also captures a range of other characteristics of the DSN system, including the\\nphysical and task environment, agent interactions, single and multiple role assignments,\\n\\n\\n\\nAgents per Sector\\n0 5 10 15 20 25 30 35 40\\n\\nM\\nes\\n\\nsa\\nge\\n\\ns \\n(1\\n\\n00\\n0\\xe2\\x80\\x99\\n\\ns)\\n\\n0\\n\\n0.5\\n\\n1\\n\\n1.5\\n\\n2\\n\\n2.5\\nTracking Control Diurectory Service Results\\n\\nAgents per Sector\\n0 5 10 15 20 25 30 35 40M\\n\\nes\\nsa\\n\\nge\\n V\\n\\nol\\num\\n\\ne \\nS\\n\\nta\\nnd\\n\\nar\\nd \\n\\nD\\nev\\n\\nia\\ntio\\n\\nn\\n\\n0\\n\\n10\\n\\n20\\n\\n30\\n\\n40\\n\\n50\\n\\n60\\n\\nAgents per Sector\\n0 5 10 15 20 25 30 35 40\\n\\nA\\nve\\n\\nra\\nge\\n\\n R\\nM\\n\\nS\\n E\\n\\nrr\\nor\\n\\n0\\n\\n1\\n\\n2\\n\\n3\\n\\n4\\n\\n5\\n\\n(a) (b) (c)\\n\\nFig. 5. ODML DSN model predictions versus empirical observations for a) Message totals by\\ntype, b) Messaging disparity and c) RMS error. Predicted lines are solid, empirical are dashed.\\n\\nAgents per Sector\\n0 5 10 15 20 25 30 35 40\\n\\nA\\nve\\n\\nra\\nge\\n\\n T\\not\\n\\nal\\n\\n0\\n\\n10\\n\\n20\\n\\n30\\n\\n40\\n\\n50\\n\\n60\\n\\n70\\n\\nRole \\xe2\\x80\\x99A\\xe2\\x80\\x99 Characteristics\\n\\nRole Count\\nResults\\n\\nTracking Control\\nDirectory Service\\n\\nAgents per Sector\\n0 5 10 15 20 25 30 35 40\\n\\nA\\nve\\n\\nra\\nge\\n\\n T\\not\\n\\nal\\n0\\n\\n50\\n\\n100\\n\\n150\\n\\n200\\n\\n250\\n\\nRole \\xe2\\x80\\x99AM\\xe2\\x80\\x99 Characteristics\\n\\nRole Count\\nResults\\n\\nTracking Control\\nDirectory Service\\n\\n(a) (b)\\n\\nFig. 6. Comparison of ODML DSN model\\xe2\\x80\\x99s role-specific predictions.\\n\\ndynamic role assignment, heterogeneity, geographic coalitions, potential conflicts, and\\nboth hard and soft constraints. Each was successfully modeled, suggesting that the rel-\\natively modest set of primitives offered by ODML is capable of representing a wide\\nrange of complex and relevant organizational factors.\\n\\nOne feature absent in the ODML language is a well-defined notion of time. Al-\\nthough the DSN model captures rates of change and expected value, there is no explicit\\nrepresentation of a varying timeline or change points present in ODML. This makes\\nODML more tractable to work with by reducing the search space of organizations, but\\ncan also make representing some characteristics more difficult. The absence of time\\nmeans that ODML instances generally represent a snapshot of a running system, or an\\naveraging or probabilistic distribution of effects as they would occur over some span\\nof time. If dynamic elements exist, they may be represented in that way, and can still\\nbe used to guide organizational decisions. For example, one might identify that sensor\\nresources must be available to satisfy the needs of dynamically discovered targets. By\\nusing an expected or worst-case value to quantify this need, or creating a distribution\\nthat captures the range of possible targets, the organization can be designed appropri-\\nately even though the specific context is uncertain at design time.\\n\\n2.3 Evaluating the Representation\\n\\nPrevious work analyzed the effects that the DSN organization had on performance\\nacross a range of metrics [12]. In those tests, the number of agents in each sector\\n\\n\\n\\nwas varied to demonstrate how changing the organization can have far-reaching con-\\nsequences. To gauge the representational efficacy of ODML, we have used the model\\ndescribed in the previous section to create organizational instances that match those\\nprior test runs. Characteristics defined in the ODML model measure the different met-\\nrics that were originally tested, allowing us to calculate values that can be compared\\nagainst the empirical results. Values for these characteristics were obtained using the\\nget value function described in Figure 1. This both demonstrates how ODML can be\\nused as a predictive tool for different operating contexts, and evaluates how well a spe-\\ncific model was able to capture real-world behaviors. Ideally, the empirical and modeled\\nresults will match, demonstrating that the model captures the complexity present in the\\nsystem and that predictions derived from the model are accurate.\\n\\nThe comparative results are shown in Figure 5. Note that the behavioral details be-\\nhind these results, which are presented in [12], are beyond the scope of this document.\\nIn this context, we are exploring only the accuracy of the ODML model\\xe2\\x80\\x99s predictions.\\nSolid lines in the graphs represent the values predicted by the ODML model, while\\ndashed are those obtained through the previous empirical testing. Figure 5a shows\\ncommunication totals by type. Figure 5b shows the communication disparity, which\\nmeasures how well or poorly the communication load is distributed in the population.\\nFigure 5c shows the average RMS error of the tracking tasks. Although there are some\\npoints of difference, in most cases the model does a good job predicting performance.\\nOne difference can be seen in Figure 5b, where the predicted standard deviation under-\\nestimates the actual performance in most cases. This is a byproduct of our assumption\\nthat all sensors were equally used. In the running system, sensors in the center of the\\nenvironment are used more than those at the edges, and will have different communi-\\ncation profiles because of it. Our model does not capture these geographic differences,\\nand will therefore generally have a lower estimated deviation.\\n\\nTo evaluate how our model captures finer-grained details, we analyzed the predicted\\ncommunication profiles of individual roles. A comparison of these role-specific behav-\\niors can be seen in Figure 6. In addition to communication totals, these graphs also\\ninclude role counts, indicating how many agents take on the specified role. \\xe2\\x80\\x99A\\xe2\\x80\\x99 repre-\\nsents the sensor role, \\xe2\\x80\\x99M\\xe2\\x80\\x99 is the sector manager, while \\xe2\\x80\\x99T\\xe2\\x80\\x99 is the track manager. \\xe2\\x80\\x99AM\\xe2\\x80\\x99\\ndescribes agents acting as both sensors and sector managers. Predictions at this more\\ndetailed level are also accurate. Many of the differences that do exist can be attributed\\nto geographic variances in a small sample size. For example, the 36- and 18-size scenar-\\nios had only one or two sector managers. Their individual geographic locations would\\nlikely affect performance, and these variations are not reflected in the predicted values.\\n\\n3 Using ODML to Design Organizations\\n\\nWe have thus far argued that organizations can have a tangible effect on performance,\\nand it is therefore useful to be able to understand those effects when designing an agent\\nsystem. The previous section demonstrated ODML\\xe2\\x80\\x99s ability to correctly model and pre-\\ndict the global and local characteristics of particular organizational designs used in a\\npreviously constructed, real-world application. Our ultimate goal, however, is to use\\nthis capability to support an automated organizational design process. It is this objec-\\n\\n\\n\\ntive that motivates the need for the detailed information that makes up an ODMLmodel.\\nIn this section we will outline how this has been accomplished, by using ODML as the\\nfoundation for a new design methodology. Space permits only a superficial description\\nof this work, a more detailed description will be given in a later publication.\\n\\nRecall that ODML representations are divided into two distinct classes: templates\\nthat encompasses the range of all possible organizations, and instances that are each\\nparticular organizations derived from a template. The range of possible instances in a\\ntemplate, defined by how its variables and has-a relations can be decided, constitutes an\\norganizational space that can be searched.\\n\\nFor example, one of the environment node\\xe2\\x80\\x99s variables expresses the range of possi-\\nble sensors per sector, which controls the shape of part of the organization. Other uses\\nof variables might be to decide the relative priority of an agent\\xe2\\x80\\x99s tasks, or the amount\\nof time it is willing to wait for a response. Decisions made for the agent has-a relation-\\nships in the three roles will determine the specific role-agent bindings that will be used.\\nSequences of similar decisions could also decide if the manager role will be distributed,\\nor how tall a data processing hierarchy should be. A range of options are possible, and\\ndifferent choices will result in different organizations. Constraints defined within nodes\\nhave the opposite effect, by limiting the set of valid organizations to some subset of\\nthose that are possible.\\n\\nAs with other characteristics, an ODML model can be used to capture the expected\\nutility of an organization by relating organizational characteristics with mathematical\\nexpressions. For example, in the DSN model, utility is based on average rms, which is\\nderived from the rms error values of the tracker roles, which are themselves dependent\\non many other factors. By defining a field with the semantics of \\xe2\\x80\\x9cutility\\xe2\\x80\\x9d, one can quan-\\ntitatively evaluate and rank candidate organizations by comparing these fields\\xe2\\x80\\x99 values.\\nThis provides a clear way to discriminate and decide among the alternatives that exist\\nin the template\\xe2\\x80\\x99s organizational space.\\n\\nAn automated organizational design process can be built upon these two concepts,\\nby leveraging the predicted characteristics to navigate the organizational space. Each\\nODML model includes a description of the expected operating context, available re-\\nsources, etc., in addition to the possible organizational structures. Given such a model,\\nthe most appropriate design (i.e. the one with maximal utility) can be found with an\\nappropriate search of the organizational space defined by the model.\\n\\nThe number of possible organizations grows exponentially with the number of de-\\ncisions that must be made in its construction. When organizations are being designed\\nfor a large number of agents, or when the template is particularly flexible, the space of\\npossibilities can easily become intractable. Because of this, it is important to develop\\ntechniques able to cope with such situations.\\n\\nOne technique that we have implemented bounds the search by exploiting hard con-\\nstraints that exist in the system. The expression-based knowledge in the ODML model\\nmakes this possible. Recall that all hard constraints must be satisfied in an organization\\nfor it to be considered valid (see Equation 2). If a constraint has become unsatisfied\\nduring the course of an organizational search, it may be reasonable to halt the search\\nbefore the organization is fully formed, and backtrack from that point. Two issues com-\\nplicate this process. The first is that constraints may be initially unsatisfied in a partially\\n\\n\\n\\ninstantiated structure, and only become satisfied later in the decision making process.\\nAdditionally, because values may change nonmonotonically, a constraint can change\\nits state repeatedly during the instantiation process. Both cases may cause a backtrack\\ndecision to be incorrect by missing valid organizations.\\n\\nBy analyzing the relationships that exist between fields, it is sometimes possible\\nto determine when choices may be safely ignored. For example, in the DSN domain a\\nsingle agent cannot control more than one sensor. Each agent has a sensors controlled\\nvalue, that is initially zero and later incremented using a modifier when it is assigned\\nto a sensor. This restriction is modeled by the hard constraint sensors controlled ( 1.\\nFor a particular organization with n sensors and a available agents, there are a n pos-\\nsible assignments of agents to sensors. However, only\\n\\n!\\na\\nn\\n\\n\"\\nof them are valid according\\n\\nto the sensors controlled constraint. If it were possible to detect when an invalid as-\\nsignment had been made before all organizational decisions have been completed, one\\ncould bound the search at that point and backtrack to where the constraint was satisfied.\\n\\nBecause role assignments are permanent, there is no decision that could be made\\nto reduce the number of sensors controlled by an agent. Therefore, it is reasonable and\\ncorrect to bound the search and backtrack if an agent is ever found to control more than\\none sensor, because that constraint will never be satisfied. While a human expert might\\nintuitively know to avoid such impossible configurations, a generic search process is\\ntoo myopic to perceive this fact. However, the relationship that this knowledge is based\\nupon is represented in the organizational template, in that sensors controlled is affected\\nby only that one type of modifier from the sensor node, that increments the value by\\na positive constant. It is possible to use this information to deduce the monotonically\\nincreasing trend of sensors controlled, and backtrack when appropriate.\\n\\nOur technique uses partial derivatives on a field\\xe2\\x80\\x99s dependent variables as a general\\nway of determining the trend of that field\\xe2\\x80\\x99s value. The trends for a constrained value\\nand the expression it is constrained by are determined by first recursively finding the\\ntrends of all the fields they depend on. By taking the partial derivative with respect to\\neach field referenced by an expression, along with the trend of each field, the trend of\\nthe original expression may be determined.With this information one can automatically\\ndetect when constraints have become unsatisfiable, and correctly bound the search.\\n\\n4 Conclusions\\n\\nThe ODML-based approach that we have presented in this paper is both general and\\nflexible enough to model a range of common organizational characteristics. It is partic-\\nularly useful when describing features that have a quantitative character. To support this\\nclaim, we have created and tested a complete model of a previously existing sensor net-\\nwork framework. Other work has also used ODML to model a hierarchical information\\nretrieval service [13], as well as more abstract, theoretical problems such as SUBSET-\\nSUM and TILINGS. These models demonstrate ODML\\xe2\\x80\\x99s ability to accurately predict\\nthe small- and large-grained behaviors of an organizationally-driven agent system.\\n\\nWe believe the detailed, quantitative knowledge embedded in ODML models is\\nrelevant because it provides the foundation for prescriptive technologies, such as the\\nautomated design service outlined above.We have described one strategy currently used\\n\\n\\n\\nto cope with the potentially large organizational search space by inferring value trends\\nto find unsatisfiable constraints. Additional techniques are currently being developed.\\nArmed with such techniques, the full potential of ODML can be realized by using its\\nflexible but detailed representation of organizational possibilities to effectively design\\nagent organizations.\\n\\nReferences\\n\\n1. Corkill, D.D., Lander, S.E.: Diversity in Agent Organizations. Object Magazine 8 (1998)\\n41\\xe2\\x80\\x9347\\n\\n2. Tambe, M., Adibi, J., Alonaizon, Y., Erdem, A., Kaminka, G.A., Marsella, S., Muslea, I.:\\nBuilding agent teams using an explicit teamwork model and learning. Artificial Intelligence\\n110 (1999) 215\\xe2\\x80\\x93239\\n\\n3. Lesser, V., Decker, K., Wagner, T., Carver, N., Garvey, A., Horling, B., Neiman, D., Podor-\\nozhny, R., NagendraPrasad, M., Raja, A., Vincent, R., Xuan, P., Zhang, X.: Evolution of the\\nGPGP/TAEMS Domain-Independent Coordination Framework. Autonomous Agents and\\nMulti-Agent Systems 9 (2004) 87\\xe2\\x80\\x93143\\n\\n4. Matson, E., DeLoach, S.A.: Autonomous organization-based adaptive information systems.\\nIn: Proceedings of the IEEE International Conference on Knowledge Intensive Multiagent\\nSystems (KIMAS \\xe2\\x80\\x9905). (2005)\\n\\n5. Sierra, C., Sabater, J., Augusti, J., Garcia, P.: SADDE: Social agents design driven by equa-\\ntions. In Bergenti, F., Gleizes, M., Zambonelli, F., eds.: Methodologies and software engi-\\nneering for agent systems. Kluwer Academic Publishers (2004)\\n\\n6. Dignum, V., Vazquez-Salceda, J., Dignum, F.: Omni: Introducing social structure, norms and\\nontologies into agent organizations. In: Second International Workshop on Programming\\nMulti-Agent Systems at the Third International Joint Conference on Autonomous Agents\\nand Multi-Agent Systems, New York, NY (2004) 91\\xe2\\x80\\x93102\\n\\n7. Fox, M., Barbuceanu, M., Gruninger, M., Lin, J.: An Organizational Ontology for Enter-\\nprise Modeling. In Prietula, M.J., Carley, K.M., Gasser, L., eds.: Simulating Organizations:\\nComputational Models of Institutions and Groups. AAAI Press / MIT Press (1998) 131\\xe2\\x80\\x93152\\n\\n8. Malone, T.W., Crowston, K., Lee, J., Pentland, B., Dellarocas, C., Wyner, G., Quimby, J.,\\nOsborn, C.S., Bernstein, A., Herman, G., Klein, M., O\\xe2\\x80\\x99Donnell, E.: Tools for inventing\\norganizations: Toward a handbook of organizational processes. Management Science 45\\n(1999) 425\\xe2\\x80\\x93443\\n\\n9. Hu\\xcc\\x88bner, J.F., Sichman, J.S., Boissier, O.: A model for the structural, functional, and deon-\\ntic specification of organizations in multiagent systems. In: Proceedings of the Brazilian\\nSymposium on Artificial Intelligence (SBIA\\xe2\\x80\\x9902). (2002) 118\\xe2\\x80\\x93128\\n\\n10. Sims, M., Corkill, D., Lesser, V.: Separating Domain and Coordination in Multi-Agent Or-\\nganizational Design and Instantiation. In: Proceedings of the International Conference on\\nIntelligent Agent Technology (IAT 2004), Beijing, China (2004)\\n\\n11. Lesser, V., Ortiz, C., Tambe, M., eds.: Distributed Sensor Networks: A Multiagent Perspec-\\ntive (Edited book). Volume 9. Kluwer Academic Publishers (2003)\\n\\n12. Horling, B., Mailler, R., Lesser, V.: A Case Study of Organizational Effects in a Distributed\\nSensor Network. In: Proceedings of the International Conference on Intelligent Agent Tech-\\nnology (IAT 2004), Beijing, China (2004)\\n\\n13. Horling, B., Lesser, V.: Quantitative Organizational Models for Large-Scale Agent Systems.\\nIn: Proceedings of the International Workshop on Massively Multi-Agent Systems, Kyoto,\\nJapan (2004) 297\\xe2\\x80\\x93312\\n\\n\\n'